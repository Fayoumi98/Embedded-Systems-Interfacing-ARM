
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b4c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000cd4  08000cd4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000cd4  08000cd4  00010cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000cd8  08000cd8  00010cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  08000cdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
  7 .bss          00000fc0  20000014  20000014  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000fd4  20000fd4  00020014  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   000026e4  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000090e  00000000  00000000  00022728  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000001e8  00000000  00000000  00023038  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000180  00000000  00000000  00023220  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00000e6f  00000000  00000000  000233a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00000cea  00000000  00000000  0002420f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00024ef9  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000005a4  00000000  00000000  00024f78  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0002551c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000cbc 	.word	0x08000cbc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08000cbc 	.word	0x08000cbc

080001c8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80001d2:	4909      	ldr	r1, [pc, #36]	; (80001f8 <NVIC_EnableIRQ+0x30>)
 80001d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d8:	095b      	lsrs	r3, r3, #5
 80001da:	79fa      	ldrb	r2, [r7, #7]
 80001dc:	f002 021f 	and.w	r2, r2, #31
 80001e0:	2001      	movs	r0, #1
 80001e2:	fa00 f202 	lsl.w	r2, r0, r2
 80001e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80001ea:	bf00      	nop
 80001ec:	370c      	adds	r7, #12
 80001ee:	46bd      	mov	sp, r7
 80001f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	e000e100 	.word	0xe000e100

080001fc <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
 8000202:	4603      	mov	r3, r0
 8000204:	6039      	str	r1, [r7, #0]
 8000206:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800020c:	2b00      	cmp	r3, #0
 800020e:	da0b      	bge.n	8000228 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000210:	490d      	ldr	r1, [pc, #52]	; (8000248 <NVIC_SetPriority+0x4c>)
 8000212:	79fb      	ldrb	r3, [r7, #7]
 8000214:	f003 030f 	and.w	r3, r3, #15
 8000218:	3b04      	subs	r3, #4
 800021a:	683a      	ldr	r2, [r7, #0]
 800021c:	b2d2      	uxtb	r2, r2
 800021e:	0112      	lsls	r2, r2, #4
 8000220:	b2d2      	uxtb	r2, r2
 8000222:	440b      	add	r3, r1
 8000224:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000226:	e009      	b.n	800023c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000228:	4908      	ldr	r1, [pc, #32]	; (800024c <NVIC_SetPriority+0x50>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	683a      	ldr	r2, [r7, #0]
 8000230:	b2d2      	uxtb	r2, r2
 8000232:	0112      	lsls	r2, r2, #4
 8000234:	b2d2      	uxtb	r2, r2
 8000236:	440b      	add	r3, r1
 8000238:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800023c:	bf00      	nop
 800023e:	370c      	adds	r7, #12
 8000240:	46bd      	mov	sp, r7
 8000242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000246:	4770      	bx	lr
 8000248:	e000ed00 	.word	0xe000ed00
 800024c:	e000e100 	.word	0xe000e100

08000250 <main>:
// Source and destination buffers
static uint32_t srcBuffer[BUFFER_SIZE];
static uint32_t dstBuffer[BUFFER_SIZE];

int main(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b090      	sub	sp, #64	; 0x40
 8000254:	af02      	add	r7, sp, #8
	SysTick_Init();
 8000256:	f000 f967 	bl	8000528 <SysTick_Init>


	GPIO_TYPE R_LED;
	R_LED.port = PORTA;
 800025a:	4b34      	ldr	r3, [pc, #208]	; (800032c <main+0xdc>)
 800025c:	61fb      	str	r3, [r7, #28]
	R_LED.pin = 6;
 800025e:	2306      	movs	r3, #6
 8000260:	623b      	str	r3, [r7, #32]
	R_LED.mode = OUTPUT_PUSH_PULL;
 8000262:	2301      	movs	r3, #1
 8000264:	627b      	str	r3, [r7, #36]	; 0x24
	R_LED.speed = VERY_HIGH_SPEED;
 8000266:	2303      	movs	r3, #3
 8000268:	62fb      	str	r3, [r7, #44]	; 0x2c
	gpio_init(R_LED);
 800026a:	466a      	mov	r2, sp
 800026c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000270:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000274:	e882 0003 	stmia.w	r2, {r0, r1}
 8000278:	f107 031c 	add.w	r3, r7, #28
 800027c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800027e:	f000 faf7 	bl	8000870 <gpio_init>

	GPIO_TYPE G_LED;
	G_LED.port = PORTA;
 8000282:	4b2a      	ldr	r3, [pc, #168]	; (800032c <main+0xdc>)
 8000284:	607b      	str	r3, [r7, #4]
	G_LED.pin = 5;
 8000286:	2305      	movs	r3, #5
 8000288:	60bb      	str	r3, [r7, #8]
	G_LED.mode = OUTPUT_PUSH_PULL;
 800028a:	2301      	movs	r3, #1
 800028c:	60fb      	str	r3, [r7, #12]
	G_LED.speed = VERY_HIGH_SPEED;
 800028e:	2303      	movs	r3, #3
 8000290:	617b      	str	r3, [r7, #20]
	gpio_init(G_LED);
 8000292:	466a      	mov	r2, sp
 8000294:	f107 0314 	add.w	r3, r7, #20
 8000298:	e893 0003 	ldmia.w	r3, {r0, r1}
 800029c:	e882 0003 	stmia.w	r2, {r0, r1}
 80002a0:	1d3b      	adds	r3, r7, #4
 80002a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002a4:	f000 fae4 	bl	8000870 <gpio_init>


	// create software triggered interrupt EXTI2_IRQn EXTI3_IRQn
	NVIC_SetPriority(EXTI2_IRQn,3);
 80002a8:	2103      	movs	r1, #3
 80002aa:	2008      	movs	r0, #8
 80002ac:	f7ff ffa6 	bl	80001fc <NVIC_SetPriority>
	NVIC_SetPriority(EXTI3_IRQn,4);
 80002b0:	2104      	movs	r1, #4
 80002b2:	2009      	movs	r0, #9
 80002b4:	f7ff ffa2 	bl	80001fc <NVIC_SetPriority>

	NVIC_EnableIRQ(EXTI2_IRQn);
 80002b8:	2008      	movs	r0, #8
 80002ba:	f7ff ff85 	bl	80001c8 <NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI3_IRQn);
 80002be:	2009      	movs	r0, #9
 80002c0:	f7ff ff82 	bl	80001c8 <NVIC_EnableIRQ>

	// set priority & enable DMA2 Stream 0 interrupt
	NVIC_SetPriority(DMA2_Stream0_IRQn,2);
 80002c4:	2102      	movs	r1, #2
 80002c6:	2038      	movs	r0, #56	; 0x38
 80002c8:	f7ff ff98 	bl	80001fc <NVIC_SetPriority>
	NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80002cc:	2038      	movs	r0, #56	; 0x38
 80002ce:	f7ff ff7b 	bl	80001c8 <NVIC_EnableIRQ>

	gpio_write(PORTA,6,1);
 80002d2:	2201      	movs	r2, #1
 80002d4:	2106      	movs	r1, #6
 80002d6:	4815      	ldr	r0, [pc, #84]	; (800032c <main+0xdc>)
 80002d8:	f000 fa8a 	bl	80007f0 <gpio_write>

	SysTick_Delay(5000);
 80002dc:	f241 3088 	movw	r0, #5000	; 0x1388
 80002e0:	f000 f90a 	bl	80004f8 <SysTick_Delay>



	DMA2_Stream_Init();
 80002e4:	f000 f828 	bl	8000338 <DMA2_Stream_Init>
	DMA2_Stream_SetAdresses(srcBuffer , dstBuffer , BUFFER_SIZE);
 80002e8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80002ec:	4910      	ldr	r1, [pc, #64]	; (8000330 <main+0xe0>)
 80002ee:	4811      	ldr	r0, [pc, #68]	; (8000334 <main+0xe4>)
 80002f0:	f000 f87c 	bl	80003ec <DMA2_Stream_SetAdresses>



	// initialize source buffer
	for(int idx = 0 ; idx < BUFFER_SIZE ; idx++)
 80002f4:	2300      	movs	r3, #0
 80002f6:	637b      	str	r3, [r7, #52]	; 0x34
 80002f8:	e00b      	b.n	8000312 <main+0xc2>
	{
		srcBuffer[idx] = idx * idx;
 80002fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80002fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80002fe:	fb02 f303 	mul.w	r3, r2, r3
 8000302:	4619      	mov	r1, r3
 8000304:	4a0b      	ldr	r2, [pc, #44]	; (8000334 <main+0xe4>)
 8000306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000308:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int idx = 0 ; idx < BUFFER_SIZE ; idx++)
 800030c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800030e:	3301      	adds	r3, #1
 8000310:	637b      	str	r3, [r7, #52]	; 0x34
 8000312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000314:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000318:	d3ef      	bcc.n	80002fa <main+0xaa>
	}

	gpio_write(PORTA,6,0);
 800031a:	2200      	movs	r2, #0
 800031c:	2106      	movs	r1, #6
 800031e:	4803      	ldr	r0, [pc, #12]	; (800032c <main+0xdc>)
 8000320:	f000 fa66 	bl	80007f0 <gpio_write>

	DMA2_Stream_Enable();
 8000324:	f000 f87a 	bl	800041c <DMA2_Stream_Enable>



	while (1)
 8000328:	e7fe      	b.n	8000328 <main+0xd8>
 800032a:	bf00      	nop
 800032c:	40020000 	.word	0x40020000
 8000330:	20000800 	.word	0x20000800
 8000334:	20000030 	.word	0x20000030

08000338 <DMA2_Stream_Init>:




void DMA2_Stream_Init(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
	///////// Step 1 : enable clock for DMA2
	SETBIT(RCC->AHB1ENR,22);
 800033c:	4a29      	ldr	r2, [pc, #164]	; (80003e4 <DMA2_Stream_Init+0xac>)
 800033e:	4b29      	ldr	r3, [pc, #164]	; (80003e4 <DMA2_Stream_Init+0xac>)
 8000340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000342:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000346:	6313      	str	r3, [r2, #48]	; 0x30

	///////// Step 2 : Make sure that DMA stream X is disabled
	if(DMA_SxCR_EN == (DMA_SxCR_EN & DMA2_Stream0->CR))
 8000348:	4b27      	ldr	r3, [pc, #156]	; (80003e8 <DMA2_Stream_Init+0xb0>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	f003 0301 	and.w	r3, r3, #1
 8000350:	2b01      	cmp	r3, #1
 8000352:	d10c      	bne.n	800036e <DMA2_Stream_Init+0x36>
	{
		// DMA2 stream 0 is enabled, must be disabled first
		DMA2_Stream0->CR &= ~DMA_SxCR_EN;
 8000354:	4a24      	ldr	r2, [pc, #144]	; (80003e8 <DMA2_Stream_Init+0xb0>)
 8000356:	4b24      	ldr	r3, [pc, #144]	; (80003e8 <DMA2_Stream_Init+0xb0>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	f023 0301 	bic.w	r3, r3, #1
 800035e:	6013      	str	r3, [r2, #0]

		// wait until enable bit is cleared
		while(DMA_SxCR_EN == (DMA_SxCR_EN & DMA2_Stream0->CR))
 8000360:	bf00      	nop
 8000362:	4b21      	ldr	r3, [pc, #132]	; (80003e8 <DMA2_Stream_Init+0xb0>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	f003 0301 	and.w	r3, r3, #1
 800036a:	2b01      	cmp	r3, #1
 800036c:	d0f9      	beq.n	8000362 <DMA2_Stream_Init+0x2a>

	///////// Step 3 : Select DMA channel CHSEL[2:0] in DMA_SxCR in case (Preph <=> Mem)
	// not needed in the case of Memory <=> Memory

	///////// Step 4 : Select stream Priority level (very high)
	DMA2_Stream0->CR |= DMA_SxCR_PL;
 800036e:	4a1e      	ldr	r2, [pc, #120]	; (80003e8 <DMA2_Stream_Init+0xb0>)
 8000370:	4b1d      	ldr	r3, [pc, #116]	; (80003e8 <DMA2_Stream_Init+0xb0>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000378:	6013      	str	r3, [r2, #0]

	///////// Step 5 : Select data direction Memory <=> Memory
	DMA2_Stream0->CR |= DMA_SxCR_DIR_1;
 800037a:	4a1b      	ldr	r2, [pc, #108]	; (80003e8 <DMA2_Stream_Init+0xb0>)
 800037c:	4b1a      	ldr	r3, [pc, #104]	; (80003e8 <DMA2_Stream_Init+0xb0>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000384:	6013      	str	r3, [r2, #0]

	///////// Step 6 : Select Memory and Peripheral Sizes (1/2/4 bytes)
	DMA2_Stream0->CR |= DMA_SxCR_MSIZE_1;
 8000386:	4a18      	ldr	r2, [pc, #96]	; (80003e8 <DMA2_Stream_Init+0xb0>)
 8000388:	4b17      	ldr	r3, [pc, #92]	; (80003e8 <DMA2_Stream_Init+0xb0>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000390:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR |= DMA_SxCR_PSIZE_1;
 8000392:	4a15      	ldr	r2, [pc, #84]	; (80003e8 <DMA2_Stream_Init+0xb0>)
 8000394:	4b14      	ldr	r3, [pc, #80]	; (80003e8 <DMA2_Stream_Init+0xb0>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800039c:	6013      	str	r3, [r2, #0]

	///////// Step 7 : Select FIFO Mode, it will also be set by the hardware when the stream is enabled
	// DMDIS: Direct mode disable
	DMA2_Stream0->FCR |= DMA_SxFCR_DMDIS;
 800039e:	4a12      	ldr	r2, [pc, #72]	; (80003e8 <DMA2_Stream_Init+0xb0>)
 80003a0:	4b11      	ldr	r3, [pc, #68]	; (80003e8 <DMA2_Stream_Init+0xb0>)
 80003a2:	695b      	ldr	r3, [r3, #20]
 80003a4:	f043 0304 	orr.w	r3, r3, #4
 80003a8:	6153      	str	r3, [r2, #20]

	///////// Step 8 : Select FIFO Threshold, 1/2 full FIFO
	DMA2_Stream0->FCR |= DMA_SxFCR_FTH_0;
 80003aa:	4a0f      	ldr	r2, [pc, #60]	; (80003e8 <DMA2_Stream_Init+0xb0>)
 80003ac:	4b0e      	ldr	r3, [pc, #56]	; (80003e8 <DMA2_Stream_Init+0xb0>)
 80003ae:	695b      	ldr	r3, [r3, #20]
 80003b0:	f043 0301 	orr.w	r3, r3, #1
 80003b4:	6153      	str	r3, [r2, #20]

	///////// Step 9 : Select Memory and Peripheral incremental mode
	DMA2_Stream0->CR |= DMA_SxCR_PINC;
 80003b6:	4a0c      	ldr	r2, [pc, #48]	; (80003e8 <DMA2_Stream_Init+0xb0>)
 80003b8:	4b0b      	ldr	r3, [pc, #44]	; (80003e8 <DMA2_Stream_Init+0xb0>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003c0:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR |= DMA_SxCR_MINC;
 80003c2:	4a09      	ldr	r2, [pc, #36]	; (80003e8 <DMA2_Stream_Init+0xb0>)
 80003c4:	4b08      	ldr	r3, [pc, #32]	; (80003e8 <DMA2_Stream_Init+0xb0>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003cc:	6013      	str	r3, [r2, #0]

	///////// Step 10 : Enable Transfer complete interrupt
	DMA2_Stream0->CR |= DMA_SxCR_TCIE;
 80003ce:	4a06      	ldr	r2, [pc, #24]	; (80003e8 <DMA2_Stream_Init+0xb0>)
 80003d0:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <DMA2_Stream_Init+0xb0>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	f043 0310 	orr.w	r3, r3, #16
 80003d8:	6013      	str	r3, [r2, #0]
}
 80003da:	bf00      	nop
 80003dc:	46bd      	mov	sp, r7
 80003de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e2:	4770      	bx	lr
 80003e4:	40023800 	.word	0x40023800
 80003e8:	40026410 	.word	0x40026410

080003ec <DMA2_Stream_SetAdresses>:



void DMA2_Stream_SetAdresses(const uint32_t * src, uint32_t * dst,uint32_t size)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b085      	sub	sp, #20
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	60f8      	str	r0, [r7, #12]
 80003f4:	60b9      	str	r1, [r7, #8]
 80003f6:	607a      	str	r2, [r7, #4]
	///////// Step 11 : Set DMA stream x peripheral address register to source address
	DMA2_Stream0->PAR = (uint32_t) src;
 80003f8:	4a07      	ldr	r2, [pc, #28]	; (8000418 <DMA2_Stream_SetAdresses+0x2c>)
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	6093      	str	r3, [r2, #8]

	///////// Step 12 : Set DMA stream x memory 0 address register (DMA_SxM0AR) to destination address
	DMA2_Stream0->M0AR = (uint32_t) dst;
 80003fe:	4a06      	ldr	r2, [pc, #24]	; (8000418 <DMA2_Stream_SetAdresses+0x2c>)
 8000400:	68bb      	ldr	r3, [r7, #8]
 8000402:	60d3      	str	r3, [r2, #12]

	///////// Step 13 : Set number of data items (number of transfers)
	// DMA stream x number of data register (DMA_SxNDTR) (x = 0..7)
	DMA2_Stream0->NDTR = size;
 8000404:	4a04      	ldr	r2, [pc, #16]	; (8000418 <DMA2_Stream_SetAdresses+0x2c>)
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	6053      	str	r3, [r2, #4]
}
 800040a:	bf00      	nop
 800040c:	3714      	adds	r7, #20
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	40026410 	.word	0x40026410

0800041c <DMA2_Stream_Enable>:




void DMA2_Stream_Enable(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
	///////// Step 14 : clear all interrupt flags
	// DMA low interrupt flag clear register (DMA_LIFCR)
	DMA2->LIFCR = (DMA_LIFCR_CTCIF0 | DMA_LIFCR_CHTIF0 | DMA_LIFCR_CTEIF0
 8000420:	4b06      	ldr	r3, [pc, #24]	; (800043c <DMA2_Stream_Enable+0x20>)
 8000422:	223d      	movs	r2, #61	; 0x3d
 8000424:	609a      	str	r2, [r3, #8]
				| DMA_LIFCR_CDMEIF0 | DMA_LIFCR_CFEIF0);

	// Enable DMA2 stream 0
	DMA2_Stream0->CR |=	DMA_SxCR_EN;
 8000426:	4a06      	ldr	r2, [pc, #24]	; (8000440 <DMA2_Stream_Enable+0x24>)
 8000428:	4b05      	ldr	r3, [pc, #20]	; (8000440 <DMA2_Stream_Enable+0x24>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	f043 0301 	orr.w	r3, r3, #1
 8000430:	6013      	str	r3, [r2, #0]
}
 8000432:	bf00      	nop
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr
 800043c:	40026400 	.word	0x40026400
 8000440:	40026410 	.word	0x40026410

08000444 <NVIC_SetPriority>:
{
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
 800044a:	4603      	mov	r3, r0
 800044c:	6039      	str	r1, [r7, #0]
 800044e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000454:	2b00      	cmp	r3, #0
 8000456:	da0b      	bge.n	8000470 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000458:	490d      	ldr	r1, [pc, #52]	; (8000490 <NVIC_SetPriority+0x4c>)
 800045a:	79fb      	ldrb	r3, [r7, #7]
 800045c:	f003 030f 	and.w	r3, r3, #15
 8000460:	3b04      	subs	r3, #4
 8000462:	683a      	ldr	r2, [r7, #0]
 8000464:	b2d2      	uxtb	r2, r2
 8000466:	0112      	lsls	r2, r2, #4
 8000468:	b2d2      	uxtb	r2, r2
 800046a:	440b      	add	r3, r1
 800046c:	761a      	strb	r2, [r3, #24]
}
 800046e:	e009      	b.n	8000484 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000470:	4908      	ldr	r1, [pc, #32]	; (8000494 <NVIC_SetPriority+0x50>)
 8000472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000476:	683a      	ldr	r2, [r7, #0]
 8000478:	b2d2      	uxtb	r2, r2
 800047a:	0112      	lsls	r2, r2, #4
 800047c:	b2d2      	uxtb	r2, r2
 800047e:	440b      	add	r3, r1
 8000480:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000484:	bf00      	nop
 8000486:	370c      	adds	r7, #12
 8000488:	46bd      	mov	sp, r7
 800048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048e:	4770      	bx	lr
 8000490:	e000ed00 	.word	0xe000ed00
 8000494:	e000e100 	.word	0xe000e100

08000498 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80004a6:	d301      	bcc.n	80004ac <SysTick_Config+0x14>
 80004a8:	2301      	movs	r3, #1
 80004aa:	e011      	b.n	80004d0 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80004ac:	4a0a      	ldr	r2, [pc, #40]	; (80004d8 <SysTick_Config+0x40>)
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80004b4:	3b01      	subs	r3, #1
 80004b6:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 80004b8:	210f      	movs	r1, #15
 80004ba:	f04f 30ff 	mov.w	r0, #4294967295
 80004be:	f7ff ffc1 	bl	8000444 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80004c2:	4b05      	ldr	r3, [pc, #20]	; (80004d8 <SysTick_Config+0x40>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004c8:	4b03      	ldr	r3, [pc, #12]	; (80004d8 <SysTick_Config+0x40>)
 80004ca:	2207      	movs	r2, #7
 80004cc:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80004ce:	2300      	movs	r3, #0
}
 80004d0:	4618      	mov	r0, r3
 80004d2:	3708      	adds	r7, #8
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	e000e010 	.word	0xe000e010

080004dc <SysTick_IncrementTicks_cb>:
* Purpose      : Increment SysTick counter callback
* Parameters   : void
* Return value : void
*****************************************************************************/
void SysTick_IncrementTicks_cb(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  ++SysTickCounter;
 80004e0:	4b04      	ldr	r3, [pc, #16]	; (80004f4 <SysTick_IncrementTicks_cb+0x18>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	3301      	adds	r3, #1
 80004e6:	4a03      	ldr	r2, [pc, #12]	; (80004f4 <SysTick_IncrementTicks_cb+0x18>)
 80004e8:	6013      	str	r3, [r2, #0]
}
 80004ea:	bf00      	nop
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr
 80004f4:	20000fd0 	.word	0x20000fd0

080004f8 <SysTick_Delay>:
* Purpose      : SysTick will be update with IRQ callback
* Parameters   : uint32_t wait_time_ms
* Return value : void
*****************************************************************************/
void SysTick_Delay(uint32_t wait_time_ms)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  /* Store start tick */
  uint32_t startTick = SysTickCounter;
 8000500:	4b08      	ldr	r3, [pc, #32]	; (8000524 <SysTick_Delay+0x2c>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	60fb      	str	r3, [r7, #12]

  /* Loop until timeout */
  while((SysTickCounter - startTick) < wait_time_ms)
 8000506:	bf00      	nop
 8000508:	4b06      	ldr	r3, [pc, #24]	; (8000524 <SysTick_Delay+0x2c>)
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	1ad2      	subs	r2, r2, r3
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	429a      	cmp	r2, r3
 8000514:	d3f8      	bcc.n	8000508 <SysTick_Delay+0x10>
  {

  }
}
 8000516:	bf00      	nop
 8000518:	3714      	adds	r7, #20
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	20000fd0 	.word	0x20000fd0

08000528 <SysTick_Init>:
* Purpose      : SysTick initial configuration
* Parameters   : void
* Return value : void
*****************************************************************************/
void SysTick_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* Update clock configuration */
  SystemCoreClockUpdate();
 800052c:	f000 faaa 	bl	8000a84 <SystemCoreClockUpdate>

  /* Configure SysTick to generate an interrupt every millisecond */
  SysTick_Config(SystemCoreClock / 1000);
 8000530:	4b05      	ldr	r3, [pc, #20]	; (8000548 <SysTick_Init+0x20>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a05      	ldr	r2, [pc, #20]	; (800054c <SysTick_Init+0x24>)
 8000536:	fba2 2303 	umull	r2, r3, r2, r3
 800053a:	099b      	lsrs	r3, r3, #6
 800053c:	4618      	mov	r0, r3
 800053e:	f7ff ffab 	bl	8000498 <SysTick_Config>
}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	20000000 	.word	0x20000000
 800054c:	10624dd3 	.word	0x10624dd3

08000550 <pin_config>:




void pin_config(GPIO_TypeDef *port,uint32_t pin, uint32_t pinMode, uint32_t pull)
{
 8000550:	b480      	push	{r7}
 8000552:	b085      	sub	sp, #20
 8000554:	af00      	add	r7, sp, #0
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	607a      	str	r2, [r7, #4]
 800055c:	603b      	str	r3, [r7, #0]
	switch(pinMode)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	2b04      	cmp	r3, #4
 8000562:	f200 80c8 	bhi.w	80006f6 <pin_config+0x1a6>
 8000566:	a201      	add	r2, pc, #4	; (adr r2, 800056c <pin_config+0x1c>)
 8000568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800056c:	08000581 	.word	0x08000581
 8000570:	08000619 	.word	0x08000619
 8000574:	0800065b 	.word	0x0800065b
 8000578:	0800069b 	.word	0x0800069b
 800057c:	080006c9 	.word	0x080006c9
	{
		case INPUT_MODE:
			CLRBIT(port->MODER,(pin*2));
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	68ba      	ldr	r2, [r7, #8]
 8000586:	0052      	lsls	r2, r2, #1
 8000588:	2101      	movs	r1, #1
 800058a:	fa01 f202 	lsl.w	r2, r1, r2
 800058e:	43d2      	mvns	r2, r2
 8000590:	401a      	ands	r2, r3
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	601a      	str	r2, [r3, #0]
			CLRBIT(port->MODER,((pin*2)+1));
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	68ba      	ldr	r2, [r7, #8]
 800059c:	0052      	lsls	r2, r2, #1
 800059e:	3201      	adds	r2, #1
 80005a0:	2101      	movs	r1, #1
 80005a2:	fa01 f202 	lsl.w	r2, r1, r2
 80005a6:	43d2      	mvns	r2, r2
 80005a8:	401a      	ands	r2, r3
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	601a      	str	r2, [r3, #0]
			if(pull == PULL_UP)
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d116      	bne.n	80005e2 <pin_config+0x92>
			{
				SETBIT(port->PUPDR,(pin*2));
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	68db      	ldr	r3, [r3, #12]
 80005b8:	68ba      	ldr	r2, [r7, #8]
 80005ba:	0052      	lsls	r2, r2, #1
 80005bc:	2101      	movs	r1, #1
 80005be:	fa01 f202 	lsl.w	r2, r1, r2
 80005c2:	431a      	orrs	r2, r3
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	60da      	str	r2, [r3, #12]
				CLRBIT(port->PUPDR,((pin*2)+1));
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	68db      	ldr	r3, [r3, #12]
 80005cc:	68ba      	ldr	r2, [r7, #8]
 80005ce:	0052      	lsls	r2, r2, #1
 80005d0:	3201      	adds	r2, #1
 80005d2:	2101      	movs	r1, #1
 80005d4:	fa01 f202 	lsl.w	r2, r1, r2
 80005d8:	43d2      	mvns	r2, r2
 80005da:	401a      	ands	r2, r3
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	60da      	str	r2, [r3, #12]
			else if(pull == PULL_DOWN)
			{
				CLRBIT(port->PUPDR,(pin*2));
				SETBIT(port->PUPDR,((pin*2)+1));
			}
			break;
 80005e0:	e088      	b.n	80006f4 <pin_config+0x1a4>
			else if(pull == PULL_DOWN)
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	2b02      	cmp	r3, #2
 80005e6:	f040 8085 	bne.w	80006f4 <pin_config+0x1a4>
				CLRBIT(port->PUPDR,(pin*2));
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	68db      	ldr	r3, [r3, #12]
 80005ee:	68ba      	ldr	r2, [r7, #8]
 80005f0:	0052      	lsls	r2, r2, #1
 80005f2:	2101      	movs	r1, #1
 80005f4:	fa01 f202 	lsl.w	r2, r1, r2
 80005f8:	43d2      	mvns	r2, r2
 80005fa:	401a      	ands	r2, r3
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	60da      	str	r2, [r3, #12]
				SETBIT(port->PUPDR,((pin*2)+1));
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	68ba      	ldr	r2, [r7, #8]
 8000606:	0052      	lsls	r2, r2, #1
 8000608:	3201      	adds	r2, #1
 800060a:	2101      	movs	r1, #1
 800060c:	fa01 f202 	lsl.w	r2, r1, r2
 8000610:	431a      	orrs	r2, r3
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	60da      	str	r2, [r3, #12]
			break;
 8000616:	e06d      	b.n	80006f4 <pin_config+0x1a4>
		case OUTPUT_PUSH_PULL:
			SETBIT(port->MODER,(pin*2));
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	68ba      	ldr	r2, [r7, #8]
 800061e:	0052      	lsls	r2, r2, #1
 8000620:	2101      	movs	r1, #1
 8000622:	fa01 f202 	lsl.w	r2, r1, r2
 8000626:	431a      	orrs	r2, r3
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	601a      	str	r2, [r3, #0]
			CLRBIT(port->MODER,((pin*2)+1));
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	68ba      	ldr	r2, [r7, #8]
 8000632:	0052      	lsls	r2, r2, #1
 8000634:	3201      	adds	r2, #1
 8000636:	2101      	movs	r1, #1
 8000638:	fa01 f202 	lsl.w	r2, r1, r2
 800063c:	43d2      	mvns	r2, r2
 800063e:	401a      	ands	r2, r3
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	601a      	str	r2, [r3, #0]
			CLRBIT(port->OTYPER,pin);
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	685b      	ldr	r3, [r3, #4]
 8000648:	2101      	movs	r1, #1
 800064a:	68ba      	ldr	r2, [r7, #8]
 800064c:	fa01 f202 	lsl.w	r2, r1, r2
 8000650:	43d2      	mvns	r2, r2
 8000652:	401a      	ands	r2, r3
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	605a      	str	r2, [r3, #4]
			break;
 8000658:	e04d      	b.n	80006f6 <pin_config+0x1a6>
		case OUTPUT_OPEN_DRAIN:
			SETBIT(port->MODER,(pin*2));
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	68ba      	ldr	r2, [r7, #8]
 8000660:	0052      	lsls	r2, r2, #1
 8000662:	2101      	movs	r1, #1
 8000664:	fa01 f202 	lsl.w	r2, r1, r2
 8000668:	431a      	orrs	r2, r3
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	601a      	str	r2, [r3, #0]
			CLRBIT(port->MODER,((pin*2)+1));
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	68ba      	ldr	r2, [r7, #8]
 8000674:	0052      	lsls	r2, r2, #1
 8000676:	3201      	adds	r2, #1
 8000678:	2101      	movs	r1, #1
 800067a:	fa01 f202 	lsl.w	r2, r1, r2
 800067e:	43d2      	mvns	r2, r2
 8000680:	401a      	ands	r2, r3
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	601a      	str	r2, [r3, #0]
			SETBIT(port->OTYPER,pin);
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	685b      	ldr	r3, [r3, #4]
 800068a:	2101      	movs	r1, #1
 800068c:	68ba      	ldr	r2, [r7, #8]
 800068e:	fa01 f202 	lsl.w	r2, r1, r2
 8000692:	431a      	orrs	r2, r3
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	605a      	str	r2, [r3, #4]
			break;
 8000698:	e02d      	b.n	80006f6 <pin_config+0x1a6>
		case ALT_FUNC_MODE:
			CLRBIT(port->MODER,(pin*2));
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	68ba      	ldr	r2, [r7, #8]
 80006a0:	0052      	lsls	r2, r2, #1
 80006a2:	2101      	movs	r1, #1
 80006a4:	fa01 f202 	lsl.w	r2, r1, r2
 80006a8:	43d2      	mvns	r2, r2
 80006aa:	401a      	ands	r2, r3
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	601a      	str	r2, [r3, #0]
			SETBIT(port->MODER,((pin*2)+1));
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	68ba      	ldr	r2, [r7, #8]
 80006b6:	0052      	lsls	r2, r2, #1
 80006b8:	3201      	adds	r2, #1
 80006ba:	2101      	movs	r1, #1
 80006bc:	fa01 f202 	lsl.w	r2, r1, r2
 80006c0:	431a      	orrs	r2, r3
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	601a      	str	r2, [r3, #0]
			break;
 80006c6:	e016      	b.n	80006f6 <pin_config+0x1a6>
		case ANALOG_MODE:
			SETBIT(port->MODER,(pin*2));
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	68ba      	ldr	r2, [r7, #8]
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	2101      	movs	r1, #1
 80006d2:	fa01 f202 	lsl.w	r2, r1, r2
 80006d6:	431a      	orrs	r2, r3
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	601a      	str	r2, [r3, #0]
			SETBIT(port->MODER,((pin*2)+1));
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	68ba      	ldr	r2, [r7, #8]
 80006e2:	0052      	lsls	r2, r2, #1
 80006e4:	3201      	adds	r2, #1
 80006e6:	2101      	movs	r1, #1
 80006e8:	fa01 f202 	lsl.w	r2, r1, r2
 80006ec:	431a      	orrs	r2, r3
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	601a      	str	r2, [r3, #0]
			break;
 80006f2:	e000      	b.n	80006f6 <pin_config+0x1a6>
			break;
 80006f4:	bf00      	nop
	}
}
 80006f6:	bf00      	nop
 80006f8:	3714      	adds	r7, #20
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop

08000704 <pin_speed_config>:




void pin_speed_config(GPIO_TypeDef *port,uint32_t pin, uint32_t speed)
{
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	60f8      	str	r0, [r7, #12]
 800070c:	60b9      	str	r1, [r7, #8]
 800070e:	607a      	str	r2, [r7, #4]
	switch(speed)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2b03      	cmp	r3, #3
 8000714:	d866      	bhi.n	80007e4 <pin_speed_config+0xe0>
 8000716:	a201      	add	r2, pc, #4	; (adr r2, 800071c <pin_speed_config+0x18>)
 8000718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800071c:	0800072d 	.word	0x0800072d
 8000720:	0800075d 	.word	0x0800075d
 8000724:	0800078b 	.word	0x0800078b
 8000728:	080007b9 	.word	0x080007b9
	{
		case LOW_SPEED:
			CLRBIT(port->OSPEEDR,(pin*2));
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	689b      	ldr	r3, [r3, #8]
 8000730:	68ba      	ldr	r2, [r7, #8]
 8000732:	0052      	lsls	r2, r2, #1
 8000734:	2101      	movs	r1, #1
 8000736:	fa01 f202 	lsl.w	r2, r1, r2
 800073a:	43d2      	mvns	r2, r2
 800073c:	401a      	ands	r2, r3
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	609a      	str	r2, [r3, #8]
			CLRBIT(port->OSPEEDR,((pin*2)+1));
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	689b      	ldr	r3, [r3, #8]
 8000746:	68ba      	ldr	r2, [r7, #8]
 8000748:	0052      	lsls	r2, r2, #1
 800074a:	3201      	adds	r2, #1
 800074c:	2101      	movs	r1, #1
 800074e:	fa01 f202 	lsl.w	r2, r1, r2
 8000752:	43d2      	mvns	r2, r2
 8000754:	401a      	ands	r2, r3
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	609a      	str	r2, [r3, #8]
			break;
 800075a:	e043      	b.n	80007e4 <pin_speed_config+0xe0>
		case MEDIUM_SPEED:
			CLRBIT(port->OSPEEDR,(pin*2));
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	689b      	ldr	r3, [r3, #8]
 8000760:	68ba      	ldr	r2, [r7, #8]
 8000762:	0052      	lsls	r2, r2, #1
 8000764:	2101      	movs	r1, #1
 8000766:	fa01 f202 	lsl.w	r2, r1, r2
 800076a:	43d2      	mvns	r2, r2
 800076c:	401a      	ands	r2, r3
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	609a      	str	r2, [r3, #8]
			SETBIT(port->OSPEEDR,((pin*2)+1));
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	689b      	ldr	r3, [r3, #8]
 8000776:	68ba      	ldr	r2, [r7, #8]
 8000778:	0052      	lsls	r2, r2, #1
 800077a:	3201      	adds	r2, #1
 800077c:	2101      	movs	r1, #1
 800077e:	fa01 f202 	lsl.w	r2, r1, r2
 8000782:	431a      	orrs	r2, r3
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	609a      	str	r2, [r3, #8]
			break;
 8000788:	e02c      	b.n	80007e4 <pin_speed_config+0xe0>
		case HIGH_SPEED:
			SETBIT(port->OSPEEDR,(pin*2));
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	689b      	ldr	r3, [r3, #8]
 800078e:	68ba      	ldr	r2, [r7, #8]
 8000790:	0052      	lsls	r2, r2, #1
 8000792:	2101      	movs	r1, #1
 8000794:	fa01 f202 	lsl.w	r2, r1, r2
 8000798:	431a      	orrs	r2, r3
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	609a      	str	r2, [r3, #8]
			CLRBIT(port->OSPEEDR,((pin*2)+1));
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	689b      	ldr	r3, [r3, #8]
 80007a2:	68ba      	ldr	r2, [r7, #8]
 80007a4:	0052      	lsls	r2, r2, #1
 80007a6:	3201      	adds	r2, #1
 80007a8:	2101      	movs	r1, #1
 80007aa:	fa01 f202 	lsl.w	r2, r1, r2
 80007ae:	43d2      	mvns	r2, r2
 80007b0:	401a      	ands	r2, r3
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	609a      	str	r2, [r3, #8]
			break;
 80007b6:	e015      	b.n	80007e4 <pin_speed_config+0xe0>
		case VERY_HIGH_SPEED:
			SETBIT(port->OSPEEDR,(pin*2));
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	689b      	ldr	r3, [r3, #8]
 80007bc:	68ba      	ldr	r2, [r7, #8]
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	2101      	movs	r1, #1
 80007c2:	fa01 f202 	lsl.w	r2, r1, r2
 80007c6:	431a      	orrs	r2, r3
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	609a      	str	r2, [r3, #8]
			SETBIT(port->OSPEEDR,((pin*2)+1));
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	689b      	ldr	r3, [r3, #8]
 80007d0:	68ba      	ldr	r2, [r7, #8]
 80007d2:	0052      	lsls	r2, r2, #1
 80007d4:	3201      	adds	r2, #1
 80007d6:	2101      	movs	r1, #1
 80007d8:	fa01 f202 	lsl.w	r2, r1, r2
 80007dc:	431a      	orrs	r2, r3
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	609a      	str	r2, [r3, #8]
			break;
 80007e2:	bf00      	nop
	}
}
 80007e4:	bf00      	nop
 80007e6:	3714      	adds	r7, #20
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <gpio_write>:



void gpio_write(GPIO_TypeDef *port, uint32_t pin, uint8_t state)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	60b9      	str	r1, [r7, #8]
 80007fa:	4613      	mov	r3, r2
 80007fc:	71fb      	strb	r3, [r7, #7]
	if(state == 1)
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	2b01      	cmp	r3, #1
 8000802:	d10e      	bne.n	8000822 <gpio_write+0x32>
	{
		SETBIT(port->BSRRL,pin);
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	8b1b      	ldrh	r3, [r3, #24]
 8000808:	b29b      	uxth	r3, r3
 800080a:	b21a      	sxth	r2, r3
 800080c:	2101      	movs	r1, #1
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	fa01 f303 	lsl.w	r3, r1, r3
 8000814:	b21b      	sxth	r3, r3
 8000816:	4313      	orrs	r3, r2
 8000818:	b21b      	sxth	r3, r3
 800081a:	b29a      	uxth	r2, r3
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	831a      	strh	r2, [r3, #24]
	else if(state == 0)
	{
		CLRBIT(port->BSRRL,pin);
		SETBIT(port->BSRRH,pin);
	}
}
 8000820:	e020      	b.n	8000864 <gpio_write+0x74>
	else if(state == 0)
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d11d      	bne.n	8000864 <gpio_write+0x74>
		CLRBIT(port->BSRRL,pin);
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	8b1b      	ldrh	r3, [r3, #24]
 800082c:	b29b      	uxth	r3, r3
 800082e:	b21a      	sxth	r2, r3
 8000830:	2101      	movs	r1, #1
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	fa01 f303 	lsl.w	r3, r1, r3
 8000838:	b21b      	sxth	r3, r3
 800083a:	43db      	mvns	r3, r3
 800083c:	b21b      	sxth	r3, r3
 800083e:	4013      	ands	r3, r2
 8000840:	b21b      	sxth	r3, r3
 8000842:	b29a      	uxth	r2, r3
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	831a      	strh	r2, [r3, #24]
		SETBIT(port->BSRRH,pin);
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	8b5b      	ldrh	r3, [r3, #26]
 800084c:	b29b      	uxth	r3, r3
 800084e:	b21a      	sxth	r2, r3
 8000850:	2101      	movs	r1, #1
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	fa01 f303 	lsl.w	r3, r1, r3
 8000858:	b21b      	sxth	r3, r3
 800085a:	4313      	orrs	r3, r2
 800085c:	b21b      	sxth	r3, r3
 800085e:	b29a      	uxth	r2, r3
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	835a      	strh	r2, [r3, #26]
}
 8000864:	bf00      	nop
 8000866:	3714      	adds	r7, #20
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <gpio_init>:
	SysTick_Delay(100);
}


void gpio_init(GPIO_TYPE gpio)
{
 8000870:	b084      	sub	sp, #16
 8000872:	b580      	push	{r7, lr}
 8000874:	af00      	add	r7, sp, #0
 8000876:	f107 0e08 	add.w	lr, r7, #8
 800087a:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
	if(gpio.port == PORTA)
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	4a21      	ldr	r2, [pc, #132]	; (8000908 <gpio_init+0x98>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d105      	bne.n	8000892 <gpio_init+0x22>
	{
		PORTA_CLOCK_EN;
 8000886:	4a21      	ldr	r2, [pc, #132]	; (800090c <gpio_init+0x9c>)
 8000888:	4b20      	ldr	r3, [pc, #128]	; (800090c <gpio_init+0x9c>)
 800088a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
	}
	if(gpio.port == PORTB)
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	4a1e      	ldr	r2, [pc, #120]	; (8000910 <gpio_init+0xa0>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d105      	bne.n	80008a6 <gpio_init+0x36>
	{
		PORTB_CLOCK_EN;
 800089a:	4a1c      	ldr	r2, [pc, #112]	; (800090c <gpio_init+0x9c>)
 800089c:	4b1b      	ldr	r3, [pc, #108]	; (800090c <gpio_init+0x9c>)
 800089e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a0:	f043 0302 	orr.w	r3, r3, #2
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
	}
	if(gpio.port == PORTC)
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	4a1a      	ldr	r2, [pc, #104]	; (8000914 <gpio_init+0xa4>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d105      	bne.n	80008ba <gpio_init+0x4a>
	{
		PORTC_CLOCK_EN;
 80008ae:	4a17      	ldr	r2, [pc, #92]	; (800090c <gpio_init+0x9c>)
 80008b0:	4b16      	ldr	r3, [pc, #88]	; (800090c <gpio_init+0x9c>)
 80008b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b4:	f043 0304 	orr.w	r3, r3, #4
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
	}
	if(gpio.port == PORTD)
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	4a16      	ldr	r2, [pc, #88]	; (8000918 <gpio_init+0xa8>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d105      	bne.n	80008ce <gpio_init+0x5e>
	{
		PORTD_CLOCK_EN;
 80008c2:	4a12      	ldr	r2, [pc, #72]	; (800090c <gpio_init+0x9c>)
 80008c4:	4b11      	ldr	r3, [pc, #68]	; (800090c <gpio_init+0x9c>)
 80008c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c8:	f043 0308 	orr.w	r3, r3, #8
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
	}
	if(gpio.port == PORTE)
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	4a12      	ldr	r2, [pc, #72]	; (800091c <gpio_init+0xac>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d105      	bne.n	80008e2 <gpio_init+0x72>
	{
		PORTE_CLOCK_EN;
 80008d6:	4a0d      	ldr	r2, [pc, #52]	; (800090c <gpio_init+0x9c>)
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <gpio_init+0x9c>)
 80008da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008dc:	f043 0310 	orr.w	r3, r3, #16
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
	}

	pin_config(gpio.port,gpio.pin,gpio.mode,gpio.pull);
 80008e2:	68b8      	ldr	r0, [r7, #8]
 80008e4:	68f9      	ldr	r1, [r7, #12]
 80008e6:	693a      	ldr	r2, [r7, #16]
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	f7ff fe31 	bl	8000550 <pin_config>
	pin_speed_config(gpio.port,gpio.pin,gpio.speed);
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	68f9      	ldr	r1, [r7, #12]
 80008f2:	69ba      	ldr	r2, [r7, #24]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff ff05 	bl	8000704 <pin_speed_config>
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000902:	b004      	add	sp, #16
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	40020000 	.word	0x40020000
 800090c:	40023800 	.word	0x40023800
 8000910:	40020400 	.word	0x40020400
 8000914:	40020800 	.word	0x40020800
 8000918:	40020c00 	.word	0x40020c00
 800091c:	40021000 	.word	0x40021000

08000920 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000920:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000958 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000924:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000926:	e003      	b.n	8000930 <LoopCopyDataInit>

08000928 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800092a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800092c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800092e:	3104      	adds	r1, #4

08000930 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000930:	480b      	ldr	r0, [pc, #44]	; (8000960 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000934:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000936:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000938:	d3f6      	bcc.n	8000928 <CopyDataInit>
  ldr  r2, =_sbss
 800093a:	4a0b      	ldr	r2, [pc, #44]	; (8000968 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800093c:	e002      	b.n	8000944 <LoopFillZerobss>

0800093e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800093e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000940:	f842 3b04 	str.w	r3, [r2], #4

08000944 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000944:	4b09      	ldr	r3, [pc, #36]	; (800096c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000946:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000948:	d3f9      	bcc.n	800093e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800094a:	f000 f865 	bl	8000a18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800094e:	f000 f991 	bl	8000c74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000952:	f7ff fc7d 	bl	8000250 <main>
  bx  lr    
 8000956:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000958:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 800095c:	08000cdc 	.word	0x08000cdc
  ldr  r0, =_sdata
 8000960:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000964:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8000968:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 800096c:	20000fd4 	.word	0x20000fd4

08000970 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000970:	e7fe      	b.n	8000970 <ADC_IRQHandler>

08000972 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000984:	e7fe      	b.n	8000984 <HardFault_Handler+0x4>

08000986 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800098a:	e7fe      	b.n	800098a <MemManage_Handler+0x4>

0800098c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000990:	e7fe      	b.n	8000990 <BusFault_Handler+0x4>

08000992 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000996:	e7fe      	b.n	8000996 <UsageFault_Handler+0x4>

08000998 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0
}
 80009aa:	bf00      	nop
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr

080009c2 <SysTick_Handler>:
  * @param  None
  * @retval None
  */

void SysTick_Handler(void)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	af00      	add	r7, sp, #0
	SysTick_IncrementTicks_cb();
 80009c6:	f7ff fd89 	bl	80004dc <SysTick_IncrementTicks_cb>
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
	...

080009d0 <EXTI2_IRQHandler>:
  * @brief  This function handles EXTI2 Handler.
  * @param  None
  * @retval None
  */
void EXTI2_IRQHandler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0

	gpio_write(PORTA,6,1);
 80009d4:	2201      	movs	r2, #1
 80009d6:	2106      	movs	r1, #6
 80009d8:	4802      	ldr	r0, [pc, #8]	; (80009e4 <EXTI2_IRQHandler+0x14>)
 80009da:	f7ff ff09 	bl	80007f0 <gpio_write>
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40020000 	.word	0x40020000

080009e8 <EXTI3_IRQHandler>:
  * @brief  This function handles EXTI3 Handler.
  * @param  None
  * @retval None
  */
void EXTI3_IRQHandler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
	gpio_write(PORTA,6,0);
 80009ec:	2200      	movs	r2, #0
 80009ee:	2106      	movs	r1, #6
 80009f0:	4802      	ldr	r0, [pc, #8]	; (80009fc <EXTI3_IRQHandler+0x14>)
 80009f2:	f7ff fefd 	bl	80007f0 <gpio_write>
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40020000 	.word	0x40020000

08000a00 <DMA2_Stream0_IRQHandler>:
  * @brief  This function handles DMA2 Handler.
  * @param  None
  * @retval None
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
	gpio_write(PORTA,6,1);
 8000a04:	2201      	movs	r2, #1
 8000a06:	2106      	movs	r1, #6
 8000a08:	4802      	ldr	r0, [pc, #8]	; (8000a14 <DMA2_Stream0_IRQHandler+0x14>)
 8000a0a:	f7ff fef1 	bl	80007f0 <gpio_write>
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40020000 	.word	0x40020000

08000a18 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a1c:	4a16      	ldr	r2, [pc, #88]	; (8000a78 <SystemInit+0x60>)
 8000a1e:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <SystemInit+0x60>)
 8000a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000a2c:	4a13      	ldr	r2, [pc, #76]	; (8000a7c <SystemInit+0x64>)
 8000a2e:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <SystemInit+0x64>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f043 0301 	orr.w	r3, r3, #1
 8000a36:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a38:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <SystemInit+0x64>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000a3e:	4a0f      	ldr	r2, [pc, #60]	; (8000a7c <SystemInit+0x64>)
 8000a40:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <SystemInit+0x64>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000a48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a4c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000a4e:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <SystemInit+0x64>)
 8000a50:	4a0b      	ldr	r2, [pc, #44]	; (8000a80 <SystemInit+0x68>)
 8000a52:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000a54:	4a09      	ldr	r2, [pc, #36]	; (8000a7c <SystemInit+0x64>)
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <SystemInit+0x64>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a5e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <SystemInit+0x64>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000a66:	f000 f889 	bl	8000b7c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a6a:	4b03      	ldr	r3, [pc, #12]	; (8000a78 <SystemInit+0x60>)
 8000a6c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a70:	609a      	str	r2, [r3, #8]
#endif
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	e000ed00 	.word	0xe000ed00
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	24003010 	.word	0x24003010

08000a84 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b087      	sub	sp, #28
 8000a88:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	2300      	movs	r3, #0
 8000a90:	617b      	str	r3, [r7, #20]
 8000a92:	2302      	movs	r3, #2
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	2300      	movs	r3, #0
 8000a98:	60bb      	str	r3, [r7, #8]
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000a9e:	4b32      	ldr	r3, [pc, #200]	; (8000b68 <SystemCoreClockUpdate+0xe4>)
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	f003 030c 	and.w	r3, r3, #12
 8000aa6:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	2b04      	cmp	r3, #4
 8000aac:	d007      	beq.n	8000abe <SystemCoreClockUpdate+0x3a>
 8000aae:	2b08      	cmp	r3, #8
 8000ab0:	d009      	beq.n	8000ac6 <SystemCoreClockUpdate+0x42>
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d13d      	bne.n	8000b32 <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000ab6:	4b2d      	ldr	r3, [pc, #180]	; (8000b6c <SystemCoreClockUpdate+0xe8>)
 8000ab8:	4a2d      	ldr	r2, [pc, #180]	; (8000b70 <SystemCoreClockUpdate+0xec>)
 8000aba:	601a      	str	r2, [r3, #0]
      break;
 8000abc:	e03d      	b.n	8000b3a <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000abe:	4b2b      	ldr	r3, [pc, #172]	; (8000b6c <SystemCoreClockUpdate+0xe8>)
 8000ac0:	4a2c      	ldr	r2, [pc, #176]	; (8000b74 <SystemCoreClockUpdate+0xf0>)
 8000ac2:	601a      	str	r2, [r3, #0]
      break;
 8000ac4:	e039      	b.n	8000b3a <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000ac6:	4b28      	ldr	r3, [pc, #160]	; (8000b68 <SystemCoreClockUpdate+0xe4>)
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	0d9b      	lsrs	r3, r3, #22
 8000acc:	f003 0301 	and.w	r3, r3, #1
 8000ad0:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000ad2:	4b25      	ldr	r3, [pc, #148]	; (8000b68 <SystemCoreClockUpdate+0xe4>)
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000ada:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d00c      	beq.n	8000afc <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000ae2:	4a24      	ldr	r2, [pc, #144]	; (8000b74 <SystemCoreClockUpdate+0xf0>)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aea:	4a1f      	ldr	r2, [pc, #124]	; (8000b68 <SystemCoreClockUpdate+0xe4>)
 8000aec:	6852      	ldr	r2, [r2, #4]
 8000aee:	0992      	lsrs	r2, r2, #6
 8000af0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000af4:	fb02 f303 	mul.w	r3, r2, r3
 8000af8:	617b      	str	r3, [r7, #20]
 8000afa:	e00b      	b.n	8000b14 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000afc:	4a1c      	ldr	r2, [pc, #112]	; (8000b70 <SystemCoreClockUpdate+0xec>)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b04:	4a18      	ldr	r2, [pc, #96]	; (8000b68 <SystemCoreClockUpdate+0xe4>)
 8000b06:	6852      	ldr	r2, [r2, #4]
 8000b08:	0992      	lsrs	r2, r2, #6
 8000b0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000b0e:	fb02 f303 	mul.w	r3, r2, r3
 8000b12:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000b14:	4b14      	ldr	r3, [pc, #80]	; (8000b68 <SystemCoreClockUpdate+0xe4>)
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	0c1b      	lsrs	r3, r3, #16
 8000b1a:	f003 0303 	and.w	r3, r3, #3
 8000b1e:	3301      	adds	r3, #1
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000b24:	697a      	ldr	r2, [r7, #20]
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b2c:	4a0f      	ldr	r2, [pc, #60]	; (8000b6c <SystemCoreClockUpdate+0xe8>)
 8000b2e:	6013      	str	r3, [r2, #0]
      break;
 8000b30:	e003      	b.n	8000b3a <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 8000b32:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <SystemCoreClockUpdate+0xe8>)
 8000b34:	4a0e      	ldr	r2, [pc, #56]	; (8000b70 <SystemCoreClockUpdate+0xec>)
 8000b36:	601a      	str	r2, [r3, #0]
      break;
 8000b38:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <SystemCoreClockUpdate+0xe4>)
 8000b3c:	689b      	ldr	r3, [r3, #8]
 8000b3e:	091b      	lsrs	r3, r3, #4
 8000b40:	f003 030f 	and.w	r3, r3, #15
 8000b44:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <SystemCoreClockUpdate+0xf4>)
 8000b46:	5cd3      	ldrb	r3, [r2, r3]
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000b4c:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <SystemCoreClockUpdate+0xe8>)
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	fa22 f303 	lsr.w	r3, r2, r3
 8000b56:	4a05      	ldr	r2, [pc, #20]	; (8000b6c <SystemCoreClockUpdate+0xe8>)
 8000b58:	6013      	str	r3, [r2, #0]
}
 8000b5a:	bf00      	nop
 8000b5c:	371c      	adds	r7, #28
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	20000000 	.word	0x20000000
 8000b70:	00f42400 	.word	0x00f42400
 8000b74:	017d7840 	.word	0x017d7840
 8000b78:	20000004 	.word	0x20000004

08000b7c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	607b      	str	r3, [r7, #4]
 8000b86:	2300      	movs	r3, #0
 8000b88:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000b8a:	4a36      	ldr	r2, [pc, #216]	; (8000c64 <SetSysClock+0xe8>)
 8000b8c:	4b35      	ldr	r3, [pc, #212]	; (8000c64 <SetSysClock+0xe8>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b94:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000b96:	4b33      	ldr	r3, [pc, #204]	; (8000c64 <SetSysClock+0xe8>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b9e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d103      	bne.n	8000bb4 <SetSysClock+0x38>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000bb2:	d1f0      	bne.n	8000b96 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000bb4:	4b2b      	ldr	r3, [pc, #172]	; (8000c64 <SetSysClock+0xe8>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d002      	beq.n	8000bc6 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	e001      	b.n	8000bca <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d142      	bne.n	8000c56 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000bd0:	4a24      	ldr	r2, [pc, #144]	; (8000c64 <SetSysClock+0xe8>)
 8000bd2:	4b24      	ldr	r3, [pc, #144]	; (8000c64 <SetSysClock+0xe8>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bda:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000bdc:	4a22      	ldr	r2, [pc, #136]	; (8000c68 <SetSysClock+0xec>)
 8000bde:	4b22      	ldr	r3, [pc, #136]	; (8000c68 <SetSysClock+0xec>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000be6:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000be8:	4a1e      	ldr	r2, [pc, #120]	; (8000c64 <SetSysClock+0xe8>)
 8000bea:	4b1e      	ldr	r3, [pc, #120]	; (8000c64 <SetSysClock+0xe8>)
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000bf0:	4a1c      	ldr	r2, [pc, #112]	; (8000c64 <SetSysClock+0xe8>)
 8000bf2:	4b1c      	ldr	r3, [pc, #112]	; (8000c64 <SetSysClock+0xe8>)
 8000bf4:	689b      	ldr	r3, [r3, #8]
 8000bf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bfa:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000bfc:	4a19      	ldr	r2, [pc, #100]	; (8000c64 <SetSysClock+0xe8>)
 8000bfe:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <SetSysClock+0xe8>)
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000c06:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000c08:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <SetSysClock+0xe8>)
 8000c0a:	4a18      	ldr	r2, [pc, #96]	; (8000c6c <SetSysClock+0xf0>)
 8000c0c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000c0e:	4a15      	ldr	r2, [pc, #84]	; (8000c64 <SetSysClock+0xe8>)
 8000c10:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <SetSysClock+0xe8>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c18:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000c1a:	bf00      	nop
 8000c1c:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <SetSysClock+0xe8>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d0f9      	beq.n	8000c1c <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000c28:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <SetSysClock+0xf4>)
 8000c2a:	f240 7205 	movw	r2, #1797	; 0x705
 8000c2e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000c30:	4a0c      	ldr	r2, [pc, #48]	; (8000c64 <SetSysClock+0xe8>)
 8000c32:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <SetSysClock+0xe8>)
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	f023 0303 	bic.w	r3, r3, #3
 8000c3a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000c3c:	4a09      	ldr	r2, [pc, #36]	; (8000c64 <SetSysClock+0xe8>)
 8000c3e:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <SetSysClock+0xe8>)
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	f043 0302 	orr.w	r3, r3, #2
 8000c46:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000c48:	bf00      	nop
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <SetSysClock+0xe8>)
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	f003 030c 	and.w	r3, r3, #12
 8000c52:	2b08      	cmp	r3, #8
 8000c54:	d1f9      	bne.n	8000c4a <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40007000 	.word	0x40007000
 8000c6c:	07405419 	.word	0x07405419
 8000c70:	40023c00 	.word	0x40023c00

08000c74 <__libc_init_array>:
 8000c74:	b570      	push	{r4, r5, r6, lr}
 8000c76:	4e0d      	ldr	r6, [pc, #52]	; (8000cac <__libc_init_array+0x38>)
 8000c78:	4c0d      	ldr	r4, [pc, #52]	; (8000cb0 <__libc_init_array+0x3c>)
 8000c7a:	1ba4      	subs	r4, r4, r6
 8000c7c:	10a4      	asrs	r4, r4, #2
 8000c7e:	2500      	movs	r5, #0
 8000c80:	42a5      	cmp	r5, r4
 8000c82:	d109      	bne.n	8000c98 <__libc_init_array+0x24>
 8000c84:	4e0b      	ldr	r6, [pc, #44]	; (8000cb4 <__libc_init_array+0x40>)
 8000c86:	4c0c      	ldr	r4, [pc, #48]	; (8000cb8 <__libc_init_array+0x44>)
 8000c88:	f000 f818 	bl	8000cbc <_init>
 8000c8c:	1ba4      	subs	r4, r4, r6
 8000c8e:	10a4      	asrs	r4, r4, #2
 8000c90:	2500      	movs	r5, #0
 8000c92:	42a5      	cmp	r5, r4
 8000c94:	d105      	bne.n	8000ca2 <__libc_init_array+0x2e>
 8000c96:	bd70      	pop	{r4, r5, r6, pc}
 8000c98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c9c:	4798      	blx	r3
 8000c9e:	3501      	adds	r5, #1
 8000ca0:	e7ee      	b.n	8000c80 <__libc_init_array+0xc>
 8000ca2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ca6:	4798      	blx	r3
 8000ca8:	3501      	adds	r5, #1
 8000caa:	e7f2      	b.n	8000c92 <__libc_init_array+0x1e>
 8000cac:	08000cd4 	.word	0x08000cd4
 8000cb0:	08000cd4 	.word	0x08000cd4
 8000cb4:	08000cd4 	.word	0x08000cd4
 8000cb8:	08000cd8 	.word	0x08000cd8

08000cbc <_init>:
 8000cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cbe:	bf00      	nop
 8000cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cc2:	bc08      	pop	{r3}
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	4770      	bx	lr

08000cc8 <_fini>:
 8000cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cca:	bf00      	nop
 8000ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cce:	bc08      	pop	{r3}
 8000cd0:	469e      	mov	lr, r3
 8000cd2:	4770      	bx	lr
