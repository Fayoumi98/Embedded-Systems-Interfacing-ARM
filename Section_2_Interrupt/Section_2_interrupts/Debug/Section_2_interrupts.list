
Section_2_interrupts.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f24  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080010ac  080010ac  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080010ac  080010ac  000110ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080010b0  080010b0  000110b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  080010b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
  7 .bss          00000020  20000014  20000014  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000034  20000034  00020014  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   00001da5  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000748  00000000  00000000  00021de9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000190  00000000  00000000  00022538  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000138  00000000  00000000  000226c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00000c10  00000000  00000000  00022800  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00000c29  00000000  00000000  00023410  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00024039  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000047c  00000000  00000000  000240b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00024534  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001094 	.word	0x08001094

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08001094 	.word	0x08001094

080001c8 <main>:
#include "include/gpio.h"



int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b094      	sub	sp, #80	; 0x50
 80001cc:	af02      	add	r7, sp, #8
	SysTick_Init();
 80001ce:	f000 f8db 	bl	8000388 <SysTick_Init>


	GPIO_TYPE tp;
	tp.port = PORTA;
 80001d2:	4b26      	ldr	r3, [pc, #152]	; (800026c <main+0xa4>)
 80001d4:	633b      	str	r3, [r7, #48]	; 0x30
	tp.pin = 6;
 80001d6:	2306      	movs	r3, #6
 80001d8:	637b      	str	r3, [r7, #52]	; 0x34
	tp.mode = OUTPUT_PUSH_PULL;
 80001da:	2301      	movs	r3, #1
 80001dc:	63bb      	str	r3, [r7, #56]	; 0x38
	tp.speed = VERY_HIGH_SPEED;
 80001de:	2303      	movs	r3, #3
 80001e0:	643b      	str	r3, [r7, #64]	; 0x40
	gpio_init(tp);
 80001e2:	466a      	mov	r2, sp
 80001e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80001e8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80001ec:	e882 0003 	stmia.w	r2, {r0, r1}
 80001f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80001f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80001f6:	f000 fa71 	bl	80006dc <gpio_init>

	GPIO_TYPE on;
	on.port = PORTC;
 80001fa:	4b1d      	ldr	r3, [pc, #116]	; (8000270 <main+0xa8>)
 80001fc:	61bb      	str	r3, [r7, #24]
	on.pin = 1;
 80001fe:	2301      	movs	r3, #1
 8000200:	61fb      	str	r3, [r7, #28]
	on.mode = INPUT_MODE;
 8000202:	2300      	movs	r3, #0
 8000204:	623b      	str	r3, [r7, #32]
	on.pull = PULL_UP;
 8000206:	2301      	movs	r3, #1
 8000208:	627b      	str	r3, [r7, #36]	; 0x24
	gpio_init(on);
 800020a:	466a      	mov	r2, sp
 800020c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000210:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000214:	e882 0003 	stmia.w	r2, {r0, r1}
 8000218:	f107 0318 	add.w	r3, r7, #24
 800021c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800021e:	f000 fa5d 	bl	80006dc <gpio_init>


	GPIO_TYPE op;
	op.port = PORTA;
 8000222:	4b12      	ldr	r3, [pc, #72]	; (800026c <main+0xa4>)
 8000224:	603b      	str	r3, [r7, #0]
	op.pin = 5;
 8000226:	2305      	movs	r3, #5
 8000228:	607b      	str	r3, [r7, #4]
	op.mode = OUTPUT_PUSH_PULL;
 800022a:	2301      	movs	r3, #1
 800022c:	60bb      	str	r3, [r7, #8]
	op.speed = VERY_HIGH_SPEED;
 800022e:	2303      	movs	r3, #3
 8000230:	613b      	str	r3, [r7, #16]
	gpio_init(op);
 8000232:	466a      	mov	r2, sp
 8000234:	f107 0310 	add.w	r3, r7, #16
 8000238:	e893 0003 	ldmia.w	r3, {r0, r1}
 800023c:	e882 0003 	stmia.w	r2, {r0, r1}
 8000240:	463b      	mov	r3, r7
 8000242:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000244:	f000 fa4a 	bl	80006dc <gpio_init>

	config_gpio_interrupt(on.port,on.pin,RISING_EDGE);
 8000248:	69bb      	ldr	r3, [r7, #24]
 800024a:	69f9      	ldr	r1, [r7, #28]
 800024c:	2200      	movs	r2, #0
 800024e:	4618      	mov	r0, r3
 8000250:	f000 fa9c 	bl	800078c <config_gpio_interrupt>
	enable_gpio_interrupt(on.pin,EXTI1_IRQn);
 8000254:	69fb      	ldr	r3, [r7, #28]
 8000256:	2107      	movs	r1, #7
 8000258:	4618      	mov	r0, r3
 800025a:	f000 fd41 	bl	8000ce0 <enable_gpio_interrupt>

	while (1)
	{
		gpio_toggle(tp.port,tp.pin);
 800025e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000260:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000262:	4611      	mov	r1, r2
 8000264:	4618      	mov	r0, r3
 8000266:	f000 fa0d 	bl	8000684 <gpio_toggle>
 800026a:	e7f8      	b.n	800025e <main+0x96>
 800026c:	40020000 	.word	0x40020000
 8000270:	40020800 	.word	0x40020800

08000274 <EXTI1_IRQHandler>:
	}
}


void EXTI1_IRQHandler(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR1)
 8000278:	4b08      	ldr	r3, [pc, #32]	; (800029c <EXTI1_IRQHandler+0x28>)
 800027a:	695b      	ldr	r3, [r3, #20]
 800027c:	f003 0302 	and.w	r3, r3, #2
 8000280:	2b00      	cmp	r3, #0
 8000282:	d008      	beq.n	8000296 <EXTI1_IRQHandler+0x22>
	{
        PORTA->ODR ^= (1 << 5);
 8000284:	4a06      	ldr	r2, [pc, #24]	; (80002a0 <EXTI1_IRQHandler+0x2c>)
 8000286:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <EXTI1_IRQHandler+0x2c>)
 8000288:	695b      	ldr	r3, [r3, #20]
 800028a:	f083 0320 	eor.w	r3, r3, #32
 800028e:	6153      	str	r3, [r2, #20]
		clear_interrupt(1);
 8000290:	2001      	movs	r0, #1
 8000292:	f000 fd3f 	bl	8000d14 <clear_interrupt>
	}
}
 8000296:	bf00      	nop
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	40013c00 	.word	0x40013c00
 80002a0:	40020000 	.word	0x40020000

080002a4 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	6039      	str	r1, [r7, #0]
 80002ae:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80002b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da0b      	bge.n	80002d0 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80002b8:	490d      	ldr	r1, [pc, #52]	; (80002f0 <NVIC_SetPriority+0x4c>)
 80002ba:	79fb      	ldrb	r3, [r7, #7]
 80002bc:	f003 030f 	and.w	r3, r3, #15
 80002c0:	3b04      	subs	r3, #4
 80002c2:	683a      	ldr	r2, [r7, #0]
 80002c4:	b2d2      	uxtb	r2, r2
 80002c6:	0112      	lsls	r2, r2, #4
 80002c8:	b2d2      	uxtb	r2, r2
 80002ca:	440b      	add	r3, r1
 80002cc:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 80002ce:	e009      	b.n	80002e4 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80002d0:	4908      	ldr	r1, [pc, #32]	; (80002f4 <NVIC_SetPriority+0x50>)
 80002d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d6:	683a      	ldr	r2, [r7, #0]
 80002d8:	b2d2      	uxtb	r2, r2
 80002da:	0112      	lsls	r2, r2, #4
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	440b      	add	r3, r1
 80002e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80002e4:	bf00      	nop
 80002e6:	370c      	adds	r7, #12
 80002e8:	46bd      	mov	sp, r7
 80002ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ee:	4770      	bx	lr
 80002f0:	e000ed00 	.word	0xe000ed00
 80002f4:	e000e100 	.word	0xe000e100

080002f8 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000306:	d301      	bcc.n	800030c <SysTick_Config+0x14>
 8000308:	2301      	movs	r3, #1
 800030a:	e011      	b.n	8000330 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 800030c:	4a0a      	ldr	r2, [pc, #40]	; (8000338 <SysTick_Config+0x40>)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000314:	3b01      	subs	r3, #1
 8000316:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8000318:	210f      	movs	r1, #15
 800031a:	f04f 30ff 	mov.w	r0, #4294967295
 800031e:	f7ff ffc1 	bl	80002a4 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000322:	4b05      	ldr	r3, [pc, #20]	; (8000338 <SysTick_Config+0x40>)
 8000324:	2200      	movs	r2, #0
 8000326:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000328:	4b03      	ldr	r3, [pc, #12]	; (8000338 <SysTick_Config+0x40>)
 800032a:	2207      	movs	r2, #7
 800032c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 800032e:	2300      	movs	r3, #0
}
 8000330:	4618      	mov	r0, r3
 8000332:	3708      	adds	r7, #8
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	e000e010 	.word	0xe000e010

0800033c <SysTick_IncrementTicks_cb>:
* Purpose      : Increment SysTick counter callback
* Parameters   : void
* Return value : void
*****************************************************************************/
void SysTick_IncrementTicks_cb(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  ++SysTickCounter;
 8000340:	4b04      	ldr	r3, [pc, #16]	; (8000354 <SysTick_IncrementTicks_cb+0x18>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	3301      	adds	r3, #1
 8000346:	4a03      	ldr	r2, [pc, #12]	; (8000354 <SysTick_IncrementTicks_cb+0x18>)
 8000348:	6013      	str	r3, [r2, #0]
}
 800034a:	bf00      	nop
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr
 8000354:	20000030 	.word	0x20000030

08000358 <SysTick_Delay>:
* Purpose      : SysTick will be update with IRQ callback
* Parameters   : uint32_t wait_time_ms
* Return value : void
*****************************************************************************/
void SysTick_Delay(uint32_t wait_time_ms)
{
 8000358:	b480      	push	{r7}
 800035a:	b085      	sub	sp, #20
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
  /* Store start tick */
  uint32_t startTick = SysTickCounter;
 8000360:	4b08      	ldr	r3, [pc, #32]	; (8000384 <SysTick_Delay+0x2c>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	60fb      	str	r3, [r7, #12]

  /* Loop until timeout */
  while((SysTickCounter - startTick) < wait_time_ms)
 8000366:	bf00      	nop
 8000368:	4b06      	ldr	r3, [pc, #24]	; (8000384 <SysTick_Delay+0x2c>)
 800036a:	681a      	ldr	r2, [r3, #0]
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	1ad2      	subs	r2, r2, r3
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	429a      	cmp	r2, r3
 8000374:	d3f8      	bcc.n	8000368 <SysTick_Delay+0x10>
  {

  }
}
 8000376:	bf00      	nop
 8000378:	3714      	adds	r7, #20
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	20000030 	.word	0x20000030

08000388 <SysTick_Init>:
* Purpose      : SysTick initial configuration
* Parameters   : void
* Return value : void
*****************************************************************************/
void SysTick_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
  /* Update clock configuration */
  SystemCoreClockUpdate();
 800038c:	f000 fd66 	bl	8000e5c <SystemCoreClockUpdate>

  /* Configure SysTick to generate an interrupt every millisecond */
  SysTick_Config(SystemCoreClock / 1000);
 8000390:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <SysTick_Init+0x20>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a05      	ldr	r2, [pc, #20]	; (80003ac <SysTick_Init+0x24>)
 8000396:	fba2 2303 	umull	r2, r3, r2, r3
 800039a:	099b      	lsrs	r3, r3, #6
 800039c:	4618      	mov	r0, r3
 800039e:	f7ff ffab 	bl	80002f8 <SysTick_Config>
}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	20000000 	.word	0x20000000
 80003ac:	10624dd3 	.word	0x10624dd3

080003b0 <NVIC_EnableIRQ>:
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80003ba:	4909      	ldr	r1, [pc, #36]	; (80003e0 <NVIC_EnableIRQ+0x30>)
 80003bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003c0:	095b      	lsrs	r3, r3, #5
 80003c2:	79fa      	ldrb	r2, [r7, #7]
 80003c4:	f002 021f 	and.w	r2, r2, #31
 80003c8:	2001      	movs	r0, #1
 80003ca:	fa00 f202 	lsl.w	r2, r0, r2
 80003ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80003d2:	bf00      	nop
 80003d4:	370c      	adds	r7, #12
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	e000e100 	.word	0xe000e100

080003e4 <pin_config>:




static void pin_config(GPIO_TypeDef *port,uint32_t pin, uint32_t pinMode, uint32_t pull)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b085      	sub	sp, #20
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	60f8      	str	r0, [r7, #12]
 80003ec:	60b9      	str	r1, [r7, #8]
 80003ee:	607a      	str	r2, [r7, #4]
 80003f0:	603b      	str	r3, [r7, #0]
	switch(pinMode)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	2b04      	cmp	r3, #4
 80003f6:	f200 80c8 	bhi.w	800058a <pin_config+0x1a6>
 80003fa:	a201      	add	r2, pc, #4	; (adr r2, 8000400 <pin_config+0x1c>)
 80003fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000400:	08000415 	.word	0x08000415
 8000404:	080004ad 	.word	0x080004ad
 8000408:	080004ef 	.word	0x080004ef
 800040c:	0800052f 	.word	0x0800052f
 8000410:	0800055d 	.word	0x0800055d
	{
		case INPUT_MODE:
			CLRBIT(port->MODER,(pin*2));
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	68ba      	ldr	r2, [r7, #8]
 800041a:	0052      	lsls	r2, r2, #1
 800041c:	2101      	movs	r1, #1
 800041e:	fa01 f202 	lsl.w	r2, r1, r2
 8000422:	43d2      	mvns	r2, r2
 8000424:	401a      	ands	r2, r3
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	601a      	str	r2, [r3, #0]
			CLRBIT(port->MODER,((pin*2)+1));
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	68ba      	ldr	r2, [r7, #8]
 8000430:	0052      	lsls	r2, r2, #1
 8000432:	3201      	adds	r2, #1
 8000434:	2101      	movs	r1, #1
 8000436:	fa01 f202 	lsl.w	r2, r1, r2
 800043a:	43d2      	mvns	r2, r2
 800043c:	401a      	ands	r2, r3
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	601a      	str	r2, [r3, #0]
			if(pull == PULL_UP)
 8000442:	683b      	ldr	r3, [r7, #0]
 8000444:	2b01      	cmp	r3, #1
 8000446:	d116      	bne.n	8000476 <pin_config+0x92>
			{
				SETBIT(port->PUPDR,(pin*2));
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	68db      	ldr	r3, [r3, #12]
 800044c:	68ba      	ldr	r2, [r7, #8]
 800044e:	0052      	lsls	r2, r2, #1
 8000450:	2101      	movs	r1, #1
 8000452:	fa01 f202 	lsl.w	r2, r1, r2
 8000456:	431a      	orrs	r2, r3
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	60da      	str	r2, [r3, #12]
				CLRBIT(port->PUPDR,((pin*2)+1));
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	68db      	ldr	r3, [r3, #12]
 8000460:	68ba      	ldr	r2, [r7, #8]
 8000462:	0052      	lsls	r2, r2, #1
 8000464:	3201      	adds	r2, #1
 8000466:	2101      	movs	r1, #1
 8000468:	fa01 f202 	lsl.w	r2, r1, r2
 800046c:	43d2      	mvns	r2, r2
 800046e:	401a      	ands	r2, r3
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	60da      	str	r2, [r3, #12]
			else if(pull == PULL_DOWN)
			{
				CLRBIT(port->PUPDR,(pin*2));
				SETBIT(port->PUPDR,((pin*2)+1));
			}
			break;
 8000474:	e088      	b.n	8000588 <pin_config+0x1a4>
			else if(pull == PULL_DOWN)
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	2b02      	cmp	r3, #2
 800047a:	f040 8085 	bne.w	8000588 <pin_config+0x1a4>
				CLRBIT(port->PUPDR,(pin*2));
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	68db      	ldr	r3, [r3, #12]
 8000482:	68ba      	ldr	r2, [r7, #8]
 8000484:	0052      	lsls	r2, r2, #1
 8000486:	2101      	movs	r1, #1
 8000488:	fa01 f202 	lsl.w	r2, r1, r2
 800048c:	43d2      	mvns	r2, r2
 800048e:	401a      	ands	r2, r3
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	60da      	str	r2, [r3, #12]
				SETBIT(port->PUPDR,((pin*2)+1));
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	68db      	ldr	r3, [r3, #12]
 8000498:	68ba      	ldr	r2, [r7, #8]
 800049a:	0052      	lsls	r2, r2, #1
 800049c:	3201      	adds	r2, #1
 800049e:	2101      	movs	r1, #1
 80004a0:	fa01 f202 	lsl.w	r2, r1, r2
 80004a4:	431a      	orrs	r2, r3
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	60da      	str	r2, [r3, #12]
			break;
 80004aa:	e06d      	b.n	8000588 <pin_config+0x1a4>
		case OUTPUT_PUSH_PULL:
			SETBIT(port->MODER,(pin*2));
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	68ba      	ldr	r2, [r7, #8]
 80004b2:	0052      	lsls	r2, r2, #1
 80004b4:	2101      	movs	r1, #1
 80004b6:	fa01 f202 	lsl.w	r2, r1, r2
 80004ba:	431a      	orrs	r2, r3
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	601a      	str	r2, [r3, #0]
			CLRBIT(port->MODER,((pin*2)+1));
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	68ba      	ldr	r2, [r7, #8]
 80004c6:	0052      	lsls	r2, r2, #1
 80004c8:	3201      	adds	r2, #1
 80004ca:	2101      	movs	r1, #1
 80004cc:	fa01 f202 	lsl.w	r2, r1, r2
 80004d0:	43d2      	mvns	r2, r2
 80004d2:	401a      	ands	r2, r3
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	601a      	str	r2, [r3, #0]
			CLRBIT(port->OTYPER,pin);
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	685b      	ldr	r3, [r3, #4]
 80004dc:	2101      	movs	r1, #1
 80004de:	68ba      	ldr	r2, [r7, #8]
 80004e0:	fa01 f202 	lsl.w	r2, r1, r2
 80004e4:	43d2      	mvns	r2, r2
 80004e6:	401a      	ands	r2, r3
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	605a      	str	r2, [r3, #4]
			break;
 80004ec:	e04d      	b.n	800058a <pin_config+0x1a6>
		case OUTPUT_OPEN_DRAIN:
			SETBIT(port->MODER,(pin*2));
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	68ba      	ldr	r2, [r7, #8]
 80004f4:	0052      	lsls	r2, r2, #1
 80004f6:	2101      	movs	r1, #1
 80004f8:	fa01 f202 	lsl.w	r2, r1, r2
 80004fc:	431a      	orrs	r2, r3
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	601a      	str	r2, [r3, #0]
			CLRBIT(port->MODER,((pin*2)+1));
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	68ba      	ldr	r2, [r7, #8]
 8000508:	0052      	lsls	r2, r2, #1
 800050a:	3201      	adds	r2, #1
 800050c:	2101      	movs	r1, #1
 800050e:	fa01 f202 	lsl.w	r2, r1, r2
 8000512:	43d2      	mvns	r2, r2
 8000514:	401a      	ands	r2, r3
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	601a      	str	r2, [r3, #0]
			SETBIT(port->OTYPER,pin);
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	685b      	ldr	r3, [r3, #4]
 800051e:	2101      	movs	r1, #1
 8000520:	68ba      	ldr	r2, [r7, #8]
 8000522:	fa01 f202 	lsl.w	r2, r1, r2
 8000526:	431a      	orrs	r2, r3
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	605a      	str	r2, [r3, #4]
			break;
 800052c:	e02d      	b.n	800058a <pin_config+0x1a6>
		case ALT_FUNC_MODE:
			CLRBIT(port->MODER,(pin*2));
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	68ba      	ldr	r2, [r7, #8]
 8000534:	0052      	lsls	r2, r2, #1
 8000536:	2101      	movs	r1, #1
 8000538:	fa01 f202 	lsl.w	r2, r1, r2
 800053c:	43d2      	mvns	r2, r2
 800053e:	401a      	ands	r2, r3
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	601a      	str	r2, [r3, #0]
			SETBIT(port->MODER,((pin*2)+1));
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	68ba      	ldr	r2, [r7, #8]
 800054a:	0052      	lsls	r2, r2, #1
 800054c:	3201      	adds	r2, #1
 800054e:	2101      	movs	r1, #1
 8000550:	fa01 f202 	lsl.w	r2, r1, r2
 8000554:	431a      	orrs	r2, r3
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	601a      	str	r2, [r3, #0]
			break;
 800055a:	e016      	b.n	800058a <pin_config+0x1a6>
		case ANALOG_MODE:
			SETBIT(port->MODER,(pin*2));
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	68ba      	ldr	r2, [r7, #8]
 8000562:	0052      	lsls	r2, r2, #1
 8000564:	2101      	movs	r1, #1
 8000566:	fa01 f202 	lsl.w	r2, r1, r2
 800056a:	431a      	orrs	r2, r3
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	601a      	str	r2, [r3, #0]
			SETBIT(port->MODER,((pin*2)+1));
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	68ba      	ldr	r2, [r7, #8]
 8000576:	0052      	lsls	r2, r2, #1
 8000578:	3201      	adds	r2, #1
 800057a:	2101      	movs	r1, #1
 800057c:	fa01 f202 	lsl.w	r2, r1, r2
 8000580:	431a      	orrs	r2, r3
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	601a      	str	r2, [r3, #0]
			break;
 8000586:	e000      	b.n	800058a <pin_config+0x1a6>
			break;
 8000588:	bf00      	nop
	}
}
 800058a:	bf00      	nop
 800058c:	3714      	adds	r7, #20
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <pin_speed_config>:




static void pin_speed_config(GPIO_TypeDef *port,uint32_t pin, uint32_t speed)
{
 8000598:	b480      	push	{r7}
 800059a:	b085      	sub	sp, #20
 800059c:	af00      	add	r7, sp, #0
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	607a      	str	r2, [r7, #4]
	switch(speed)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2b03      	cmp	r3, #3
 80005a8:	d866      	bhi.n	8000678 <pin_speed_config+0xe0>
 80005aa:	a201      	add	r2, pc, #4	; (adr r2, 80005b0 <pin_speed_config+0x18>)
 80005ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005b0:	080005c1 	.word	0x080005c1
 80005b4:	080005f1 	.word	0x080005f1
 80005b8:	0800061f 	.word	0x0800061f
 80005bc:	0800064d 	.word	0x0800064d
	{
		case LOW_SPEED:
			CLRBIT(port->OSPEEDR,(pin*2));
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	689b      	ldr	r3, [r3, #8]
 80005c4:	68ba      	ldr	r2, [r7, #8]
 80005c6:	0052      	lsls	r2, r2, #1
 80005c8:	2101      	movs	r1, #1
 80005ca:	fa01 f202 	lsl.w	r2, r1, r2
 80005ce:	43d2      	mvns	r2, r2
 80005d0:	401a      	ands	r2, r3
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	609a      	str	r2, [r3, #8]
			CLRBIT(port->OSPEEDR,((pin*2)+1));
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	689b      	ldr	r3, [r3, #8]
 80005da:	68ba      	ldr	r2, [r7, #8]
 80005dc:	0052      	lsls	r2, r2, #1
 80005de:	3201      	adds	r2, #1
 80005e0:	2101      	movs	r1, #1
 80005e2:	fa01 f202 	lsl.w	r2, r1, r2
 80005e6:	43d2      	mvns	r2, r2
 80005e8:	401a      	ands	r2, r3
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	609a      	str	r2, [r3, #8]
			break;
 80005ee:	e043      	b.n	8000678 <pin_speed_config+0xe0>
		case MEDIUM_SPEED:
			CLRBIT(port->OSPEEDR,(pin*2));
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	689b      	ldr	r3, [r3, #8]
 80005f4:	68ba      	ldr	r2, [r7, #8]
 80005f6:	0052      	lsls	r2, r2, #1
 80005f8:	2101      	movs	r1, #1
 80005fa:	fa01 f202 	lsl.w	r2, r1, r2
 80005fe:	43d2      	mvns	r2, r2
 8000600:	401a      	ands	r2, r3
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	609a      	str	r2, [r3, #8]
			SETBIT(port->OSPEEDR,((pin*2)+1));
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	689b      	ldr	r3, [r3, #8]
 800060a:	68ba      	ldr	r2, [r7, #8]
 800060c:	0052      	lsls	r2, r2, #1
 800060e:	3201      	adds	r2, #1
 8000610:	2101      	movs	r1, #1
 8000612:	fa01 f202 	lsl.w	r2, r1, r2
 8000616:	431a      	orrs	r2, r3
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	609a      	str	r2, [r3, #8]
			break;
 800061c:	e02c      	b.n	8000678 <pin_speed_config+0xe0>
		case HIGH_SPEED:
			SETBIT(port->OSPEEDR,(pin*2));
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	689b      	ldr	r3, [r3, #8]
 8000622:	68ba      	ldr	r2, [r7, #8]
 8000624:	0052      	lsls	r2, r2, #1
 8000626:	2101      	movs	r1, #1
 8000628:	fa01 f202 	lsl.w	r2, r1, r2
 800062c:	431a      	orrs	r2, r3
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	609a      	str	r2, [r3, #8]
			CLRBIT(port->OSPEEDR,((pin*2)+1));
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	689b      	ldr	r3, [r3, #8]
 8000636:	68ba      	ldr	r2, [r7, #8]
 8000638:	0052      	lsls	r2, r2, #1
 800063a:	3201      	adds	r2, #1
 800063c:	2101      	movs	r1, #1
 800063e:	fa01 f202 	lsl.w	r2, r1, r2
 8000642:	43d2      	mvns	r2, r2
 8000644:	401a      	ands	r2, r3
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	609a      	str	r2, [r3, #8]
			break;
 800064a:	e015      	b.n	8000678 <pin_speed_config+0xe0>
		case VERY_HIGH_SPEED:
			SETBIT(port->OSPEEDR,(pin*2));
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	689b      	ldr	r3, [r3, #8]
 8000650:	68ba      	ldr	r2, [r7, #8]
 8000652:	0052      	lsls	r2, r2, #1
 8000654:	2101      	movs	r1, #1
 8000656:	fa01 f202 	lsl.w	r2, r1, r2
 800065a:	431a      	orrs	r2, r3
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	609a      	str	r2, [r3, #8]
			SETBIT(port->OSPEEDR,((pin*2)+1));
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	689b      	ldr	r3, [r3, #8]
 8000664:	68ba      	ldr	r2, [r7, #8]
 8000666:	0052      	lsls	r2, r2, #1
 8000668:	3201      	adds	r2, #1
 800066a:	2101      	movs	r1, #1
 800066c:	fa01 f202 	lsl.w	r2, r1, r2
 8000670:	431a      	orrs	r2, r3
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	609a      	str	r2, [r3, #8]
			break;
 8000676:	bf00      	nop
	}
}
 8000678:	bf00      	nop
 800067a:	3714      	adds	r7, #20
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr

08000684 <gpio_toggle>:
	return READBIT(port->IDR,pinNumber);
}


void gpio_toggle(GPIO_TypeDef *port, uint32_t pin)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
	SETBIT(port->BSRRL,pin);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	8b1b      	ldrh	r3, [r3, #24]
 8000692:	b29b      	uxth	r3, r3
 8000694:	b21a      	sxth	r2, r3
 8000696:	2101      	movs	r1, #1
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	fa01 f303 	lsl.w	r3, r1, r3
 800069e:	b21b      	sxth	r3, r3
 80006a0:	4313      	orrs	r3, r2
 80006a2:	b21b      	sxth	r3, r3
 80006a4:	b29a      	uxth	r2, r3
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	831a      	strh	r2, [r3, #24]
	SysTick_Delay(100);
 80006aa:	2064      	movs	r0, #100	; 0x64
 80006ac:	f7ff fe54 	bl	8000358 <SysTick_Delay>
	SETBIT(port->BSRRH,pin);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	8b5b      	ldrh	r3, [r3, #26]
 80006b4:	b29b      	uxth	r3, r3
 80006b6:	b21a      	sxth	r2, r3
 80006b8:	2101      	movs	r1, #1
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	fa01 f303 	lsl.w	r3, r1, r3
 80006c0:	b21b      	sxth	r3, r3
 80006c2:	4313      	orrs	r3, r2
 80006c4:	b21b      	sxth	r3, r3
 80006c6:	b29a      	uxth	r2, r3
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	835a      	strh	r2, [r3, #26]
	SysTick_Delay(100);
 80006cc:	2064      	movs	r0, #100	; 0x64
 80006ce:	f7ff fe43 	bl	8000358 <SysTick_Delay>
}
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
	...

080006dc <gpio_init>:


void gpio_init(GPIO_TYPE gpio)
{
 80006dc:	b084      	sub	sp, #16
 80006de:	b580      	push	{r7, lr}
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	f107 0e08 	add.w	lr, r7, #8
 80006e6:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
	if(gpio.port == PORTA)
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	4a21      	ldr	r2, [pc, #132]	; (8000774 <gpio_init+0x98>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d105      	bne.n	80006fe <gpio_init+0x22>
	{
		PORTA_CLOCK_EN;
 80006f2:	4a21      	ldr	r2, [pc, #132]	; (8000778 <gpio_init+0x9c>)
 80006f4:	4b20      	ldr	r3, [pc, #128]	; (8000778 <gpio_init+0x9c>)
 80006f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
	}
	if(gpio.port == PORTB)
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	4a1e      	ldr	r2, [pc, #120]	; (800077c <gpio_init+0xa0>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d105      	bne.n	8000712 <gpio_init+0x36>
	{
		PORTB_CLOCK_EN;
 8000706:	4a1c      	ldr	r2, [pc, #112]	; (8000778 <gpio_init+0x9c>)
 8000708:	4b1b      	ldr	r3, [pc, #108]	; (8000778 <gpio_init+0x9c>)
 800070a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070c:	f043 0302 	orr.w	r3, r3, #2
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
	}
	if(gpio.port == PORTC)
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	4a1a      	ldr	r2, [pc, #104]	; (8000780 <gpio_init+0xa4>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d105      	bne.n	8000726 <gpio_init+0x4a>
	{
		PORTC_CLOCK_EN;
 800071a:	4a17      	ldr	r2, [pc, #92]	; (8000778 <gpio_init+0x9c>)
 800071c:	4b16      	ldr	r3, [pc, #88]	; (8000778 <gpio_init+0x9c>)
 800071e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000720:	f043 0304 	orr.w	r3, r3, #4
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
	}
	if(gpio.port == PORTD)
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	4a16      	ldr	r2, [pc, #88]	; (8000784 <gpio_init+0xa8>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d105      	bne.n	800073a <gpio_init+0x5e>
	{
		PORTD_CLOCK_EN;
 800072e:	4a12      	ldr	r2, [pc, #72]	; (8000778 <gpio_init+0x9c>)
 8000730:	4b11      	ldr	r3, [pc, #68]	; (8000778 <gpio_init+0x9c>)
 8000732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000734:	f043 0308 	orr.w	r3, r3, #8
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
	}
	if(gpio.port == PORTE)
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	4a12      	ldr	r2, [pc, #72]	; (8000788 <gpio_init+0xac>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d105      	bne.n	800074e <gpio_init+0x72>
	{
		PORTE_CLOCK_EN;
 8000742:	4a0d      	ldr	r2, [pc, #52]	; (8000778 <gpio_init+0x9c>)
 8000744:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <gpio_init+0x9c>)
 8000746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000748:	f043 0310 	orr.w	r3, r3, #16
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
	}

	pin_config(gpio.port,gpio.pin,gpio.mode,gpio.pull);
 800074e:	68b8      	ldr	r0, [r7, #8]
 8000750:	68f9      	ldr	r1, [r7, #12]
 8000752:	693a      	ldr	r2, [r7, #16]
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	f7ff fe45 	bl	80003e4 <pin_config>
	pin_speed_config(gpio.port,gpio.pin,gpio.speed);
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	68f9      	ldr	r1, [r7, #12]
 800075e:	69ba      	ldr	r2, [r7, #24]
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff ff19 	bl	8000598 <pin_speed_config>
}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800076e:	b004      	add	sp, #16
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	40020000 	.word	0x40020000
 8000778:	40023800 	.word	0x40023800
 800077c:	40020400 	.word	0x40020400
 8000780:	40020800 	.word	0x40020800
 8000784:	40020c00 	.word	0x40020c00
 8000788:	40021000 	.word	0x40021000

0800078c <config_gpio_interrupt>:



void config_gpio_interrupt(GPIO_TypeDef *port, uint32_t pinNumber, edge_select edge)
{
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	4613      	mov	r3, r2
 8000798:	71fb      	strb	r3, [r7, #7]
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800079a:	4aa9      	ldr	r2, [pc, #676]	; (8000a40 <config_gpio_interrupt+0x2b4>)
 800079c:	4ba8      	ldr	r3, [pc, #672]	; (8000a40 <config_gpio_interrupt+0x2b4>)
 800079e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a4:	6453      	str	r3, [r2, #68]	; 0x44

	if(port == PORTA)
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	4aa6      	ldr	r2, [pc, #664]	; (8000a44 <config_gpio_interrupt+0x2b8>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d16d      	bne.n	800088a <config_gpio_interrupt+0xfe>
	{
		PORTA_CLOCK_EN;
 80007ae:	4aa4      	ldr	r2, [pc, #656]	; (8000a40 <config_gpio_interrupt+0x2b4>)
 80007b0:	4ba3      	ldr	r3, [pc, #652]	; (8000a40 <config_gpio_interrupt+0x2b4>)
 80007b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30

		switch(pinNumber)
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	2b0f      	cmp	r3, #15
 80007be:	f200 824f 	bhi.w	8000c60 <config_gpio_interrupt+0x4d4>
 80007c2:	a201      	add	r2, pc, #4	; (adr r2, 80007c8 <config_gpio_interrupt+0x3c>)
 80007c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007c8:	08000809 	.word	0x08000809
 80007cc:	08000811 	.word	0x08000811
 80007d0:	08000819 	.word	0x08000819
 80007d4:	08000821 	.word	0x08000821
 80007d8:	08000829 	.word	0x08000829
 80007dc:	08000831 	.word	0x08000831
 80007e0:	08000839 	.word	0x08000839
 80007e4:	08000841 	.word	0x08000841
 80007e8:	08000849 	.word	0x08000849
 80007ec:	08000851 	.word	0x08000851
 80007f0:	08000859 	.word	0x08000859
 80007f4:	08000861 	.word	0x08000861
 80007f8:	08000869 	.word	0x08000869
 80007fc:	08000871 	.word	0x08000871
 8000800:	08000879 	.word	0x08000879
 8000804:	08000881 	.word	0x08000881
		{
			case 0:
				SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PA;
 8000808:	4b8f      	ldr	r3, [pc, #572]	; (8000a48 <config_gpio_interrupt+0x2bc>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
				break;
 800080e:	e227      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 1:
				SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI1_PA;
 8000810:	4b8d      	ldr	r3, [pc, #564]	; (8000a48 <config_gpio_interrupt+0x2bc>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
				break;
 8000816:	e223      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 2:
				SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI2_PA;
 8000818:	4b8b      	ldr	r3, [pc, #556]	; (8000a48 <config_gpio_interrupt+0x2bc>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
				break;
 800081e:	e21f      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 3:
				SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI3_PA;
 8000820:	4b89      	ldr	r3, [pc, #548]	; (8000a48 <config_gpio_interrupt+0x2bc>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
				break;
 8000826:	e21b      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 4:
				SYSCFG->EXTICR[1] = SYSCFG_EXTICR1_EXTI0_PA;
 8000828:	4b87      	ldr	r3, [pc, #540]	; (8000a48 <config_gpio_interrupt+0x2bc>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
				break;
 800082e:	e217      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 5:
				SYSCFG->EXTICR[1] = SYSCFG_EXTICR1_EXTI1_PA;
 8000830:	4b85      	ldr	r3, [pc, #532]	; (8000a48 <config_gpio_interrupt+0x2bc>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
				break;
 8000836:	e213      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 6:
				SYSCFG->EXTICR[1] = SYSCFG_EXTICR1_EXTI2_PA;
 8000838:	4b83      	ldr	r3, [pc, #524]	; (8000a48 <config_gpio_interrupt+0x2bc>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
				break;
 800083e:	e20f      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 7:
				SYSCFG->EXTICR[1] = SYSCFG_EXTICR1_EXTI3_PA;
 8000840:	4b81      	ldr	r3, [pc, #516]	; (8000a48 <config_gpio_interrupt+0x2bc>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
				break;
 8000846:	e20b      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 8:
				SYSCFG->EXTICR[2] = SYSCFG_EXTICR1_EXTI0_PA;
 8000848:	4b7f      	ldr	r3, [pc, #508]	; (8000a48 <config_gpio_interrupt+0x2bc>)
 800084a:	2200      	movs	r2, #0
 800084c:	611a      	str	r2, [r3, #16]
				break;
 800084e:	e207      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 9:
				SYSCFG->EXTICR[2] = SYSCFG_EXTICR1_EXTI1_PA;
 8000850:	4b7d      	ldr	r3, [pc, #500]	; (8000a48 <config_gpio_interrupt+0x2bc>)
 8000852:	2200      	movs	r2, #0
 8000854:	611a      	str	r2, [r3, #16]
				break;
 8000856:	e203      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 10:
				SYSCFG->EXTICR[2] = SYSCFG_EXTICR1_EXTI2_PA;
 8000858:	4b7b      	ldr	r3, [pc, #492]	; (8000a48 <config_gpio_interrupt+0x2bc>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
				break;
 800085e:	e1ff      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 11:
				SYSCFG->EXTICR[2] = SYSCFG_EXTICR1_EXTI3_PA;
 8000860:	4b79      	ldr	r3, [pc, #484]	; (8000a48 <config_gpio_interrupt+0x2bc>)
 8000862:	2200      	movs	r2, #0
 8000864:	611a      	str	r2, [r3, #16]
				break;
 8000866:	e1fb      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 12:
				SYSCFG->EXTICR[3] = SYSCFG_EXTICR1_EXTI0_PA;
 8000868:	4b77      	ldr	r3, [pc, #476]	; (8000a48 <config_gpio_interrupt+0x2bc>)
 800086a:	2200      	movs	r2, #0
 800086c:	615a      	str	r2, [r3, #20]
				break;
 800086e:	e1f7      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 13:
				SYSCFG->EXTICR[3] = SYSCFG_EXTICR1_EXTI1_PA;
 8000870:	4b75      	ldr	r3, [pc, #468]	; (8000a48 <config_gpio_interrupt+0x2bc>)
 8000872:	2200      	movs	r2, #0
 8000874:	615a      	str	r2, [r3, #20]
				break;
 8000876:	e1f3      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 14:
				SYSCFG->EXTICR[3] = SYSCFG_EXTICR1_EXTI2_PA;
 8000878:	4b73      	ldr	r3, [pc, #460]	; (8000a48 <config_gpio_interrupt+0x2bc>)
 800087a:	2200      	movs	r2, #0
 800087c:	615a      	str	r2, [r3, #20]
				break;
 800087e:	e1ef      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 15:
				SYSCFG->EXTICR[3] = SYSCFG_EXTICR1_EXTI3_PA;
 8000880:	4b71      	ldr	r3, [pc, #452]	; (8000a48 <config_gpio_interrupt+0x2bc>)
 8000882:	2200      	movs	r2, #0
 8000884:	615a      	str	r2, [r3, #20]
				break;
 8000886:	bf00      	nop
 8000888:	e1ea      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
		}
	}
	else if(port == PORTB)
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	4a6f      	ldr	r2, [pc, #444]	; (8000a4c <config_gpio_interrupt+0x2c0>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d16f      	bne.n	8000972 <config_gpio_interrupt+0x1e6>
	{
		switch(pinNumber)
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	2b0f      	cmp	r3, #15
 8000896:	f200 81e3 	bhi.w	8000c60 <config_gpio_interrupt+0x4d4>
 800089a:	a201      	add	r2, pc, #4	; (adr r2, 80008a0 <config_gpio_interrupt+0x114>)
 800089c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a0:	080008e1 	.word	0x080008e1
 80008a4:	080008e9 	.word	0x080008e9
 80008a8:	080008f1 	.word	0x080008f1
 80008ac:	080008fb 	.word	0x080008fb
 80008b0:	08000905 	.word	0x08000905
 80008b4:	0800090d 	.word	0x0800090d
 80008b8:	08000915 	.word	0x08000915
 80008bc:	0800091f 	.word	0x0800091f
 80008c0:	08000929 	.word	0x08000929
 80008c4:	08000931 	.word	0x08000931
 80008c8:	08000939 	.word	0x08000939
 80008cc:	08000943 	.word	0x08000943
 80008d0:	0800094d 	.word	0x0800094d
 80008d4:	08000955 	.word	0x08000955
 80008d8:	0800095d 	.word	0x0800095d
 80008dc:	08000967 	.word	0x08000967
		{
		PORTB_CLOCK_EN;

			case 0:
				SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PB;
 80008e0:	4b59      	ldr	r3, [pc, #356]	; (8000a48 <config_gpio_interrupt+0x2bc>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	609a      	str	r2, [r3, #8]
				break;
 80008e6:	e1bb      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 1:
				SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI1_PB;
 80008e8:	4b57      	ldr	r3, [pc, #348]	; (8000a48 <config_gpio_interrupt+0x2bc>)
 80008ea:	2210      	movs	r2, #16
 80008ec:	609a      	str	r2, [r3, #8]
				break;
 80008ee:	e1b7      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 2:
				SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI2_PB;
 80008f0:	4b55      	ldr	r3, [pc, #340]	; (8000a48 <config_gpio_interrupt+0x2bc>)
 80008f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008f6:	609a      	str	r2, [r3, #8]
				break;
 80008f8:	e1b2      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 3:
				SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI3_PB;
 80008fa:	4b53      	ldr	r3, [pc, #332]	; (8000a48 <config_gpio_interrupt+0x2bc>)
 80008fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000900:	609a      	str	r2, [r3, #8]
				break;
 8000902:	e1ad      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 4:
				SYSCFG->EXTICR[1] = SYSCFG_EXTICR1_EXTI0_PB;
 8000904:	4b50      	ldr	r3, [pc, #320]	; (8000a48 <config_gpio_interrupt+0x2bc>)
 8000906:	2201      	movs	r2, #1
 8000908:	60da      	str	r2, [r3, #12]
				break;
 800090a:	e1a9      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 5:
				SYSCFG->EXTICR[1] = SYSCFG_EXTICR1_EXTI1_PB;
 800090c:	4b4e      	ldr	r3, [pc, #312]	; (8000a48 <config_gpio_interrupt+0x2bc>)
 800090e:	2210      	movs	r2, #16
 8000910:	60da      	str	r2, [r3, #12]
				break;
 8000912:	e1a5      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 6:
				SYSCFG->EXTICR[1] = SYSCFG_EXTICR1_EXTI2_PB;
 8000914:	4b4c      	ldr	r3, [pc, #304]	; (8000a48 <config_gpio_interrupt+0x2bc>)
 8000916:	f44f 7280 	mov.w	r2, #256	; 0x100
 800091a:	60da      	str	r2, [r3, #12]
				break;
 800091c:	e1a0      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 7:
				SYSCFG->EXTICR[1] = SYSCFG_EXTICR1_EXTI3_PB;
 800091e:	4b4a      	ldr	r3, [pc, #296]	; (8000a48 <config_gpio_interrupt+0x2bc>)
 8000920:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000924:	60da      	str	r2, [r3, #12]
				break;
 8000926:	e19b      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 8:
				SYSCFG->EXTICR[2] = SYSCFG_EXTICR1_EXTI0_PB;
 8000928:	4b47      	ldr	r3, [pc, #284]	; (8000a48 <config_gpio_interrupt+0x2bc>)
 800092a:	2201      	movs	r2, #1
 800092c:	611a      	str	r2, [r3, #16]
				break;
 800092e:	e197      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 9:
				SYSCFG->EXTICR[2] = SYSCFG_EXTICR1_EXTI1_PB;
 8000930:	4b45      	ldr	r3, [pc, #276]	; (8000a48 <config_gpio_interrupt+0x2bc>)
 8000932:	2210      	movs	r2, #16
 8000934:	611a      	str	r2, [r3, #16]
				break;
 8000936:	e193      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 10:
				SYSCFG->EXTICR[2] = SYSCFG_EXTICR1_EXTI2_PB;
 8000938:	4b43      	ldr	r3, [pc, #268]	; (8000a48 <config_gpio_interrupt+0x2bc>)
 800093a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800093e:	611a      	str	r2, [r3, #16]
				break;
 8000940:	e18e      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 11:
				SYSCFG->EXTICR[2] = SYSCFG_EXTICR1_EXTI3_PB;
 8000942:	4b41      	ldr	r3, [pc, #260]	; (8000a48 <config_gpio_interrupt+0x2bc>)
 8000944:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000948:	611a      	str	r2, [r3, #16]
				break;
 800094a:	e189      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 12:
				SYSCFG->EXTICR[3] = SYSCFG_EXTICR1_EXTI0_PB;
 800094c:	4b3e      	ldr	r3, [pc, #248]	; (8000a48 <config_gpio_interrupt+0x2bc>)
 800094e:	2201      	movs	r2, #1
 8000950:	615a      	str	r2, [r3, #20]
				break;
 8000952:	e185      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 13:
				SYSCFG->EXTICR[3] = SYSCFG_EXTICR1_EXTI1_PB;
 8000954:	4b3c      	ldr	r3, [pc, #240]	; (8000a48 <config_gpio_interrupt+0x2bc>)
 8000956:	2210      	movs	r2, #16
 8000958:	615a      	str	r2, [r3, #20]
				break;
 800095a:	e181      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 14:
				SYSCFG->EXTICR[3] = SYSCFG_EXTICR1_EXTI2_PB;
 800095c:	4b3a      	ldr	r3, [pc, #232]	; (8000a48 <config_gpio_interrupt+0x2bc>)
 800095e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000962:	615a      	str	r2, [r3, #20]
				break;
 8000964:	e17c      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 15:
				SYSCFG->EXTICR[3] = SYSCFG_EXTICR1_EXTI3_PB;
 8000966:	4b38      	ldr	r3, [pc, #224]	; (8000a48 <config_gpio_interrupt+0x2bc>)
 8000968:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800096c:	615a      	str	r2, [r3, #20]
				break;
 800096e:	bf00      	nop
 8000970:	e176      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
		}
	}
	else if(port == PORTC)
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	4a36      	ldr	r2, [pc, #216]	; (8000a50 <config_gpio_interrupt+0x2c4>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d17f      	bne.n	8000a7a <config_gpio_interrupt+0x2ee>
	{
		PORTC_CLOCK_EN;
 800097a:	4a31      	ldr	r2, [pc, #196]	; (8000a40 <config_gpio_interrupt+0x2b4>)
 800097c:	4b30      	ldr	r3, [pc, #192]	; (8000a40 <config_gpio_interrupt+0x2b4>)
 800097e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000980:	f043 0304 	orr.w	r3, r3, #4
 8000984:	6313      	str	r3, [r2, #48]	; 0x30

		switch(pinNumber)
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	2b0f      	cmp	r3, #15
 800098a:	f200 8169 	bhi.w	8000c60 <config_gpio_interrupt+0x4d4>
 800098e:	a201      	add	r2, pc, #4	; (adr r2, 8000994 <config_gpio_interrupt+0x208>)
 8000990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000994:	080009d5 	.word	0x080009d5
 8000998:	080009dd 	.word	0x080009dd
 800099c:	080009e5 	.word	0x080009e5
 80009a0:	080009ef 	.word	0x080009ef
 80009a4:	080009f9 	.word	0x080009f9
 80009a8:	08000a01 	.word	0x08000a01
 80009ac:	08000a09 	.word	0x08000a09
 80009b0:	08000a13 	.word	0x08000a13
 80009b4:	08000a1d 	.word	0x08000a1d
 80009b8:	08000a25 	.word	0x08000a25
 80009bc:	08000a2d 	.word	0x08000a2d
 80009c0:	08000a37 	.word	0x08000a37
 80009c4:	08000a55 	.word	0x08000a55
 80009c8:	08000a5d 	.word	0x08000a5d
 80009cc:	08000a65 	.word	0x08000a65
 80009d0:	08000a6f 	.word	0x08000a6f
		{
			case 0:
				SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PC;
 80009d4:	4b1c      	ldr	r3, [pc, #112]	; (8000a48 <config_gpio_interrupt+0x2bc>)
 80009d6:	2202      	movs	r2, #2
 80009d8:	609a      	str	r2, [r3, #8]
				break;
 80009da:	e141      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 1:
				SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI1_PC;
 80009dc:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <config_gpio_interrupt+0x2bc>)
 80009de:	2220      	movs	r2, #32
 80009e0:	609a      	str	r2, [r3, #8]
				break;
 80009e2:	e13d      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 2:
				SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI2_PC;
 80009e4:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <config_gpio_interrupt+0x2bc>)
 80009e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009ea:	609a      	str	r2, [r3, #8]
				break;
 80009ec:	e138      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 3:
				SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI3_PC;
 80009ee:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <config_gpio_interrupt+0x2bc>)
 80009f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009f4:	609a      	str	r2, [r3, #8]
				break;
 80009f6:	e133      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 4:
				SYSCFG->EXTICR[1] = SYSCFG_EXTICR1_EXTI0_PC;
 80009f8:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <config_gpio_interrupt+0x2bc>)
 80009fa:	2202      	movs	r2, #2
 80009fc:	60da      	str	r2, [r3, #12]
				break;
 80009fe:	e12f      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 5:
				SYSCFG->EXTICR[1] = SYSCFG_EXTICR1_EXTI1_PC;
 8000a00:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <config_gpio_interrupt+0x2bc>)
 8000a02:	2220      	movs	r2, #32
 8000a04:	60da      	str	r2, [r3, #12]
				break;
 8000a06:	e12b      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 6:
				SYSCFG->EXTICR[1] = SYSCFG_EXTICR1_EXTI2_PC;
 8000a08:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <config_gpio_interrupt+0x2bc>)
 8000a0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a0e:	60da      	str	r2, [r3, #12]
				break;
 8000a10:	e126      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 7:
				SYSCFG->EXTICR[1] = SYSCFG_EXTICR1_EXTI3_PC;
 8000a12:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <config_gpio_interrupt+0x2bc>)
 8000a14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a18:	60da      	str	r2, [r3, #12]
				break;
 8000a1a:	e121      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 8:
				SYSCFG->EXTICR[2] = SYSCFG_EXTICR1_EXTI0_PC;
 8000a1c:	4b0a      	ldr	r3, [pc, #40]	; (8000a48 <config_gpio_interrupt+0x2bc>)
 8000a1e:	2202      	movs	r2, #2
 8000a20:	611a      	str	r2, [r3, #16]
				break;
 8000a22:	e11d      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 9:
				SYSCFG->EXTICR[2] = SYSCFG_EXTICR1_EXTI1_PC;
 8000a24:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <config_gpio_interrupt+0x2bc>)
 8000a26:	2220      	movs	r2, #32
 8000a28:	611a      	str	r2, [r3, #16]
				break;
 8000a2a:	e119      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 10:
				SYSCFG->EXTICR[2] = SYSCFG_EXTICR1_EXTI2_PC;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <config_gpio_interrupt+0x2bc>)
 8000a2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a32:	611a      	str	r2, [r3, #16]
				break;
 8000a34:	e114      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 11:
				SYSCFG->EXTICR[2] = SYSCFG_EXTICR1_EXTI3_PC;
 8000a36:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <config_gpio_interrupt+0x2bc>)
 8000a38:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a3c:	611a      	str	r2, [r3, #16]
				break;
 8000a3e:	e10f      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40020000 	.word	0x40020000
 8000a48:	40013800 	.word	0x40013800
 8000a4c:	40020400 	.word	0x40020400
 8000a50:	40020800 	.word	0x40020800
			case 12:
				SYSCFG->EXTICR[3] = SYSCFG_EXTICR1_EXTI0_PC;
 8000a54:	4b9d      	ldr	r3, [pc, #628]	; (8000ccc <config_gpio_interrupt+0x540>)
 8000a56:	2202      	movs	r2, #2
 8000a58:	615a      	str	r2, [r3, #20]
				break;
 8000a5a:	e101      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 13:
				SYSCFG->EXTICR[3] = SYSCFG_EXTICR1_EXTI1_PC;
 8000a5c:	4b9b      	ldr	r3, [pc, #620]	; (8000ccc <config_gpio_interrupt+0x540>)
 8000a5e:	2220      	movs	r2, #32
 8000a60:	615a      	str	r2, [r3, #20]
				break;
 8000a62:	e0fd      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 14:
				SYSCFG->EXTICR[3] = SYSCFG_EXTICR1_EXTI2_PC;
 8000a64:	4b99      	ldr	r3, [pc, #612]	; (8000ccc <config_gpio_interrupt+0x540>)
 8000a66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a6a:	615a      	str	r2, [r3, #20]
				break;
 8000a6c:	e0f8      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 15:
				SYSCFG->EXTICR[3] = SYSCFG_EXTICR1_EXTI3_PC;
 8000a6e:	4b97      	ldr	r3, [pc, #604]	; (8000ccc <config_gpio_interrupt+0x540>)
 8000a70:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a74:	615a      	str	r2, [r3, #20]
				break;
 8000a76:	bf00      	nop
 8000a78:	e0f2      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
		}
	}
	else if(port == PORTD)
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	4a94      	ldr	r2, [pc, #592]	; (8000cd0 <config_gpio_interrupt+0x544>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d175      	bne.n	8000b6e <config_gpio_interrupt+0x3e2>
	{
		PORTD_CLOCK_EN;
 8000a82:	4a94      	ldr	r2, [pc, #592]	; (8000cd4 <config_gpio_interrupt+0x548>)
 8000a84:	4b93      	ldr	r3, [pc, #588]	; (8000cd4 <config_gpio_interrupt+0x548>)
 8000a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a88:	f043 0308 	orr.w	r3, r3, #8
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30

		switch(pinNumber)
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	2b0f      	cmp	r3, #15
 8000a92:	f200 80e5 	bhi.w	8000c60 <config_gpio_interrupt+0x4d4>
 8000a96:	a201      	add	r2, pc, #4	; (adr r2, 8000a9c <config_gpio_interrupt+0x310>)
 8000a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a9c:	08000add 	.word	0x08000add
 8000aa0:	08000ae5 	.word	0x08000ae5
 8000aa4:	08000aed 	.word	0x08000aed
 8000aa8:	08000af7 	.word	0x08000af7
 8000aac:	08000b01 	.word	0x08000b01
 8000ab0:	08000b09 	.word	0x08000b09
 8000ab4:	08000b11 	.word	0x08000b11
 8000ab8:	08000b1b 	.word	0x08000b1b
 8000abc:	08000b25 	.word	0x08000b25
 8000ac0:	08000b2d 	.word	0x08000b2d
 8000ac4:	08000b35 	.word	0x08000b35
 8000ac8:	08000b3f 	.word	0x08000b3f
 8000acc:	08000b49 	.word	0x08000b49
 8000ad0:	08000b51 	.word	0x08000b51
 8000ad4:	08000b59 	.word	0x08000b59
 8000ad8:	08000b63 	.word	0x08000b63
		{
			case 0:
				SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PD;
 8000adc:	4b7b      	ldr	r3, [pc, #492]	; (8000ccc <config_gpio_interrupt+0x540>)
 8000ade:	2203      	movs	r2, #3
 8000ae0:	609a      	str	r2, [r3, #8]
				break;
 8000ae2:	e0bd      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 1:
				SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI1_PD;
 8000ae4:	4b79      	ldr	r3, [pc, #484]	; (8000ccc <config_gpio_interrupt+0x540>)
 8000ae6:	2230      	movs	r2, #48	; 0x30
 8000ae8:	609a      	str	r2, [r3, #8]
				break;
 8000aea:	e0b9      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 2:
				SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI2_PD;
 8000aec:	4b77      	ldr	r3, [pc, #476]	; (8000ccc <config_gpio_interrupt+0x540>)
 8000aee:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000af2:	609a      	str	r2, [r3, #8]
				break;
 8000af4:	e0b4      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 3:
				SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI3_PD;
 8000af6:	4b75      	ldr	r3, [pc, #468]	; (8000ccc <config_gpio_interrupt+0x540>)
 8000af8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000afc:	609a      	str	r2, [r3, #8]
				break;
 8000afe:	e0af      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 4:
				SYSCFG->EXTICR[1] = SYSCFG_EXTICR1_EXTI0_PD;
 8000b00:	4b72      	ldr	r3, [pc, #456]	; (8000ccc <config_gpio_interrupt+0x540>)
 8000b02:	2203      	movs	r2, #3
 8000b04:	60da      	str	r2, [r3, #12]
				break;
 8000b06:	e0ab      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 5:
				SYSCFG->EXTICR[1] = SYSCFG_EXTICR1_EXTI1_PD;
 8000b08:	4b70      	ldr	r3, [pc, #448]	; (8000ccc <config_gpio_interrupt+0x540>)
 8000b0a:	2230      	movs	r2, #48	; 0x30
 8000b0c:	60da      	str	r2, [r3, #12]
				break;
 8000b0e:	e0a7      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 6:
				SYSCFG->EXTICR[1] = SYSCFG_EXTICR1_EXTI2_PD;
 8000b10:	4b6e      	ldr	r3, [pc, #440]	; (8000ccc <config_gpio_interrupt+0x540>)
 8000b12:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000b16:	60da      	str	r2, [r3, #12]
				break;
 8000b18:	e0a2      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 7:
				SYSCFG->EXTICR[1] = SYSCFG_EXTICR1_EXTI3_PD;
 8000b1a:	4b6c      	ldr	r3, [pc, #432]	; (8000ccc <config_gpio_interrupt+0x540>)
 8000b1c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000b20:	60da      	str	r2, [r3, #12]
				break;
 8000b22:	e09d      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 8:
				SYSCFG->EXTICR[2] = SYSCFG_EXTICR1_EXTI0_PD;
 8000b24:	4b69      	ldr	r3, [pc, #420]	; (8000ccc <config_gpio_interrupt+0x540>)
 8000b26:	2203      	movs	r2, #3
 8000b28:	611a      	str	r2, [r3, #16]
				break;
 8000b2a:	e099      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 9:
				SYSCFG->EXTICR[2] = SYSCFG_EXTICR1_EXTI1_PD;
 8000b2c:	4b67      	ldr	r3, [pc, #412]	; (8000ccc <config_gpio_interrupt+0x540>)
 8000b2e:	2230      	movs	r2, #48	; 0x30
 8000b30:	611a      	str	r2, [r3, #16]
				break;
 8000b32:	e095      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 10:
				SYSCFG->EXTICR[2] = SYSCFG_EXTICR1_EXTI2_PD;
 8000b34:	4b65      	ldr	r3, [pc, #404]	; (8000ccc <config_gpio_interrupt+0x540>)
 8000b36:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000b3a:	611a      	str	r2, [r3, #16]
				break;
 8000b3c:	e090      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 11:
				SYSCFG->EXTICR[2] = SYSCFG_EXTICR1_EXTI3_PD;
 8000b3e:	4b63      	ldr	r3, [pc, #396]	; (8000ccc <config_gpio_interrupt+0x540>)
 8000b40:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000b44:	611a      	str	r2, [r3, #16]
				break;
 8000b46:	e08b      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 12:
				SYSCFG->EXTICR[3] = SYSCFG_EXTICR1_EXTI0_PD;
 8000b48:	4b60      	ldr	r3, [pc, #384]	; (8000ccc <config_gpio_interrupt+0x540>)
 8000b4a:	2203      	movs	r2, #3
 8000b4c:	615a      	str	r2, [r3, #20]
				break;
 8000b4e:	e087      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 13:
				SYSCFG->EXTICR[3] = SYSCFG_EXTICR1_EXTI1_PD;
 8000b50:	4b5e      	ldr	r3, [pc, #376]	; (8000ccc <config_gpio_interrupt+0x540>)
 8000b52:	2230      	movs	r2, #48	; 0x30
 8000b54:	615a      	str	r2, [r3, #20]
				break;
 8000b56:	e083      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 14:
				SYSCFG->EXTICR[3] = SYSCFG_EXTICR1_EXTI2_PD;
 8000b58:	4b5c      	ldr	r3, [pc, #368]	; (8000ccc <config_gpio_interrupt+0x540>)
 8000b5a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000b5e:	615a      	str	r2, [r3, #20]
				break;
 8000b60:	e07e      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 15:
				SYSCFG->EXTICR[3] = SYSCFG_EXTICR1_EXTI3_PD;
 8000b62:	4b5a      	ldr	r3, [pc, #360]	; (8000ccc <config_gpio_interrupt+0x540>)
 8000b64:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000b68:	615a      	str	r2, [r3, #20]
				break;
 8000b6a:	bf00      	nop
 8000b6c:	e078      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
		}
	}
	else if(port == PORTE)
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	4a59      	ldr	r2, [pc, #356]	; (8000cd8 <config_gpio_interrupt+0x54c>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d174      	bne.n	8000c60 <config_gpio_interrupt+0x4d4>
	{
		PORTE_CLOCK_EN;
 8000b76:	4a57      	ldr	r2, [pc, #348]	; (8000cd4 <config_gpio_interrupt+0x548>)
 8000b78:	4b56      	ldr	r3, [pc, #344]	; (8000cd4 <config_gpio_interrupt+0x548>)
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7c:	f043 0310 	orr.w	r3, r3, #16
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30

		switch(pinNumber)
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	2b0f      	cmp	r3, #15
 8000b86:	d86b      	bhi.n	8000c60 <config_gpio_interrupt+0x4d4>
 8000b88:	a201      	add	r2, pc, #4	; (adr r2, 8000b90 <config_gpio_interrupt+0x404>)
 8000b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b8e:	bf00      	nop
 8000b90:	08000bd1 	.word	0x08000bd1
 8000b94:	08000bd9 	.word	0x08000bd9
 8000b98:	08000be1 	.word	0x08000be1
 8000b9c:	08000beb 	.word	0x08000beb
 8000ba0:	08000bf5 	.word	0x08000bf5
 8000ba4:	08000bfd 	.word	0x08000bfd
 8000ba8:	08000c05 	.word	0x08000c05
 8000bac:	08000c0f 	.word	0x08000c0f
 8000bb0:	08000c19 	.word	0x08000c19
 8000bb4:	08000c21 	.word	0x08000c21
 8000bb8:	08000c29 	.word	0x08000c29
 8000bbc:	08000c33 	.word	0x08000c33
 8000bc0:	08000c3d 	.word	0x08000c3d
 8000bc4:	08000c45 	.word	0x08000c45
 8000bc8:	08000c4d 	.word	0x08000c4d
 8000bcc:	08000c57 	.word	0x08000c57
		{
			case 0:
				SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PE;
 8000bd0:	4b3e      	ldr	r3, [pc, #248]	; (8000ccc <config_gpio_interrupt+0x540>)
 8000bd2:	2204      	movs	r2, #4
 8000bd4:	609a      	str	r2, [r3, #8]
				break;
 8000bd6:	e043      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 1:
				SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI1_PE;
 8000bd8:	4b3c      	ldr	r3, [pc, #240]	; (8000ccc <config_gpio_interrupt+0x540>)
 8000bda:	2240      	movs	r2, #64	; 0x40
 8000bdc:	609a      	str	r2, [r3, #8]
				break;
 8000bde:	e03f      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 2:
				SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI2_PE;
 8000be0:	4b3a      	ldr	r3, [pc, #232]	; (8000ccc <config_gpio_interrupt+0x540>)
 8000be2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000be6:	609a      	str	r2, [r3, #8]
				break;
 8000be8:	e03a      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 3:
				SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI3_PE;
 8000bea:	4b38      	ldr	r3, [pc, #224]	; (8000ccc <config_gpio_interrupt+0x540>)
 8000bec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bf0:	609a      	str	r2, [r3, #8]
				break;
 8000bf2:	e035      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 4:
				SYSCFG->EXTICR[1] = SYSCFG_EXTICR1_EXTI0_PE;
 8000bf4:	4b35      	ldr	r3, [pc, #212]	; (8000ccc <config_gpio_interrupt+0x540>)
 8000bf6:	2204      	movs	r2, #4
 8000bf8:	60da      	str	r2, [r3, #12]
				break;
 8000bfa:	e031      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 5:
				SYSCFG->EXTICR[1] = SYSCFG_EXTICR1_EXTI1_PE;
 8000bfc:	4b33      	ldr	r3, [pc, #204]	; (8000ccc <config_gpio_interrupt+0x540>)
 8000bfe:	2240      	movs	r2, #64	; 0x40
 8000c00:	60da      	str	r2, [r3, #12]
				break;
 8000c02:	e02d      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 6:
				SYSCFG->EXTICR[1] = SYSCFG_EXTICR1_EXTI2_PE;
 8000c04:	4b31      	ldr	r3, [pc, #196]	; (8000ccc <config_gpio_interrupt+0x540>)
 8000c06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c0a:	60da      	str	r2, [r3, #12]
				break;
 8000c0c:	e028      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 7:
				SYSCFG->EXTICR[1] = SYSCFG_EXTICR1_EXTI3_PE;
 8000c0e:	4b2f      	ldr	r3, [pc, #188]	; (8000ccc <config_gpio_interrupt+0x540>)
 8000c10:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c14:	60da      	str	r2, [r3, #12]
				break;
 8000c16:	e023      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 8:
				SYSCFG->EXTICR[2] = SYSCFG_EXTICR1_EXTI0_PE;
 8000c18:	4b2c      	ldr	r3, [pc, #176]	; (8000ccc <config_gpio_interrupt+0x540>)
 8000c1a:	2204      	movs	r2, #4
 8000c1c:	611a      	str	r2, [r3, #16]
				break;
 8000c1e:	e01f      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 9:
				SYSCFG->EXTICR[2] = SYSCFG_EXTICR1_EXTI1_PE;
 8000c20:	4b2a      	ldr	r3, [pc, #168]	; (8000ccc <config_gpio_interrupt+0x540>)
 8000c22:	2240      	movs	r2, #64	; 0x40
 8000c24:	611a      	str	r2, [r3, #16]
				break;
 8000c26:	e01b      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 10:
				SYSCFG->EXTICR[2] = SYSCFG_EXTICR1_EXTI2_PE;
 8000c28:	4b28      	ldr	r3, [pc, #160]	; (8000ccc <config_gpio_interrupt+0x540>)
 8000c2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c2e:	611a      	str	r2, [r3, #16]
				break;
 8000c30:	e016      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 11:
				SYSCFG->EXTICR[2] = SYSCFG_EXTICR1_EXTI3_PE;
 8000c32:	4b26      	ldr	r3, [pc, #152]	; (8000ccc <config_gpio_interrupt+0x540>)
 8000c34:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c38:	611a      	str	r2, [r3, #16]
				break;
 8000c3a:	e011      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 12:
				SYSCFG->EXTICR[3] = SYSCFG_EXTICR1_EXTI0_PE;
 8000c3c:	4b23      	ldr	r3, [pc, #140]	; (8000ccc <config_gpio_interrupt+0x540>)
 8000c3e:	2204      	movs	r2, #4
 8000c40:	615a      	str	r2, [r3, #20]
				break;
 8000c42:	e00d      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 13:
				SYSCFG->EXTICR[3] = SYSCFG_EXTICR1_EXTI1_PE;
 8000c44:	4b21      	ldr	r3, [pc, #132]	; (8000ccc <config_gpio_interrupt+0x540>)
 8000c46:	2240      	movs	r2, #64	; 0x40
 8000c48:	615a      	str	r2, [r3, #20]
				break;
 8000c4a:	e009      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 14:
				SYSCFG->EXTICR[3] = SYSCFG_EXTICR1_EXTI2_PE;
 8000c4c:	4b1f      	ldr	r3, [pc, #124]	; (8000ccc <config_gpio_interrupt+0x540>)
 8000c4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c52:	615a      	str	r2, [r3, #20]
				break;
 8000c54:	e004      	b.n	8000c60 <config_gpio_interrupt+0x4d4>
			case 15:
				SYSCFG->EXTICR[3] = SYSCFG_EXTICR1_EXTI3_PE;
 8000c56:	4b1d      	ldr	r3, [pc, #116]	; (8000ccc <config_gpio_interrupt+0x540>)
 8000c58:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c5c:	615a      	str	r2, [r3, #20]
				break;
 8000c5e:	bf00      	nop
		}
	}

	if(edge == RISING_EDGE)
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d109      	bne.n	8000c7a <config_gpio_interrupt+0x4ee>
	{
		SETBIT(EXTI->RTSR,pinNumber);
 8000c66:	491d      	ldr	r1, [pc, #116]	; (8000cdc <config_gpio_interrupt+0x550>)
 8000c68:	4b1c      	ldr	r3, [pc, #112]	; (8000cdc <config_gpio_interrupt+0x550>)
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	68ba      	ldr	r2, [r7, #8]
 8000c70:	fa00 f202 	lsl.w	r2, r0, r2
 8000c74:	4313      	orrs	r3, r2
 8000c76:	608b      	str	r3, [r1, #8]
	else if(edge == RISING_FALLING_EDGE)
	{
		SETBIT(EXTI->RTSR,pinNumber);
		SETBIT(EXTI->FTSR,pinNumber);
	}
}
 8000c78:	e021      	b.n	8000cbe <config_gpio_interrupt+0x532>
	else if(edge == FALLING_EDGE)
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d109      	bne.n	8000c94 <config_gpio_interrupt+0x508>
		SETBIT(EXTI->FTSR,pinNumber);
 8000c80:	4916      	ldr	r1, [pc, #88]	; (8000cdc <config_gpio_interrupt+0x550>)
 8000c82:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <config_gpio_interrupt+0x550>)
 8000c84:	68db      	ldr	r3, [r3, #12]
 8000c86:	2001      	movs	r0, #1
 8000c88:	68ba      	ldr	r2, [r7, #8]
 8000c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	60cb      	str	r3, [r1, #12]
}
 8000c92:	e014      	b.n	8000cbe <config_gpio_interrupt+0x532>
	else if(edge == RISING_FALLING_EDGE)
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	2b02      	cmp	r3, #2
 8000c98:	d111      	bne.n	8000cbe <config_gpio_interrupt+0x532>
		SETBIT(EXTI->RTSR,pinNumber);
 8000c9a:	4910      	ldr	r1, [pc, #64]	; (8000cdc <config_gpio_interrupt+0x550>)
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <config_gpio_interrupt+0x550>)
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	68ba      	ldr	r2, [r7, #8]
 8000ca4:	fa00 f202 	lsl.w	r2, r0, r2
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	608b      	str	r3, [r1, #8]
		SETBIT(EXTI->FTSR,pinNumber);
 8000cac:	490b      	ldr	r1, [pc, #44]	; (8000cdc <config_gpio_interrupt+0x550>)
 8000cae:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <config_gpio_interrupt+0x550>)
 8000cb0:	68db      	ldr	r3, [r3, #12]
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	68ba      	ldr	r2, [r7, #8]
 8000cb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	60cb      	str	r3, [r1, #12]
}
 8000cbe:	bf00      	nop
 8000cc0:	3714      	adds	r7, #20
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	40013800 	.word	0x40013800
 8000cd0:	40020c00 	.word	0x40020c00
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	40013c00 	.word	0x40013c00

08000ce0 <enable_gpio_interrupt>:



void enable_gpio_interrupt(uint32_t pinNumber, IRQn_Type irq_number)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	460b      	mov	r3, r1
 8000cea:	70fb      	strb	r3, [r7, #3]
	// enable interrupt in EXTI
	SETBIT(EXTI->IMR,pinNumber);
 8000cec:	4908      	ldr	r1, [pc, #32]	; (8000d10 <enable_gpio_interrupt+0x30>)
 8000cee:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <enable_gpio_interrupt+0x30>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	600b      	str	r3, [r1, #0]
	// enable interrupt in NVIC
	NVIC_EnableIRQ(irq_number);
 8000cfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fb54 	bl	80003b0 <NVIC_EnableIRQ>
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40013c00 	.word	0x40013c00

08000d14 <clear_interrupt>:



void clear_interrupt(uint32_t pinNumber)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	// write 1 to clear bit
	SETBIT(EXTI->PR,pinNumber);
 8000d1c:	4907      	ldr	r1, [pc, #28]	; (8000d3c <clear_interrupt+0x28>)
 8000d1e:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <clear_interrupt+0x28>)
 8000d20:	695b      	ldr	r3, [r3, #20]
 8000d22:	2001      	movs	r0, #1
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	fa00 f202 	lsl.w	r2, r0, r2
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	614b      	str	r3, [r1, #20]
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	40013c00 	.word	0x40013c00

08000d40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d78 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d44:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d46:	e003      	b.n	8000d50 <LoopCopyDataInit>

08000d48 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d48:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d4a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d4c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d4e:	3104      	adds	r1, #4

08000d50 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d50:	480b      	ldr	r0, [pc, #44]	; (8000d80 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d52:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d54:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d56:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d58:	d3f6      	bcc.n	8000d48 <CopyDataInit>
  ldr  r2, =_sbss
 8000d5a:	4a0b      	ldr	r2, [pc, #44]	; (8000d88 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d5c:	e002      	b.n	8000d64 <LoopFillZerobss>

08000d5e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d5e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d60:	f842 3b04 	str.w	r3, [r2], #4

08000d64 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d64:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d66:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d68:	d3f9      	bcc.n	8000d5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d6a:	f000 f841 	bl	8000df0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d6e:	f000 f96d 	bl	800104c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d72:	f7ff fa29 	bl	80001c8 <main>
  bx  lr    
 8000d76:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d78:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000d7c:	080010b4 	.word	0x080010b4
  ldr  r0, =_sdata
 8000d80:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d84:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8000d88:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8000d8c:	20000034 	.word	0x20000034

08000d90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d90:	e7fe      	b.n	8000d90 <ADC_IRQHandler>

08000d92 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0
}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <HardFault_Handler+0x4>

08000da6 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000daa:	e7fe      	b.n	8000daa <MemManage_Handler+0x4>

08000dac <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <BusFault_Handler+0x4>

08000db2 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000db6:	e7fe      	b.n	8000db6 <UsageFault_Handler+0x4>

08000db8 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0
}
 8000dca:	bf00      	nop
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <SysTick_Handler>:
  * @param  None
  * @retval None
  */

void SysTick_Handler(void)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	af00      	add	r7, sp, #0
	SysTick_IncrementTicks_cb();
 8000de6:	f7ff faa9 	bl	800033c <SysTick_IncrementTicks_cb>
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000df4:	4a16      	ldr	r2, [pc, #88]	; (8000e50 <SystemInit+0x60>)
 8000df6:	4b16      	ldr	r3, [pc, #88]	; (8000e50 <SystemInit+0x60>)
 8000df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000e04:	4a13      	ldr	r2, [pc, #76]	; (8000e54 <SystemInit+0x64>)
 8000e06:	4b13      	ldr	r3, [pc, #76]	; (8000e54 <SystemInit+0x64>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f043 0301 	orr.w	r3, r3, #1
 8000e0e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e10:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <SystemInit+0x64>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000e16:	4a0f      	ldr	r2, [pc, #60]	; (8000e54 <SystemInit+0x64>)
 8000e18:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <SystemInit+0x64>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000e20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e24:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000e26:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <SystemInit+0x64>)
 8000e28:	4a0b      	ldr	r2, [pc, #44]	; (8000e58 <SystemInit+0x68>)
 8000e2a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000e2c:	4a09      	ldr	r2, [pc, #36]	; (8000e54 <SystemInit+0x64>)
 8000e2e:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <SystemInit+0x64>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e36:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <SystemInit+0x64>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000e3e:	f000 f889 	bl	8000f54 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e42:	4b03      	ldr	r3, [pc, #12]	; (8000e50 <SystemInit+0x60>)
 8000e44:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e48:	609a      	str	r2, [r3, #8]
#endif
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	e000ed00 	.word	0xe000ed00
 8000e54:	40023800 	.word	0x40023800
 8000e58:	24003010 	.word	0x24003010

08000e5c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b087      	sub	sp, #28
 8000e60:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60bb      	str	r3, [r7, #8]
 8000e72:	2302      	movs	r3, #2
 8000e74:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000e76:	4b32      	ldr	r3, [pc, #200]	; (8000f40 <SystemCoreClockUpdate+0xe4>)
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	f003 030c 	and.w	r3, r3, #12
 8000e7e:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	2b04      	cmp	r3, #4
 8000e84:	d007      	beq.n	8000e96 <SystemCoreClockUpdate+0x3a>
 8000e86:	2b08      	cmp	r3, #8
 8000e88:	d009      	beq.n	8000e9e <SystemCoreClockUpdate+0x42>
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d13d      	bne.n	8000f0a <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000e8e:	4b2d      	ldr	r3, [pc, #180]	; (8000f44 <SystemCoreClockUpdate+0xe8>)
 8000e90:	4a2d      	ldr	r2, [pc, #180]	; (8000f48 <SystemCoreClockUpdate+0xec>)
 8000e92:	601a      	str	r2, [r3, #0]
      break;
 8000e94:	e03d      	b.n	8000f12 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000e96:	4b2b      	ldr	r3, [pc, #172]	; (8000f44 <SystemCoreClockUpdate+0xe8>)
 8000e98:	4a2c      	ldr	r2, [pc, #176]	; (8000f4c <SystemCoreClockUpdate+0xf0>)
 8000e9a:	601a      	str	r2, [r3, #0]
      break;
 8000e9c:	e039      	b.n	8000f12 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000e9e:	4b28      	ldr	r3, [pc, #160]	; (8000f40 <SystemCoreClockUpdate+0xe4>)
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	0d9b      	lsrs	r3, r3, #22
 8000ea4:	f003 0301 	and.w	r3, r3, #1
 8000ea8:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000eaa:	4b25      	ldr	r3, [pc, #148]	; (8000f40 <SystemCoreClockUpdate+0xe4>)
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000eb2:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d00c      	beq.n	8000ed4 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000eba:	4a24      	ldr	r2, [pc, #144]	; (8000f4c <SystemCoreClockUpdate+0xf0>)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ec2:	4a1f      	ldr	r2, [pc, #124]	; (8000f40 <SystemCoreClockUpdate+0xe4>)
 8000ec4:	6852      	ldr	r2, [r2, #4]
 8000ec6:	0992      	lsrs	r2, r2, #6
 8000ec8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000ecc:	fb02 f303 	mul.w	r3, r2, r3
 8000ed0:	617b      	str	r3, [r7, #20]
 8000ed2:	e00b      	b.n	8000eec <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000ed4:	4a1c      	ldr	r2, [pc, #112]	; (8000f48 <SystemCoreClockUpdate+0xec>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000edc:	4a18      	ldr	r2, [pc, #96]	; (8000f40 <SystemCoreClockUpdate+0xe4>)
 8000ede:	6852      	ldr	r2, [r2, #4]
 8000ee0:	0992      	lsrs	r2, r2, #6
 8000ee2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000ee6:	fb02 f303 	mul.w	r3, r2, r3
 8000eea:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000eec:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <SystemCoreClockUpdate+0xe4>)
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	0c1b      	lsrs	r3, r3, #16
 8000ef2:	f003 0303 	and.w	r3, r3, #3
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000efc:	697a      	ldr	r2, [r7, #20]
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f04:	4a0f      	ldr	r2, [pc, #60]	; (8000f44 <SystemCoreClockUpdate+0xe8>)
 8000f06:	6013      	str	r3, [r2, #0]
      break;
 8000f08:	e003      	b.n	8000f12 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <SystemCoreClockUpdate+0xe8>)
 8000f0c:	4a0e      	ldr	r2, [pc, #56]	; (8000f48 <SystemCoreClockUpdate+0xec>)
 8000f0e:	601a      	str	r2, [r3, #0]
      break;
 8000f10:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000f12:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <SystemCoreClockUpdate+0xe4>)
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	091b      	lsrs	r3, r3, #4
 8000f18:	f003 030f 	and.w	r3, r3, #15
 8000f1c:	4a0c      	ldr	r2, [pc, #48]	; (8000f50 <SystemCoreClockUpdate+0xf4>)
 8000f1e:	5cd3      	ldrb	r3, [r2, r3]
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000f24:	4b07      	ldr	r3, [pc, #28]	; (8000f44 <SystemCoreClockUpdate+0xe8>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8000f2e:	4a05      	ldr	r2, [pc, #20]	; (8000f44 <SystemCoreClockUpdate+0xe8>)
 8000f30:	6013      	str	r3, [r2, #0]
}
 8000f32:	bf00      	nop
 8000f34:	371c      	adds	r7, #28
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	40023800 	.word	0x40023800
 8000f44:	20000000 	.word	0x20000000
 8000f48:	00f42400 	.word	0x00f42400
 8000f4c:	017d7840 	.word	0x017d7840
 8000f50:	20000004 	.word	0x20000004

08000f54 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	2300      	movs	r3, #0
 8000f60:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000f62:	4a36      	ldr	r2, [pc, #216]	; (800103c <SetSysClock+0xe8>)
 8000f64:	4b35      	ldr	r3, [pc, #212]	; (800103c <SetSysClock+0xe8>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f6c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000f6e:	4b33      	ldr	r3, [pc, #204]	; (800103c <SetSysClock+0xe8>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f76:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d103      	bne.n	8000f8c <SetSysClock+0x38>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000f8a:	d1f0      	bne.n	8000f6e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000f8c:	4b2b      	ldr	r3, [pc, #172]	; (800103c <SetSysClock+0xe8>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d002      	beq.n	8000f9e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	603b      	str	r3, [r7, #0]
 8000f9c:	e001      	b.n	8000fa2 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d142      	bne.n	800102e <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000fa8:	4a24      	ldr	r2, [pc, #144]	; (800103c <SetSysClock+0xe8>)
 8000faa:	4b24      	ldr	r3, [pc, #144]	; (800103c <SetSysClock+0xe8>)
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb2:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000fb4:	4a22      	ldr	r2, [pc, #136]	; (8001040 <SetSysClock+0xec>)
 8000fb6:	4b22      	ldr	r3, [pc, #136]	; (8001040 <SetSysClock+0xec>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fbe:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000fc0:	4a1e      	ldr	r2, [pc, #120]	; (800103c <SetSysClock+0xe8>)
 8000fc2:	4b1e      	ldr	r3, [pc, #120]	; (800103c <SetSysClock+0xe8>)
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000fc8:	4a1c      	ldr	r2, [pc, #112]	; (800103c <SetSysClock+0xe8>)
 8000fca:	4b1c      	ldr	r3, [pc, #112]	; (800103c <SetSysClock+0xe8>)
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fd2:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000fd4:	4a19      	ldr	r2, [pc, #100]	; (800103c <SetSysClock+0xe8>)
 8000fd6:	4b19      	ldr	r3, [pc, #100]	; (800103c <SetSysClock+0xe8>)
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000fde:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000fe0:	4b16      	ldr	r3, [pc, #88]	; (800103c <SetSysClock+0xe8>)
 8000fe2:	4a18      	ldr	r2, [pc, #96]	; (8001044 <SetSysClock+0xf0>)
 8000fe4:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000fe6:	4a15      	ldr	r2, [pc, #84]	; (800103c <SetSysClock+0xe8>)
 8000fe8:	4b14      	ldr	r3, [pc, #80]	; (800103c <SetSysClock+0xe8>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ff0:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000ff2:	bf00      	nop
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <SetSysClock+0xe8>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d0f9      	beq.n	8000ff4 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <SetSysClock+0xf4>)
 8001002:	f240 7205 	movw	r2, #1797	; 0x705
 8001006:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001008:	4a0c      	ldr	r2, [pc, #48]	; (800103c <SetSysClock+0xe8>)
 800100a:	4b0c      	ldr	r3, [pc, #48]	; (800103c <SetSysClock+0xe8>)
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	f023 0303 	bic.w	r3, r3, #3
 8001012:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001014:	4a09      	ldr	r2, [pc, #36]	; (800103c <SetSysClock+0xe8>)
 8001016:	4b09      	ldr	r3, [pc, #36]	; (800103c <SetSysClock+0xe8>)
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	f043 0302 	orr.w	r3, r3, #2
 800101e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001020:	bf00      	nop
 8001022:	4b06      	ldr	r3, [pc, #24]	; (800103c <SetSysClock+0xe8>)
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	f003 030c 	and.w	r3, r3, #12
 800102a:	2b08      	cmp	r3, #8
 800102c:	d1f9      	bne.n	8001022 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	40023800 	.word	0x40023800
 8001040:	40007000 	.word	0x40007000
 8001044:	07405419 	.word	0x07405419
 8001048:	40023c00 	.word	0x40023c00

0800104c <__libc_init_array>:
 800104c:	b570      	push	{r4, r5, r6, lr}
 800104e:	4e0d      	ldr	r6, [pc, #52]	; (8001084 <__libc_init_array+0x38>)
 8001050:	4c0d      	ldr	r4, [pc, #52]	; (8001088 <__libc_init_array+0x3c>)
 8001052:	1ba4      	subs	r4, r4, r6
 8001054:	10a4      	asrs	r4, r4, #2
 8001056:	2500      	movs	r5, #0
 8001058:	42a5      	cmp	r5, r4
 800105a:	d109      	bne.n	8001070 <__libc_init_array+0x24>
 800105c:	4e0b      	ldr	r6, [pc, #44]	; (800108c <__libc_init_array+0x40>)
 800105e:	4c0c      	ldr	r4, [pc, #48]	; (8001090 <__libc_init_array+0x44>)
 8001060:	f000 f818 	bl	8001094 <_init>
 8001064:	1ba4      	subs	r4, r4, r6
 8001066:	10a4      	asrs	r4, r4, #2
 8001068:	2500      	movs	r5, #0
 800106a:	42a5      	cmp	r5, r4
 800106c:	d105      	bne.n	800107a <__libc_init_array+0x2e>
 800106e:	bd70      	pop	{r4, r5, r6, pc}
 8001070:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001074:	4798      	blx	r3
 8001076:	3501      	adds	r5, #1
 8001078:	e7ee      	b.n	8001058 <__libc_init_array+0xc>
 800107a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800107e:	4798      	blx	r3
 8001080:	3501      	adds	r5, #1
 8001082:	e7f2      	b.n	800106a <__libc_init_array+0x1e>
 8001084:	080010ac 	.word	0x080010ac
 8001088:	080010ac 	.word	0x080010ac
 800108c:	080010ac 	.word	0x080010ac
 8001090:	080010b0 	.word	0x080010b0

08001094 <_init>:
 8001094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001096:	bf00      	nop
 8001098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800109a:	bc08      	pop	{r3}
 800109c:	469e      	mov	lr, r3
 800109e:	4770      	bx	lr

080010a0 <_fini>:
 80010a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010a2:	bf00      	nop
 80010a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010a6:	bc08      	pop	{r3}
 80010a8:	469e      	mov	lr, r3
 80010aa:	4770      	bx	lr
