
Section_2_interrupts.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010cc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001254  08001254  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08001254  08001254  00011254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001258  08001258  00011258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  0800125c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
  7 .bss          00000020  20000014  20000014  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000034  20000034  00020014  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   000023e0  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000082b  00000000  00000000  00022424  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000001c0  00000000  00000000  00022c50  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000168  00000000  00000000  00022e10  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00000cae  00000000  00000000  00022f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00000c5e  00000000  00000000  00023c26  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00024884  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000554  00000000  00000000  00024900  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00024e54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800123c 	.word	0x0800123c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	0800123c 	.word	0x0800123c

080001c8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80001d2:	4909      	ldr	r1, [pc, #36]	; (80001f8 <NVIC_EnableIRQ+0x30>)
 80001d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d8:	095b      	lsrs	r3, r3, #5
 80001da:	79fa      	ldrb	r2, [r7, #7]
 80001dc:	f002 021f 	and.w	r2, r2, #31
 80001e0:	2001      	movs	r0, #1
 80001e2:	fa00 f202 	lsl.w	r2, r0, r2
 80001e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80001ea:	bf00      	nop
 80001ec:	370c      	adds	r7, #12
 80001ee:	46bd      	mov	sp, r7
 80001f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	e000e100 	.word	0xe000e100

080001fc <NVIC_SetPendingIRQ>:
    The function sets the pending bit of an external interrupt.

    \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
 8000202:	4603      	mov	r3, r0
 8000204:	71fb      	strb	r3, [r7, #7]
  NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
 8000206:	4909      	ldr	r1, [pc, #36]	; (800022c <NVIC_SetPendingIRQ+0x30>)
 8000208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800020c:	095b      	lsrs	r3, r3, #5
 800020e:	79fa      	ldrb	r2, [r7, #7]
 8000210:	f002 021f 	and.w	r2, r2, #31
 8000214:	2001      	movs	r0, #1
 8000216:	fa00 f202 	lsl.w	r2, r0, r2
 800021a:	3340      	adds	r3, #64	; 0x40
 800021c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000220:	bf00      	nop
 8000222:	370c      	adds	r7, #12
 8000224:	46bd      	mov	sp, r7
 8000226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022a:	4770      	bx	lr
 800022c:	e000e100 	.word	0xe000e100

08000230 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
 8000236:	4603      	mov	r3, r0
 8000238:	6039      	str	r1, [r7, #0]
 800023a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 800023c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000240:	2b00      	cmp	r3, #0
 8000242:	da0b      	bge.n	800025c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000244:	490d      	ldr	r1, [pc, #52]	; (800027c <NVIC_SetPriority+0x4c>)
 8000246:	79fb      	ldrb	r3, [r7, #7]
 8000248:	f003 030f 	and.w	r3, r3, #15
 800024c:	3b04      	subs	r3, #4
 800024e:	683a      	ldr	r2, [r7, #0]
 8000250:	b2d2      	uxtb	r2, r2
 8000252:	0112      	lsls	r2, r2, #4
 8000254:	b2d2      	uxtb	r2, r2
 8000256:	440b      	add	r3, r1
 8000258:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 800025a:	e009      	b.n	8000270 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800025c:	4908      	ldr	r1, [pc, #32]	; (8000280 <NVIC_SetPriority+0x50>)
 800025e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000262:	683a      	ldr	r2, [r7, #0]
 8000264:	b2d2      	uxtb	r2, r2
 8000266:	0112      	lsls	r2, r2, #4
 8000268:	b2d2      	uxtb	r2, r2
 800026a:	440b      	add	r3, r1
 800026c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000270:	bf00      	nop
 8000272:	370c      	adds	r7, #12
 8000274:	46bd      	mov	sp, r7
 8000276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027a:	4770      	bx	lr
 800027c:	e000ed00 	.word	0xe000ed00
 8000280:	e000e100 	.word	0xe000e100

08000284 <main>:
#include "include/gpio.h"



int main(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b094      	sub	sp, #80	; 0x50
 8000288:	af02      	add	r7, sp, #8
	SysTick_Init();
 800028a:	f000 f8f1 	bl	8000470 <SysTick_Init>


	GPIO_TYPE tp;
	tp.port = PORTA;
 800028e:	4b31      	ldr	r3, [pc, #196]	; (8000354 <main+0xd0>)
 8000290:	633b      	str	r3, [r7, #48]	; 0x30
	tp.pin = 6;
 8000292:	2306      	movs	r3, #6
 8000294:	637b      	str	r3, [r7, #52]	; 0x34
	tp.mode = OUTPUT_PUSH_PULL;
 8000296:	2301      	movs	r3, #1
 8000298:	63bb      	str	r3, [r7, #56]	; 0x38
	tp.speed = VERY_HIGH_SPEED;
 800029a:	2303      	movs	r3, #3
 800029c:	643b      	str	r3, [r7, #64]	; 0x40
	gpio_init(tp);
 800029e:	466a      	mov	r2, sp
 80002a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80002a4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80002a8:	e882 0003 	stmia.w	r2, {r0, r1}
 80002ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002b2:	f000 fac5 	bl	8000840 <gpio_init>

	GPIO_TYPE on;
	on.port = PORTC;
 80002b6:	4b28      	ldr	r3, [pc, #160]	; (8000358 <main+0xd4>)
 80002b8:	61bb      	str	r3, [r7, #24]
	on.pin = 1;
 80002ba:	2301      	movs	r3, #1
 80002bc:	61fb      	str	r3, [r7, #28]
	on.mode = INPUT_MODE;
 80002be:	2300      	movs	r3, #0
 80002c0:	623b      	str	r3, [r7, #32]
	on.pull = PULL_UP;
 80002c2:	2301      	movs	r3, #1
 80002c4:	627b      	str	r3, [r7, #36]	; 0x24
	gpio_init(on);
 80002c6:	466a      	mov	r2, sp
 80002c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80002d0:	e882 0003 	stmia.w	r2, {r0, r1}
 80002d4:	f107 0318 	add.w	r3, r7, #24
 80002d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002da:	f000 fab1 	bl	8000840 <gpio_init>


	GPIO_TYPE op;
	op.port = PORTA;
 80002de:	4b1d      	ldr	r3, [pc, #116]	; (8000354 <main+0xd0>)
 80002e0:	603b      	str	r3, [r7, #0]
	op.pin = 5;
 80002e2:	2305      	movs	r3, #5
 80002e4:	607b      	str	r3, [r7, #4]
	op.mode = OUTPUT_PUSH_PULL;
 80002e6:	2301      	movs	r3, #1
 80002e8:	60bb      	str	r3, [r7, #8]
	op.speed = VERY_HIGH_SPEED;
 80002ea:	2303      	movs	r3, #3
 80002ec:	613b      	str	r3, [r7, #16]
	gpio_init(op);
 80002ee:	466a      	mov	r2, sp
 80002f0:	f107 0310 	add.w	r3, r7, #16
 80002f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80002f8:	e882 0003 	stmia.w	r2, {r0, r1}
 80002fc:	463b      	mov	r3, r7
 80002fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000300:	f000 fa9e 	bl	8000840 <gpio_init>

	// create External GPIO triggered interrupt EXTI1_IRQn
	config_gpio_interrupt(on.port,on.pin,RISING_EDGE);
 8000304:	69bb      	ldr	r3, [r7, #24]
 8000306:	69f9      	ldr	r1, [r7, #28]
 8000308:	2200      	movs	r2, #0
 800030a:	4618      	mov	r0, r3
 800030c:	f000 faf0 	bl	80008f0 <config_gpio_interrupt>
	enable_gpio_interrupt(on.pin,EXTI1_IRQn,1);
 8000310:	69fb      	ldr	r3, [r7, #28]
 8000312:	2201      	movs	r2, #1
 8000314:	2107      	movs	r1, #7
 8000316:	4618      	mov	r0, r3
 8000318:	f000 fd94 	bl	8000e44 <enable_gpio_interrupt>

	// create software triggered interrupt EXTI2_IRQn EXTI3_IRQn
	NVIC_SetPriority(EXTI2_IRQn,2);
 800031c:	2102      	movs	r1, #2
 800031e:	2008      	movs	r0, #8
 8000320:	f7ff ff86 	bl	8000230 <NVIC_SetPriority>
	NVIC_SetPriority(EXTI3_IRQn,3);
 8000324:	2103      	movs	r1, #3
 8000326:	2009      	movs	r0, #9
 8000328:	f7ff ff82 	bl	8000230 <NVIC_SetPriority>

	NVIC_EnableIRQ(EXTI2_IRQn);
 800032c:	2008      	movs	r0, #8
 800032e:	f7ff ff4b 	bl	80001c8 <NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI3_IRQn);
 8000332:	2009      	movs	r0, #9
 8000334:	f7ff ff48 	bl	80001c8 <NVIC_EnableIRQ>

	while (1)
	{

		NVIC_SetPendingIRQ(EXTI2_IRQn);
 8000338:	2008      	movs	r0, #8
 800033a:	f7ff ff5f 	bl	80001fc <NVIC_SetPendingIRQ>
		SysTick_Delay(100);
 800033e:	2064      	movs	r0, #100	; 0x64
 8000340:	f000 f87e 	bl	8000440 <SysTick_Delay>
		NVIC_SetPendingIRQ(EXTI3_IRQn);
 8000344:	2009      	movs	r0, #9
 8000346:	f7ff ff59 	bl	80001fc <NVIC_SetPendingIRQ>
		SysTick_Delay(100);
 800034a:	2064      	movs	r0, #100	; 0x64
 800034c:	f000 f878 	bl	8000440 <SysTick_Delay>
		NVIC_SetPendingIRQ(EXTI2_IRQn);
 8000350:	e7f2      	b.n	8000338 <main+0xb4>
 8000352:	bf00      	nop
 8000354:	40020000 	.word	0x40020000
 8000358:	40020800 	.word	0x40020800

0800035c <EXTI1_IRQHandler>:
	}
}


void EXTI1_IRQHandler(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR1)
 8000360:	4b08      	ldr	r3, [pc, #32]	; (8000384 <EXTI1_IRQHandler+0x28>)
 8000362:	695b      	ldr	r3, [r3, #20]
 8000364:	f003 0302 	and.w	r3, r3, #2
 8000368:	2b00      	cmp	r3, #0
 800036a:	d008      	beq.n	800037e <EXTI1_IRQHandler+0x22>
	{
        PORTA->ODR ^= (1 << 5);
 800036c:	4a06      	ldr	r2, [pc, #24]	; (8000388 <EXTI1_IRQHandler+0x2c>)
 800036e:	4b06      	ldr	r3, [pc, #24]	; (8000388 <EXTI1_IRQHandler+0x2c>)
 8000370:	695b      	ldr	r3, [r3, #20]
 8000372:	f083 0320 	eor.w	r3, r3, #32
 8000376:	6153      	str	r3, [r2, #20]
		clear_interrupt(1);
 8000378:	2001      	movs	r0, #1
 800037a:	f000 fd87 	bl	8000e8c <clear_interrupt>
	}
}
 800037e:	bf00      	nop
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	40013c00 	.word	0x40013c00
 8000388:	40020000 	.word	0x40020000

0800038c <NVIC_SetPriority>:
{
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
 8000392:	4603      	mov	r3, r0
 8000394:	6039      	str	r1, [r7, #0]
 8000396:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800039c:	2b00      	cmp	r3, #0
 800039e:	da0b      	bge.n	80003b8 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80003a0:	490d      	ldr	r1, [pc, #52]	; (80003d8 <NVIC_SetPriority+0x4c>)
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	f003 030f 	and.w	r3, r3, #15
 80003a8:	3b04      	subs	r3, #4
 80003aa:	683a      	ldr	r2, [r7, #0]
 80003ac:	b2d2      	uxtb	r2, r2
 80003ae:	0112      	lsls	r2, r2, #4
 80003b0:	b2d2      	uxtb	r2, r2
 80003b2:	440b      	add	r3, r1
 80003b4:	761a      	strb	r2, [r3, #24]
}
 80003b6:	e009      	b.n	80003cc <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80003b8:	4908      	ldr	r1, [pc, #32]	; (80003dc <NVIC_SetPriority+0x50>)
 80003ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003be:	683a      	ldr	r2, [r7, #0]
 80003c0:	b2d2      	uxtb	r2, r2
 80003c2:	0112      	lsls	r2, r2, #4
 80003c4:	b2d2      	uxtb	r2, r2
 80003c6:	440b      	add	r3, r1
 80003c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80003cc:	bf00      	nop
 80003ce:	370c      	adds	r7, #12
 80003d0:	46bd      	mov	sp, r7
 80003d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d6:	4770      	bx	lr
 80003d8:	e000ed00 	.word	0xe000ed00
 80003dc:	e000e100 	.word	0xe000e100

080003e0 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003ee:	d301      	bcc.n	80003f4 <SysTick_Config+0x14>
 80003f0:	2301      	movs	r3, #1
 80003f2:	e011      	b.n	8000418 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80003f4:	4a0a      	ldr	r2, [pc, #40]	; (8000420 <SysTick_Config+0x40>)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80003fc:	3b01      	subs	r3, #1
 80003fe:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8000400:	210f      	movs	r1, #15
 8000402:	f04f 30ff 	mov.w	r0, #4294967295
 8000406:	f7ff ffc1 	bl	800038c <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800040a:	4b05      	ldr	r3, [pc, #20]	; (8000420 <SysTick_Config+0x40>)
 800040c:	2200      	movs	r2, #0
 800040e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000410:	4b03      	ldr	r3, [pc, #12]	; (8000420 <SysTick_Config+0x40>)
 8000412:	2207      	movs	r2, #7
 8000414:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000416:	2300      	movs	r3, #0
}
 8000418:	4618      	mov	r0, r3
 800041a:	3708      	adds	r7, #8
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	e000e010 	.word	0xe000e010

08000424 <SysTick_IncrementTicks_cb>:
* Purpose      : Increment SysTick counter callback
* Parameters   : void
* Return value : void
*****************************************************************************/
void SysTick_IncrementTicks_cb(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  ++SysTickCounter;
 8000428:	4b04      	ldr	r3, [pc, #16]	; (800043c <SysTick_IncrementTicks_cb+0x18>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	3301      	adds	r3, #1
 800042e:	4a03      	ldr	r2, [pc, #12]	; (800043c <SysTick_IncrementTicks_cb+0x18>)
 8000430:	6013      	str	r3, [r2, #0]
}
 8000432:	bf00      	nop
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr
 800043c:	20000030 	.word	0x20000030

08000440 <SysTick_Delay>:
* Purpose      : SysTick will be update with IRQ callback
* Parameters   : uint32_t wait_time_ms
* Return value : void
*****************************************************************************/
void SysTick_Delay(uint32_t wait_time_ms)
{
 8000440:	b480      	push	{r7}
 8000442:	b085      	sub	sp, #20
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  /* Store start tick */
  uint32_t startTick = SysTickCounter;
 8000448:	4b08      	ldr	r3, [pc, #32]	; (800046c <SysTick_Delay+0x2c>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	60fb      	str	r3, [r7, #12]

  /* Loop until timeout */
  while((SysTickCounter - startTick) < wait_time_ms)
 800044e:	bf00      	nop
 8000450:	4b06      	ldr	r3, [pc, #24]	; (800046c <SysTick_Delay+0x2c>)
 8000452:	681a      	ldr	r2, [r3, #0]
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	1ad2      	subs	r2, r2, r3
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	429a      	cmp	r2, r3
 800045c:	d3f8      	bcc.n	8000450 <SysTick_Delay+0x10>
  {

  }
}
 800045e:	bf00      	nop
 8000460:	3714      	adds	r7, #20
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	20000030 	.word	0x20000030

08000470 <SysTick_Init>:
* Purpose      : SysTick initial configuration
* Parameters   : void
* Return value : void
*****************************************************************************/
void SysTick_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
  /* Update clock configuration */
  SystemCoreClockUpdate();
 8000474:	f000 fdc6 	bl	8001004 <SystemCoreClockUpdate>

  /* Configure SysTick to generate an interrupt every millisecond */
  SysTick_Config(SystemCoreClock / 1000);
 8000478:	4b05      	ldr	r3, [pc, #20]	; (8000490 <SysTick_Init+0x20>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a05      	ldr	r2, [pc, #20]	; (8000494 <SysTick_Init+0x24>)
 800047e:	fba2 2303 	umull	r2, r3, r2, r3
 8000482:	099b      	lsrs	r3, r3, #6
 8000484:	4618      	mov	r0, r3
 8000486:	f7ff ffab 	bl	80003e0 <SysTick_Config>
}
 800048a:	bf00      	nop
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	20000000 	.word	0x20000000
 8000494:	10624dd3 	.word	0x10624dd3

08000498 <NVIC_EnableIRQ>:
{
 8000498:	b480      	push	{r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0
 800049e:	4603      	mov	r3, r0
 80004a0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80004a2:	4909      	ldr	r1, [pc, #36]	; (80004c8 <NVIC_EnableIRQ+0x30>)
 80004a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004a8:	095b      	lsrs	r3, r3, #5
 80004aa:	79fa      	ldrb	r2, [r7, #7]
 80004ac:	f002 021f 	and.w	r2, r2, #31
 80004b0:	2001      	movs	r0, #1
 80004b2:	fa00 f202 	lsl.w	r2, r0, r2
 80004b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80004ba:	bf00      	nop
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	e000e100 	.word	0xe000e100

080004cc <NVIC_SetPriority>:
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	6039      	str	r1, [r7, #0]
 80004d6:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80004d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	da0b      	bge.n	80004f8 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80004e0:	490d      	ldr	r1, [pc, #52]	; (8000518 <NVIC_SetPriority+0x4c>)
 80004e2:	79fb      	ldrb	r3, [r7, #7]
 80004e4:	f003 030f 	and.w	r3, r3, #15
 80004e8:	3b04      	subs	r3, #4
 80004ea:	683a      	ldr	r2, [r7, #0]
 80004ec:	b2d2      	uxtb	r2, r2
 80004ee:	0112      	lsls	r2, r2, #4
 80004f0:	b2d2      	uxtb	r2, r2
 80004f2:	440b      	add	r3, r1
 80004f4:	761a      	strb	r2, [r3, #24]
}
 80004f6:	e009      	b.n	800050c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80004f8:	4908      	ldr	r1, [pc, #32]	; (800051c <NVIC_SetPriority+0x50>)
 80004fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004fe:	683a      	ldr	r2, [r7, #0]
 8000500:	b2d2      	uxtb	r2, r2
 8000502:	0112      	lsls	r2, r2, #4
 8000504:	b2d2      	uxtb	r2, r2
 8000506:	440b      	add	r3, r1
 8000508:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800050c:	bf00      	nop
 800050e:	370c      	adds	r7, #12
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr
 8000518:	e000ed00 	.word	0xe000ed00
 800051c:	e000e100 	.word	0xe000e100

08000520 <pin_config>:




static void pin_config(GPIO_TypeDef *port,uint32_t pin, uint32_t pinMode, uint32_t pull)
{
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	60f8      	str	r0, [r7, #12]
 8000528:	60b9      	str	r1, [r7, #8]
 800052a:	607a      	str	r2, [r7, #4]
 800052c:	603b      	str	r3, [r7, #0]
	switch(pinMode)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	2b04      	cmp	r3, #4
 8000532:	f200 80c8 	bhi.w	80006c6 <pin_config+0x1a6>
 8000536:	a201      	add	r2, pc, #4	; (adr r2, 800053c <pin_config+0x1c>)
 8000538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800053c:	08000551 	.word	0x08000551
 8000540:	080005e9 	.word	0x080005e9
 8000544:	0800062b 	.word	0x0800062b
 8000548:	0800066b 	.word	0x0800066b
 800054c:	08000699 	.word	0x08000699
	{
		case INPUT_MODE:
			CLRBIT(port->MODER,(pin*2));
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	68ba      	ldr	r2, [r7, #8]
 8000556:	0052      	lsls	r2, r2, #1
 8000558:	2101      	movs	r1, #1
 800055a:	fa01 f202 	lsl.w	r2, r1, r2
 800055e:	43d2      	mvns	r2, r2
 8000560:	401a      	ands	r2, r3
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	601a      	str	r2, [r3, #0]
			CLRBIT(port->MODER,((pin*2)+1));
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	68ba      	ldr	r2, [r7, #8]
 800056c:	0052      	lsls	r2, r2, #1
 800056e:	3201      	adds	r2, #1
 8000570:	2101      	movs	r1, #1
 8000572:	fa01 f202 	lsl.w	r2, r1, r2
 8000576:	43d2      	mvns	r2, r2
 8000578:	401a      	ands	r2, r3
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	601a      	str	r2, [r3, #0]
			if(pull == PULL_UP)
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	2b01      	cmp	r3, #1
 8000582:	d116      	bne.n	80005b2 <pin_config+0x92>
			{
				SETBIT(port->PUPDR,(pin*2));
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	68db      	ldr	r3, [r3, #12]
 8000588:	68ba      	ldr	r2, [r7, #8]
 800058a:	0052      	lsls	r2, r2, #1
 800058c:	2101      	movs	r1, #1
 800058e:	fa01 f202 	lsl.w	r2, r1, r2
 8000592:	431a      	orrs	r2, r3
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	60da      	str	r2, [r3, #12]
				CLRBIT(port->PUPDR,((pin*2)+1));
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	68db      	ldr	r3, [r3, #12]
 800059c:	68ba      	ldr	r2, [r7, #8]
 800059e:	0052      	lsls	r2, r2, #1
 80005a0:	3201      	adds	r2, #1
 80005a2:	2101      	movs	r1, #1
 80005a4:	fa01 f202 	lsl.w	r2, r1, r2
 80005a8:	43d2      	mvns	r2, r2
 80005aa:	401a      	ands	r2, r3
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	60da      	str	r2, [r3, #12]
			else if(pull == PULL_DOWN)
			{
				CLRBIT(port->PUPDR,(pin*2));
				SETBIT(port->PUPDR,((pin*2)+1));
			}
			break;
 80005b0:	e088      	b.n	80006c4 <pin_config+0x1a4>
			else if(pull == PULL_DOWN)
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	2b02      	cmp	r3, #2
 80005b6:	f040 8085 	bne.w	80006c4 <pin_config+0x1a4>
				CLRBIT(port->PUPDR,(pin*2));
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	68db      	ldr	r3, [r3, #12]
 80005be:	68ba      	ldr	r2, [r7, #8]
 80005c0:	0052      	lsls	r2, r2, #1
 80005c2:	2101      	movs	r1, #1
 80005c4:	fa01 f202 	lsl.w	r2, r1, r2
 80005c8:	43d2      	mvns	r2, r2
 80005ca:	401a      	ands	r2, r3
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	60da      	str	r2, [r3, #12]
				SETBIT(port->PUPDR,((pin*2)+1));
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	68db      	ldr	r3, [r3, #12]
 80005d4:	68ba      	ldr	r2, [r7, #8]
 80005d6:	0052      	lsls	r2, r2, #1
 80005d8:	3201      	adds	r2, #1
 80005da:	2101      	movs	r1, #1
 80005dc:	fa01 f202 	lsl.w	r2, r1, r2
 80005e0:	431a      	orrs	r2, r3
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	60da      	str	r2, [r3, #12]
			break;
 80005e6:	e06d      	b.n	80006c4 <pin_config+0x1a4>
		case OUTPUT_PUSH_PULL:
			SETBIT(port->MODER,(pin*2));
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	68ba      	ldr	r2, [r7, #8]
 80005ee:	0052      	lsls	r2, r2, #1
 80005f0:	2101      	movs	r1, #1
 80005f2:	fa01 f202 	lsl.w	r2, r1, r2
 80005f6:	431a      	orrs	r2, r3
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	601a      	str	r2, [r3, #0]
			CLRBIT(port->MODER,((pin*2)+1));
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	68ba      	ldr	r2, [r7, #8]
 8000602:	0052      	lsls	r2, r2, #1
 8000604:	3201      	adds	r2, #1
 8000606:	2101      	movs	r1, #1
 8000608:	fa01 f202 	lsl.w	r2, r1, r2
 800060c:	43d2      	mvns	r2, r2
 800060e:	401a      	ands	r2, r3
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	601a      	str	r2, [r3, #0]
			CLRBIT(port->OTYPER,pin);
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	685b      	ldr	r3, [r3, #4]
 8000618:	2101      	movs	r1, #1
 800061a:	68ba      	ldr	r2, [r7, #8]
 800061c:	fa01 f202 	lsl.w	r2, r1, r2
 8000620:	43d2      	mvns	r2, r2
 8000622:	401a      	ands	r2, r3
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	605a      	str	r2, [r3, #4]
			break;
 8000628:	e04d      	b.n	80006c6 <pin_config+0x1a6>
		case OUTPUT_OPEN_DRAIN:
			SETBIT(port->MODER,(pin*2));
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	68ba      	ldr	r2, [r7, #8]
 8000630:	0052      	lsls	r2, r2, #1
 8000632:	2101      	movs	r1, #1
 8000634:	fa01 f202 	lsl.w	r2, r1, r2
 8000638:	431a      	orrs	r2, r3
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	601a      	str	r2, [r3, #0]
			CLRBIT(port->MODER,((pin*2)+1));
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	68ba      	ldr	r2, [r7, #8]
 8000644:	0052      	lsls	r2, r2, #1
 8000646:	3201      	adds	r2, #1
 8000648:	2101      	movs	r1, #1
 800064a:	fa01 f202 	lsl.w	r2, r1, r2
 800064e:	43d2      	mvns	r2, r2
 8000650:	401a      	ands	r2, r3
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	601a      	str	r2, [r3, #0]
			SETBIT(port->OTYPER,pin);
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	685b      	ldr	r3, [r3, #4]
 800065a:	2101      	movs	r1, #1
 800065c:	68ba      	ldr	r2, [r7, #8]
 800065e:	fa01 f202 	lsl.w	r2, r1, r2
 8000662:	431a      	orrs	r2, r3
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	605a      	str	r2, [r3, #4]
			break;
 8000668:	e02d      	b.n	80006c6 <pin_config+0x1a6>
		case ALT_FUNC_MODE:
			CLRBIT(port->MODER,(pin*2));
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	68ba      	ldr	r2, [r7, #8]
 8000670:	0052      	lsls	r2, r2, #1
 8000672:	2101      	movs	r1, #1
 8000674:	fa01 f202 	lsl.w	r2, r1, r2
 8000678:	43d2      	mvns	r2, r2
 800067a:	401a      	ands	r2, r3
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	601a      	str	r2, [r3, #0]
			SETBIT(port->MODER,((pin*2)+1));
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	68ba      	ldr	r2, [r7, #8]
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	3201      	adds	r2, #1
 800068a:	2101      	movs	r1, #1
 800068c:	fa01 f202 	lsl.w	r2, r1, r2
 8000690:	431a      	orrs	r2, r3
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	601a      	str	r2, [r3, #0]
			break;
 8000696:	e016      	b.n	80006c6 <pin_config+0x1a6>
		case ANALOG_MODE:
			SETBIT(port->MODER,(pin*2));
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	68ba      	ldr	r2, [r7, #8]
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	2101      	movs	r1, #1
 80006a2:	fa01 f202 	lsl.w	r2, r1, r2
 80006a6:	431a      	orrs	r2, r3
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	601a      	str	r2, [r3, #0]
			SETBIT(port->MODER,((pin*2)+1));
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	68ba      	ldr	r2, [r7, #8]
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	3201      	adds	r2, #1
 80006b6:	2101      	movs	r1, #1
 80006b8:	fa01 f202 	lsl.w	r2, r1, r2
 80006bc:	431a      	orrs	r2, r3
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	601a      	str	r2, [r3, #0]
			break;
 80006c2:	e000      	b.n	80006c6 <pin_config+0x1a6>
			break;
 80006c4:	bf00      	nop
	}
}
 80006c6:	bf00      	nop
 80006c8:	3714      	adds	r7, #20
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop

080006d4 <pin_speed_config>:




static void pin_speed_config(GPIO_TypeDef *port,uint32_t pin, uint32_t speed)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	60b9      	str	r1, [r7, #8]
 80006de:	607a      	str	r2, [r7, #4]
	switch(speed)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2b03      	cmp	r3, #3
 80006e4:	d866      	bhi.n	80007b4 <pin_speed_config+0xe0>
 80006e6:	a201      	add	r2, pc, #4	; (adr r2, 80006ec <pin_speed_config+0x18>)
 80006e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ec:	080006fd 	.word	0x080006fd
 80006f0:	0800072d 	.word	0x0800072d
 80006f4:	0800075b 	.word	0x0800075b
 80006f8:	08000789 	.word	0x08000789
	{
		case LOW_SPEED:
			CLRBIT(port->OSPEEDR,(pin*2));
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	689b      	ldr	r3, [r3, #8]
 8000700:	68ba      	ldr	r2, [r7, #8]
 8000702:	0052      	lsls	r2, r2, #1
 8000704:	2101      	movs	r1, #1
 8000706:	fa01 f202 	lsl.w	r2, r1, r2
 800070a:	43d2      	mvns	r2, r2
 800070c:	401a      	ands	r2, r3
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	609a      	str	r2, [r3, #8]
			CLRBIT(port->OSPEEDR,((pin*2)+1));
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	689b      	ldr	r3, [r3, #8]
 8000716:	68ba      	ldr	r2, [r7, #8]
 8000718:	0052      	lsls	r2, r2, #1
 800071a:	3201      	adds	r2, #1
 800071c:	2101      	movs	r1, #1
 800071e:	fa01 f202 	lsl.w	r2, r1, r2
 8000722:	43d2      	mvns	r2, r2
 8000724:	401a      	ands	r2, r3
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	609a      	str	r2, [r3, #8]
			break;
 800072a:	e043      	b.n	80007b4 <pin_speed_config+0xe0>
		case MEDIUM_SPEED:
			CLRBIT(port->OSPEEDR,(pin*2));
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	689b      	ldr	r3, [r3, #8]
 8000730:	68ba      	ldr	r2, [r7, #8]
 8000732:	0052      	lsls	r2, r2, #1
 8000734:	2101      	movs	r1, #1
 8000736:	fa01 f202 	lsl.w	r2, r1, r2
 800073a:	43d2      	mvns	r2, r2
 800073c:	401a      	ands	r2, r3
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	609a      	str	r2, [r3, #8]
			SETBIT(port->OSPEEDR,((pin*2)+1));
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	689b      	ldr	r3, [r3, #8]
 8000746:	68ba      	ldr	r2, [r7, #8]
 8000748:	0052      	lsls	r2, r2, #1
 800074a:	3201      	adds	r2, #1
 800074c:	2101      	movs	r1, #1
 800074e:	fa01 f202 	lsl.w	r2, r1, r2
 8000752:	431a      	orrs	r2, r3
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	609a      	str	r2, [r3, #8]
			break;
 8000758:	e02c      	b.n	80007b4 <pin_speed_config+0xe0>
		case HIGH_SPEED:
			SETBIT(port->OSPEEDR,(pin*2));
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	689b      	ldr	r3, [r3, #8]
 800075e:	68ba      	ldr	r2, [r7, #8]
 8000760:	0052      	lsls	r2, r2, #1
 8000762:	2101      	movs	r1, #1
 8000764:	fa01 f202 	lsl.w	r2, r1, r2
 8000768:	431a      	orrs	r2, r3
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	609a      	str	r2, [r3, #8]
			CLRBIT(port->OSPEEDR,((pin*2)+1));
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	689b      	ldr	r3, [r3, #8]
 8000772:	68ba      	ldr	r2, [r7, #8]
 8000774:	0052      	lsls	r2, r2, #1
 8000776:	3201      	adds	r2, #1
 8000778:	2101      	movs	r1, #1
 800077a:	fa01 f202 	lsl.w	r2, r1, r2
 800077e:	43d2      	mvns	r2, r2
 8000780:	401a      	ands	r2, r3
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	609a      	str	r2, [r3, #8]
			break;
 8000786:	e015      	b.n	80007b4 <pin_speed_config+0xe0>
		case VERY_HIGH_SPEED:
			SETBIT(port->OSPEEDR,(pin*2));
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	689b      	ldr	r3, [r3, #8]
 800078c:	68ba      	ldr	r2, [r7, #8]
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	2101      	movs	r1, #1
 8000792:	fa01 f202 	lsl.w	r2, r1, r2
 8000796:	431a      	orrs	r2, r3
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	609a      	str	r2, [r3, #8]
			SETBIT(port->OSPEEDR,((pin*2)+1));
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	689b      	ldr	r3, [r3, #8]
 80007a0:	68ba      	ldr	r2, [r7, #8]
 80007a2:	0052      	lsls	r2, r2, #1
 80007a4:	3201      	adds	r2, #1
 80007a6:	2101      	movs	r1, #1
 80007a8:	fa01 f202 	lsl.w	r2, r1, r2
 80007ac:	431a      	orrs	r2, r3
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	609a      	str	r2, [r3, #8]
			break;
 80007b2:	bf00      	nop
	}
}
 80007b4:	bf00      	nop
 80007b6:	3714      	adds	r7, #20
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <gpio_write>:



void gpio_write(GPIO_TypeDef *port, uint32_t pin, uint8_t state)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	4613      	mov	r3, r2
 80007cc:	71fb      	strb	r3, [r7, #7]
	if(state == 1)
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d10e      	bne.n	80007f2 <gpio_write+0x32>
	{
		SETBIT(port->BSRRL,pin);
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	8b1b      	ldrh	r3, [r3, #24]
 80007d8:	b29b      	uxth	r3, r3
 80007da:	b21a      	sxth	r2, r3
 80007dc:	2101      	movs	r1, #1
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	fa01 f303 	lsl.w	r3, r1, r3
 80007e4:	b21b      	sxth	r3, r3
 80007e6:	4313      	orrs	r3, r2
 80007e8:	b21b      	sxth	r3, r3
 80007ea:	b29a      	uxth	r2, r3
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	831a      	strh	r2, [r3, #24]
	else if(state == 0)
	{
		CLRBIT(port->BSRRL,pin);
		SETBIT(port->BSRRH,pin);
	}
}
 80007f0:	e020      	b.n	8000834 <gpio_write+0x74>
	else if(state == 0)
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d11d      	bne.n	8000834 <gpio_write+0x74>
		CLRBIT(port->BSRRL,pin);
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	8b1b      	ldrh	r3, [r3, #24]
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	b21a      	sxth	r2, r3
 8000800:	2101      	movs	r1, #1
 8000802:	68bb      	ldr	r3, [r7, #8]
 8000804:	fa01 f303 	lsl.w	r3, r1, r3
 8000808:	b21b      	sxth	r3, r3
 800080a:	43db      	mvns	r3, r3
 800080c:	b21b      	sxth	r3, r3
 800080e:	4013      	ands	r3, r2
 8000810:	b21b      	sxth	r3, r3
 8000812:	b29a      	uxth	r2, r3
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	831a      	strh	r2, [r3, #24]
		SETBIT(port->BSRRH,pin);
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	8b5b      	ldrh	r3, [r3, #26]
 800081c:	b29b      	uxth	r3, r3
 800081e:	b21a      	sxth	r2, r3
 8000820:	2101      	movs	r1, #1
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	fa01 f303 	lsl.w	r3, r1, r3
 8000828:	b21b      	sxth	r3, r3
 800082a:	4313      	orrs	r3, r2
 800082c:	b21b      	sxth	r3, r3
 800082e:	b29a      	uxth	r2, r3
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	835a      	strh	r2, [r3, #26]
}
 8000834:	bf00      	nop
 8000836:	3714      	adds	r7, #20
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <gpio_init>:
	SysTick_Delay(100);
}


void gpio_init(GPIO_TYPE gpio)
{
 8000840:	b084      	sub	sp, #16
 8000842:	b580      	push	{r7, lr}
 8000844:	af00      	add	r7, sp, #0
 8000846:	f107 0e08 	add.w	lr, r7, #8
 800084a:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
	if(gpio.port == PORTA)
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	4a21      	ldr	r2, [pc, #132]	; (80008d8 <gpio_init+0x98>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d105      	bne.n	8000862 <gpio_init+0x22>
	{
		PORTA_CLOCK_EN;
 8000856:	4a21      	ldr	r2, [pc, #132]	; (80008dc <gpio_init+0x9c>)
 8000858:	4b20      	ldr	r3, [pc, #128]	; (80008dc <gpio_init+0x9c>)
 800085a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
	}
	if(gpio.port == PORTB)
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	4a1e      	ldr	r2, [pc, #120]	; (80008e0 <gpio_init+0xa0>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d105      	bne.n	8000876 <gpio_init+0x36>
	{
		PORTB_CLOCK_EN;
 800086a:	4a1c      	ldr	r2, [pc, #112]	; (80008dc <gpio_init+0x9c>)
 800086c:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <gpio_init+0x9c>)
 800086e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000870:	f043 0302 	orr.w	r3, r3, #2
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
	}
	if(gpio.port == PORTC)
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	4a1a      	ldr	r2, [pc, #104]	; (80008e4 <gpio_init+0xa4>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d105      	bne.n	800088a <gpio_init+0x4a>
	{
		PORTC_CLOCK_EN;
 800087e:	4a17      	ldr	r2, [pc, #92]	; (80008dc <gpio_init+0x9c>)
 8000880:	4b16      	ldr	r3, [pc, #88]	; (80008dc <gpio_init+0x9c>)
 8000882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000884:	f043 0304 	orr.w	r3, r3, #4
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
	}
	if(gpio.port == PORTD)
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	4a16      	ldr	r2, [pc, #88]	; (80008e8 <gpio_init+0xa8>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d105      	bne.n	800089e <gpio_init+0x5e>
	{
		PORTD_CLOCK_EN;
 8000892:	4a12      	ldr	r2, [pc, #72]	; (80008dc <gpio_init+0x9c>)
 8000894:	4b11      	ldr	r3, [pc, #68]	; (80008dc <gpio_init+0x9c>)
 8000896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000898:	f043 0308 	orr.w	r3, r3, #8
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
	}
	if(gpio.port == PORTE)
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	4a12      	ldr	r2, [pc, #72]	; (80008ec <gpio_init+0xac>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d105      	bne.n	80008b2 <gpio_init+0x72>
	{
		PORTE_CLOCK_EN;
 80008a6:	4a0d      	ldr	r2, [pc, #52]	; (80008dc <gpio_init+0x9c>)
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <gpio_init+0x9c>)
 80008aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ac:	f043 0310 	orr.w	r3, r3, #16
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
	}

	pin_config(gpio.port,gpio.pin,gpio.mode,gpio.pull);
 80008b2:	68b8      	ldr	r0, [r7, #8]
 80008b4:	68f9      	ldr	r1, [r7, #12]
 80008b6:	693a      	ldr	r2, [r7, #16]
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	f7ff fe31 	bl	8000520 <pin_config>
	pin_speed_config(gpio.port,gpio.pin,gpio.speed);
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	68f9      	ldr	r1, [r7, #12]
 80008c2:	69ba      	ldr	r2, [r7, #24]
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff ff05 	bl	80006d4 <pin_speed_config>
}
 80008ca:	bf00      	nop
 80008cc:	46bd      	mov	sp, r7
 80008ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008d2:	b004      	add	sp, #16
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	40020000 	.word	0x40020000
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40020400 	.word	0x40020400
 80008e4:	40020800 	.word	0x40020800
 80008e8:	40020c00 	.word	0x40020c00
 80008ec:	40021000 	.word	0x40021000

080008f0 <config_gpio_interrupt>:



void config_gpio_interrupt(GPIO_TypeDef *port, uint32_t pinNumber, edge_select edge)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	4613      	mov	r3, r2
 80008fc:	71fb      	strb	r3, [r7, #7]
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80008fe:	4aa9      	ldr	r2, [pc, #676]	; (8000ba4 <config_gpio_interrupt+0x2b4>)
 8000900:	4ba8      	ldr	r3, [pc, #672]	; (8000ba4 <config_gpio_interrupt+0x2b4>)
 8000902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000908:	6453      	str	r3, [r2, #68]	; 0x44

	if(port == PORTA)
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	4aa6      	ldr	r2, [pc, #664]	; (8000ba8 <config_gpio_interrupt+0x2b8>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d16d      	bne.n	80009ee <config_gpio_interrupt+0xfe>
	{
		PORTA_CLOCK_EN;
 8000912:	4aa4      	ldr	r2, [pc, #656]	; (8000ba4 <config_gpio_interrupt+0x2b4>)
 8000914:	4ba3      	ldr	r3, [pc, #652]	; (8000ba4 <config_gpio_interrupt+0x2b4>)
 8000916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6313      	str	r3, [r2, #48]	; 0x30

		switch(pinNumber)
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	2b0f      	cmp	r3, #15
 8000922:	f200 824f 	bhi.w	8000dc4 <config_gpio_interrupt+0x4d4>
 8000926:	a201      	add	r2, pc, #4	; (adr r2, 800092c <config_gpio_interrupt+0x3c>)
 8000928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800092c:	0800096d 	.word	0x0800096d
 8000930:	08000975 	.word	0x08000975
 8000934:	0800097d 	.word	0x0800097d
 8000938:	08000985 	.word	0x08000985
 800093c:	0800098d 	.word	0x0800098d
 8000940:	08000995 	.word	0x08000995
 8000944:	0800099d 	.word	0x0800099d
 8000948:	080009a5 	.word	0x080009a5
 800094c:	080009ad 	.word	0x080009ad
 8000950:	080009b5 	.word	0x080009b5
 8000954:	080009bd 	.word	0x080009bd
 8000958:	080009c5 	.word	0x080009c5
 800095c:	080009cd 	.word	0x080009cd
 8000960:	080009d5 	.word	0x080009d5
 8000964:	080009dd 	.word	0x080009dd
 8000968:	080009e5 	.word	0x080009e5
		{
			case 0:
				SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PA;
 800096c:	4b8f      	ldr	r3, [pc, #572]	; (8000bac <config_gpio_interrupt+0x2bc>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
				break;
 8000972:	e227      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 1:
				SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI1_PA;
 8000974:	4b8d      	ldr	r3, [pc, #564]	; (8000bac <config_gpio_interrupt+0x2bc>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
				break;
 800097a:	e223      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 2:
				SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI2_PA;
 800097c:	4b8b      	ldr	r3, [pc, #556]	; (8000bac <config_gpio_interrupt+0x2bc>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
				break;
 8000982:	e21f      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 3:
				SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI3_PA;
 8000984:	4b89      	ldr	r3, [pc, #548]	; (8000bac <config_gpio_interrupt+0x2bc>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
				break;
 800098a:	e21b      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 4:
				SYSCFG->EXTICR[1] = SYSCFG_EXTICR1_EXTI0_PA;
 800098c:	4b87      	ldr	r3, [pc, #540]	; (8000bac <config_gpio_interrupt+0x2bc>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
				break;
 8000992:	e217      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 5:
				SYSCFG->EXTICR[1] = SYSCFG_EXTICR1_EXTI1_PA;
 8000994:	4b85      	ldr	r3, [pc, #532]	; (8000bac <config_gpio_interrupt+0x2bc>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
				break;
 800099a:	e213      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 6:
				SYSCFG->EXTICR[1] = SYSCFG_EXTICR1_EXTI2_PA;
 800099c:	4b83      	ldr	r3, [pc, #524]	; (8000bac <config_gpio_interrupt+0x2bc>)
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
				break;
 80009a2:	e20f      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 7:
				SYSCFG->EXTICR[1] = SYSCFG_EXTICR1_EXTI3_PA;
 80009a4:	4b81      	ldr	r3, [pc, #516]	; (8000bac <config_gpio_interrupt+0x2bc>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
				break;
 80009aa:	e20b      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 8:
				SYSCFG->EXTICR[2] = SYSCFG_EXTICR1_EXTI0_PA;
 80009ac:	4b7f      	ldr	r3, [pc, #508]	; (8000bac <config_gpio_interrupt+0x2bc>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	611a      	str	r2, [r3, #16]
				break;
 80009b2:	e207      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 9:
				SYSCFG->EXTICR[2] = SYSCFG_EXTICR1_EXTI1_PA;
 80009b4:	4b7d      	ldr	r3, [pc, #500]	; (8000bac <config_gpio_interrupt+0x2bc>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]
				break;
 80009ba:	e203      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 10:
				SYSCFG->EXTICR[2] = SYSCFG_EXTICR1_EXTI2_PA;
 80009bc:	4b7b      	ldr	r3, [pc, #492]	; (8000bac <config_gpio_interrupt+0x2bc>)
 80009be:	2200      	movs	r2, #0
 80009c0:	611a      	str	r2, [r3, #16]
				break;
 80009c2:	e1ff      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 11:
				SYSCFG->EXTICR[2] = SYSCFG_EXTICR1_EXTI3_PA;
 80009c4:	4b79      	ldr	r3, [pc, #484]	; (8000bac <config_gpio_interrupt+0x2bc>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	611a      	str	r2, [r3, #16]
				break;
 80009ca:	e1fb      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 12:
				SYSCFG->EXTICR[3] = SYSCFG_EXTICR1_EXTI0_PA;
 80009cc:	4b77      	ldr	r3, [pc, #476]	; (8000bac <config_gpio_interrupt+0x2bc>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	615a      	str	r2, [r3, #20]
				break;
 80009d2:	e1f7      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 13:
				SYSCFG->EXTICR[3] = SYSCFG_EXTICR1_EXTI1_PA;
 80009d4:	4b75      	ldr	r3, [pc, #468]	; (8000bac <config_gpio_interrupt+0x2bc>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	615a      	str	r2, [r3, #20]
				break;
 80009da:	e1f3      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 14:
				SYSCFG->EXTICR[3] = SYSCFG_EXTICR1_EXTI2_PA;
 80009dc:	4b73      	ldr	r3, [pc, #460]	; (8000bac <config_gpio_interrupt+0x2bc>)
 80009de:	2200      	movs	r2, #0
 80009e0:	615a      	str	r2, [r3, #20]
				break;
 80009e2:	e1ef      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 15:
				SYSCFG->EXTICR[3] = SYSCFG_EXTICR1_EXTI3_PA;
 80009e4:	4b71      	ldr	r3, [pc, #452]	; (8000bac <config_gpio_interrupt+0x2bc>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	615a      	str	r2, [r3, #20]
				break;
 80009ea:	bf00      	nop
 80009ec:	e1ea      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
		}
	}
	else if(port == PORTB)
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	4a6f      	ldr	r2, [pc, #444]	; (8000bb0 <config_gpio_interrupt+0x2c0>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d16f      	bne.n	8000ad6 <config_gpio_interrupt+0x1e6>
	{
		switch(pinNumber)
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	2b0f      	cmp	r3, #15
 80009fa:	f200 81e3 	bhi.w	8000dc4 <config_gpio_interrupt+0x4d4>
 80009fe:	a201      	add	r2, pc, #4	; (adr r2, 8000a04 <config_gpio_interrupt+0x114>)
 8000a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a04:	08000a45 	.word	0x08000a45
 8000a08:	08000a4d 	.word	0x08000a4d
 8000a0c:	08000a55 	.word	0x08000a55
 8000a10:	08000a5f 	.word	0x08000a5f
 8000a14:	08000a69 	.word	0x08000a69
 8000a18:	08000a71 	.word	0x08000a71
 8000a1c:	08000a79 	.word	0x08000a79
 8000a20:	08000a83 	.word	0x08000a83
 8000a24:	08000a8d 	.word	0x08000a8d
 8000a28:	08000a95 	.word	0x08000a95
 8000a2c:	08000a9d 	.word	0x08000a9d
 8000a30:	08000aa7 	.word	0x08000aa7
 8000a34:	08000ab1 	.word	0x08000ab1
 8000a38:	08000ab9 	.word	0x08000ab9
 8000a3c:	08000ac1 	.word	0x08000ac1
 8000a40:	08000acb 	.word	0x08000acb
		{
		PORTB_CLOCK_EN;

			case 0:
				SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PB;
 8000a44:	4b59      	ldr	r3, [pc, #356]	; (8000bac <config_gpio_interrupt+0x2bc>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	609a      	str	r2, [r3, #8]
				break;
 8000a4a:	e1bb      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 1:
				SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI1_PB;
 8000a4c:	4b57      	ldr	r3, [pc, #348]	; (8000bac <config_gpio_interrupt+0x2bc>)
 8000a4e:	2210      	movs	r2, #16
 8000a50:	609a      	str	r2, [r3, #8]
				break;
 8000a52:	e1b7      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 2:
				SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI2_PB;
 8000a54:	4b55      	ldr	r3, [pc, #340]	; (8000bac <config_gpio_interrupt+0x2bc>)
 8000a56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a5a:	609a      	str	r2, [r3, #8]
				break;
 8000a5c:	e1b2      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 3:
				SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI3_PB;
 8000a5e:	4b53      	ldr	r3, [pc, #332]	; (8000bac <config_gpio_interrupt+0x2bc>)
 8000a60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a64:	609a      	str	r2, [r3, #8]
				break;
 8000a66:	e1ad      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 4:
				SYSCFG->EXTICR[1] = SYSCFG_EXTICR1_EXTI0_PB;
 8000a68:	4b50      	ldr	r3, [pc, #320]	; (8000bac <config_gpio_interrupt+0x2bc>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	60da      	str	r2, [r3, #12]
				break;
 8000a6e:	e1a9      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 5:
				SYSCFG->EXTICR[1] = SYSCFG_EXTICR1_EXTI1_PB;
 8000a70:	4b4e      	ldr	r3, [pc, #312]	; (8000bac <config_gpio_interrupt+0x2bc>)
 8000a72:	2210      	movs	r2, #16
 8000a74:	60da      	str	r2, [r3, #12]
				break;
 8000a76:	e1a5      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 6:
				SYSCFG->EXTICR[1] = SYSCFG_EXTICR1_EXTI2_PB;
 8000a78:	4b4c      	ldr	r3, [pc, #304]	; (8000bac <config_gpio_interrupt+0x2bc>)
 8000a7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a7e:	60da      	str	r2, [r3, #12]
				break;
 8000a80:	e1a0      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 7:
				SYSCFG->EXTICR[1] = SYSCFG_EXTICR1_EXTI3_PB;
 8000a82:	4b4a      	ldr	r3, [pc, #296]	; (8000bac <config_gpio_interrupt+0x2bc>)
 8000a84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a88:	60da      	str	r2, [r3, #12]
				break;
 8000a8a:	e19b      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 8:
				SYSCFG->EXTICR[2] = SYSCFG_EXTICR1_EXTI0_PB;
 8000a8c:	4b47      	ldr	r3, [pc, #284]	; (8000bac <config_gpio_interrupt+0x2bc>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	611a      	str	r2, [r3, #16]
				break;
 8000a92:	e197      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 9:
				SYSCFG->EXTICR[2] = SYSCFG_EXTICR1_EXTI1_PB;
 8000a94:	4b45      	ldr	r3, [pc, #276]	; (8000bac <config_gpio_interrupt+0x2bc>)
 8000a96:	2210      	movs	r2, #16
 8000a98:	611a      	str	r2, [r3, #16]
				break;
 8000a9a:	e193      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 10:
				SYSCFG->EXTICR[2] = SYSCFG_EXTICR1_EXTI2_PB;
 8000a9c:	4b43      	ldr	r3, [pc, #268]	; (8000bac <config_gpio_interrupt+0x2bc>)
 8000a9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000aa2:	611a      	str	r2, [r3, #16]
				break;
 8000aa4:	e18e      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 11:
				SYSCFG->EXTICR[2] = SYSCFG_EXTICR1_EXTI3_PB;
 8000aa6:	4b41      	ldr	r3, [pc, #260]	; (8000bac <config_gpio_interrupt+0x2bc>)
 8000aa8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000aac:	611a      	str	r2, [r3, #16]
				break;
 8000aae:	e189      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 12:
				SYSCFG->EXTICR[3] = SYSCFG_EXTICR1_EXTI0_PB;
 8000ab0:	4b3e      	ldr	r3, [pc, #248]	; (8000bac <config_gpio_interrupt+0x2bc>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	615a      	str	r2, [r3, #20]
				break;
 8000ab6:	e185      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 13:
				SYSCFG->EXTICR[3] = SYSCFG_EXTICR1_EXTI1_PB;
 8000ab8:	4b3c      	ldr	r3, [pc, #240]	; (8000bac <config_gpio_interrupt+0x2bc>)
 8000aba:	2210      	movs	r2, #16
 8000abc:	615a      	str	r2, [r3, #20]
				break;
 8000abe:	e181      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 14:
				SYSCFG->EXTICR[3] = SYSCFG_EXTICR1_EXTI2_PB;
 8000ac0:	4b3a      	ldr	r3, [pc, #232]	; (8000bac <config_gpio_interrupt+0x2bc>)
 8000ac2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ac6:	615a      	str	r2, [r3, #20]
				break;
 8000ac8:	e17c      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 15:
				SYSCFG->EXTICR[3] = SYSCFG_EXTICR1_EXTI3_PB;
 8000aca:	4b38      	ldr	r3, [pc, #224]	; (8000bac <config_gpio_interrupt+0x2bc>)
 8000acc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ad0:	615a      	str	r2, [r3, #20]
				break;
 8000ad2:	bf00      	nop
 8000ad4:	e176      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
		}
	}
	else if(port == PORTC)
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	4a36      	ldr	r2, [pc, #216]	; (8000bb4 <config_gpio_interrupt+0x2c4>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d17f      	bne.n	8000bde <config_gpio_interrupt+0x2ee>
	{
		PORTC_CLOCK_EN;
 8000ade:	4a31      	ldr	r2, [pc, #196]	; (8000ba4 <config_gpio_interrupt+0x2b4>)
 8000ae0:	4b30      	ldr	r3, [pc, #192]	; (8000ba4 <config_gpio_interrupt+0x2b4>)
 8000ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae4:	f043 0304 	orr.w	r3, r3, #4
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30

		switch(pinNumber)
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	2b0f      	cmp	r3, #15
 8000aee:	f200 8169 	bhi.w	8000dc4 <config_gpio_interrupt+0x4d4>
 8000af2:	a201      	add	r2, pc, #4	; (adr r2, 8000af8 <config_gpio_interrupt+0x208>)
 8000af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000af8:	08000b39 	.word	0x08000b39
 8000afc:	08000b41 	.word	0x08000b41
 8000b00:	08000b49 	.word	0x08000b49
 8000b04:	08000b53 	.word	0x08000b53
 8000b08:	08000b5d 	.word	0x08000b5d
 8000b0c:	08000b65 	.word	0x08000b65
 8000b10:	08000b6d 	.word	0x08000b6d
 8000b14:	08000b77 	.word	0x08000b77
 8000b18:	08000b81 	.word	0x08000b81
 8000b1c:	08000b89 	.word	0x08000b89
 8000b20:	08000b91 	.word	0x08000b91
 8000b24:	08000b9b 	.word	0x08000b9b
 8000b28:	08000bb9 	.word	0x08000bb9
 8000b2c:	08000bc1 	.word	0x08000bc1
 8000b30:	08000bc9 	.word	0x08000bc9
 8000b34:	08000bd3 	.word	0x08000bd3
		{
			case 0:
				SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PC;
 8000b38:	4b1c      	ldr	r3, [pc, #112]	; (8000bac <config_gpio_interrupt+0x2bc>)
 8000b3a:	2202      	movs	r2, #2
 8000b3c:	609a      	str	r2, [r3, #8]
				break;
 8000b3e:	e141      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 1:
				SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI1_PC;
 8000b40:	4b1a      	ldr	r3, [pc, #104]	; (8000bac <config_gpio_interrupt+0x2bc>)
 8000b42:	2220      	movs	r2, #32
 8000b44:	609a      	str	r2, [r3, #8]
				break;
 8000b46:	e13d      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 2:
				SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI2_PC;
 8000b48:	4b18      	ldr	r3, [pc, #96]	; (8000bac <config_gpio_interrupt+0x2bc>)
 8000b4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b4e:	609a      	str	r2, [r3, #8]
				break;
 8000b50:	e138      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 3:
				SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI3_PC;
 8000b52:	4b16      	ldr	r3, [pc, #88]	; (8000bac <config_gpio_interrupt+0x2bc>)
 8000b54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b58:	609a      	str	r2, [r3, #8]
				break;
 8000b5a:	e133      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 4:
				SYSCFG->EXTICR[1] = SYSCFG_EXTICR1_EXTI0_PC;
 8000b5c:	4b13      	ldr	r3, [pc, #76]	; (8000bac <config_gpio_interrupt+0x2bc>)
 8000b5e:	2202      	movs	r2, #2
 8000b60:	60da      	str	r2, [r3, #12]
				break;
 8000b62:	e12f      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 5:
				SYSCFG->EXTICR[1] = SYSCFG_EXTICR1_EXTI1_PC;
 8000b64:	4b11      	ldr	r3, [pc, #68]	; (8000bac <config_gpio_interrupt+0x2bc>)
 8000b66:	2220      	movs	r2, #32
 8000b68:	60da      	str	r2, [r3, #12]
				break;
 8000b6a:	e12b      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 6:
				SYSCFG->EXTICR[1] = SYSCFG_EXTICR1_EXTI2_PC;
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <config_gpio_interrupt+0x2bc>)
 8000b6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b72:	60da      	str	r2, [r3, #12]
				break;
 8000b74:	e126      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 7:
				SYSCFG->EXTICR[1] = SYSCFG_EXTICR1_EXTI3_PC;
 8000b76:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <config_gpio_interrupt+0x2bc>)
 8000b78:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b7c:	60da      	str	r2, [r3, #12]
				break;
 8000b7e:	e121      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 8:
				SYSCFG->EXTICR[2] = SYSCFG_EXTICR1_EXTI0_PC;
 8000b80:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <config_gpio_interrupt+0x2bc>)
 8000b82:	2202      	movs	r2, #2
 8000b84:	611a      	str	r2, [r3, #16]
				break;
 8000b86:	e11d      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 9:
				SYSCFG->EXTICR[2] = SYSCFG_EXTICR1_EXTI1_PC;
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <config_gpio_interrupt+0x2bc>)
 8000b8a:	2220      	movs	r2, #32
 8000b8c:	611a      	str	r2, [r3, #16]
				break;
 8000b8e:	e119      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 10:
				SYSCFG->EXTICR[2] = SYSCFG_EXTICR1_EXTI2_PC;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <config_gpio_interrupt+0x2bc>)
 8000b92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b96:	611a      	str	r2, [r3, #16]
				break;
 8000b98:	e114      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 11:
				SYSCFG->EXTICR[2] = SYSCFG_EXTICR1_EXTI3_PC;
 8000b9a:	4b04      	ldr	r3, [pc, #16]	; (8000bac <config_gpio_interrupt+0x2bc>)
 8000b9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ba0:	611a      	str	r2, [r3, #16]
				break;
 8000ba2:	e10f      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40020000 	.word	0x40020000
 8000bac:	40013800 	.word	0x40013800
 8000bb0:	40020400 	.word	0x40020400
 8000bb4:	40020800 	.word	0x40020800
			case 12:
				SYSCFG->EXTICR[3] = SYSCFG_EXTICR1_EXTI0_PC;
 8000bb8:	4b9d      	ldr	r3, [pc, #628]	; (8000e30 <config_gpio_interrupt+0x540>)
 8000bba:	2202      	movs	r2, #2
 8000bbc:	615a      	str	r2, [r3, #20]
				break;
 8000bbe:	e101      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 13:
				SYSCFG->EXTICR[3] = SYSCFG_EXTICR1_EXTI1_PC;
 8000bc0:	4b9b      	ldr	r3, [pc, #620]	; (8000e30 <config_gpio_interrupt+0x540>)
 8000bc2:	2220      	movs	r2, #32
 8000bc4:	615a      	str	r2, [r3, #20]
				break;
 8000bc6:	e0fd      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 14:
				SYSCFG->EXTICR[3] = SYSCFG_EXTICR1_EXTI2_PC;
 8000bc8:	4b99      	ldr	r3, [pc, #612]	; (8000e30 <config_gpio_interrupt+0x540>)
 8000bca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bce:	615a      	str	r2, [r3, #20]
				break;
 8000bd0:	e0f8      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 15:
				SYSCFG->EXTICR[3] = SYSCFG_EXTICR1_EXTI3_PC;
 8000bd2:	4b97      	ldr	r3, [pc, #604]	; (8000e30 <config_gpio_interrupt+0x540>)
 8000bd4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bd8:	615a      	str	r2, [r3, #20]
				break;
 8000bda:	bf00      	nop
 8000bdc:	e0f2      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
		}
	}
	else if(port == PORTD)
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	4a94      	ldr	r2, [pc, #592]	; (8000e34 <config_gpio_interrupt+0x544>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d175      	bne.n	8000cd2 <config_gpio_interrupt+0x3e2>
	{
		PORTD_CLOCK_EN;
 8000be6:	4a94      	ldr	r2, [pc, #592]	; (8000e38 <config_gpio_interrupt+0x548>)
 8000be8:	4b93      	ldr	r3, [pc, #588]	; (8000e38 <config_gpio_interrupt+0x548>)
 8000bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bec:	f043 0308 	orr.w	r3, r3, #8
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30

		switch(pinNumber)
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	2b0f      	cmp	r3, #15
 8000bf6:	f200 80e5 	bhi.w	8000dc4 <config_gpio_interrupt+0x4d4>
 8000bfa:	a201      	add	r2, pc, #4	; (adr r2, 8000c00 <config_gpio_interrupt+0x310>)
 8000bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c00:	08000c41 	.word	0x08000c41
 8000c04:	08000c49 	.word	0x08000c49
 8000c08:	08000c51 	.word	0x08000c51
 8000c0c:	08000c5b 	.word	0x08000c5b
 8000c10:	08000c65 	.word	0x08000c65
 8000c14:	08000c6d 	.word	0x08000c6d
 8000c18:	08000c75 	.word	0x08000c75
 8000c1c:	08000c7f 	.word	0x08000c7f
 8000c20:	08000c89 	.word	0x08000c89
 8000c24:	08000c91 	.word	0x08000c91
 8000c28:	08000c99 	.word	0x08000c99
 8000c2c:	08000ca3 	.word	0x08000ca3
 8000c30:	08000cad 	.word	0x08000cad
 8000c34:	08000cb5 	.word	0x08000cb5
 8000c38:	08000cbd 	.word	0x08000cbd
 8000c3c:	08000cc7 	.word	0x08000cc7
		{
			case 0:
				SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PD;
 8000c40:	4b7b      	ldr	r3, [pc, #492]	; (8000e30 <config_gpio_interrupt+0x540>)
 8000c42:	2203      	movs	r2, #3
 8000c44:	609a      	str	r2, [r3, #8]
				break;
 8000c46:	e0bd      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 1:
				SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI1_PD;
 8000c48:	4b79      	ldr	r3, [pc, #484]	; (8000e30 <config_gpio_interrupt+0x540>)
 8000c4a:	2230      	movs	r2, #48	; 0x30
 8000c4c:	609a      	str	r2, [r3, #8]
				break;
 8000c4e:	e0b9      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 2:
				SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI2_PD;
 8000c50:	4b77      	ldr	r3, [pc, #476]	; (8000e30 <config_gpio_interrupt+0x540>)
 8000c52:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000c56:	609a      	str	r2, [r3, #8]
				break;
 8000c58:	e0b4      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 3:
				SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI3_PD;
 8000c5a:	4b75      	ldr	r3, [pc, #468]	; (8000e30 <config_gpio_interrupt+0x540>)
 8000c5c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000c60:	609a      	str	r2, [r3, #8]
				break;
 8000c62:	e0af      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 4:
				SYSCFG->EXTICR[1] = SYSCFG_EXTICR1_EXTI0_PD;
 8000c64:	4b72      	ldr	r3, [pc, #456]	; (8000e30 <config_gpio_interrupt+0x540>)
 8000c66:	2203      	movs	r2, #3
 8000c68:	60da      	str	r2, [r3, #12]
				break;
 8000c6a:	e0ab      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 5:
				SYSCFG->EXTICR[1] = SYSCFG_EXTICR1_EXTI1_PD;
 8000c6c:	4b70      	ldr	r3, [pc, #448]	; (8000e30 <config_gpio_interrupt+0x540>)
 8000c6e:	2230      	movs	r2, #48	; 0x30
 8000c70:	60da      	str	r2, [r3, #12]
				break;
 8000c72:	e0a7      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 6:
				SYSCFG->EXTICR[1] = SYSCFG_EXTICR1_EXTI2_PD;
 8000c74:	4b6e      	ldr	r3, [pc, #440]	; (8000e30 <config_gpio_interrupt+0x540>)
 8000c76:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000c7a:	60da      	str	r2, [r3, #12]
				break;
 8000c7c:	e0a2      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 7:
				SYSCFG->EXTICR[1] = SYSCFG_EXTICR1_EXTI3_PD;
 8000c7e:	4b6c      	ldr	r3, [pc, #432]	; (8000e30 <config_gpio_interrupt+0x540>)
 8000c80:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000c84:	60da      	str	r2, [r3, #12]
				break;
 8000c86:	e09d      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 8:
				SYSCFG->EXTICR[2] = SYSCFG_EXTICR1_EXTI0_PD;
 8000c88:	4b69      	ldr	r3, [pc, #420]	; (8000e30 <config_gpio_interrupt+0x540>)
 8000c8a:	2203      	movs	r2, #3
 8000c8c:	611a      	str	r2, [r3, #16]
				break;
 8000c8e:	e099      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 9:
				SYSCFG->EXTICR[2] = SYSCFG_EXTICR1_EXTI1_PD;
 8000c90:	4b67      	ldr	r3, [pc, #412]	; (8000e30 <config_gpio_interrupt+0x540>)
 8000c92:	2230      	movs	r2, #48	; 0x30
 8000c94:	611a      	str	r2, [r3, #16]
				break;
 8000c96:	e095      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 10:
				SYSCFG->EXTICR[2] = SYSCFG_EXTICR1_EXTI2_PD;
 8000c98:	4b65      	ldr	r3, [pc, #404]	; (8000e30 <config_gpio_interrupt+0x540>)
 8000c9a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000c9e:	611a      	str	r2, [r3, #16]
				break;
 8000ca0:	e090      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 11:
				SYSCFG->EXTICR[2] = SYSCFG_EXTICR1_EXTI3_PD;
 8000ca2:	4b63      	ldr	r3, [pc, #396]	; (8000e30 <config_gpio_interrupt+0x540>)
 8000ca4:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000ca8:	611a      	str	r2, [r3, #16]
				break;
 8000caa:	e08b      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 12:
				SYSCFG->EXTICR[3] = SYSCFG_EXTICR1_EXTI0_PD;
 8000cac:	4b60      	ldr	r3, [pc, #384]	; (8000e30 <config_gpio_interrupt+0x540>)
 8000cae:	2203      	movs	r2, #3
 8000cb0:	615a      	str	r2, [r3, #20]
				break;
 8000cb2:	e087      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 13:
				SYSCFG->EXTICR[3] = SYSCFG_EXTICR1_EXTI1_PD;
 8000cb4:	4b5e      	ldr	r3, [pc, #376]	; (8000e30 <config_gpio_interrupt+0x540>)
 8000cb6:	2230      	movs	r2, #48	; 0x30
 8000cb8:	615a      	str	r2, [r3, #20]
				break;
 8000cba:	e083      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 14:
				SYSCFG->EXTICR[3] = SYSCFG_EXTICR1_EXTI2_PD;
 8000cbc:	4b5c      	ldr	r3, [pc, #368]	; (8000e30 <config_gpio_interrupt+0x540>)
 8000cbe:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000cc2:	615a      	str	r2, [r3, #20]
				break;
 8000cc4:	e07e      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 15:
				SYSCFG->EXTICR[3] = SYSCFG_EXTICR1_EXTI3_PD;
 8000cc6:	4b5a      	ldr	r3, [pc, #360]	; (8000e30 <config_gpio_interrupt+0x540>)
 8000cc8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000ccc:	615a      	str	r2, [r3, #20]
				break;
 8000cce:	bf00      	nop
 8000cd0:	e078      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
		}
	}
	else if(port == PORTE)
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	4a59      	ldr	r2, [pc, #356]	; (8000e3c <config_gpio_interrupt+0x54c>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d174      	bne.n	8000dc4 <config_gpio_interrupt+0x4d4>
	{
		PORTE_CLOCK_EN;
 8000cda:	4a57      	ldr	r2, [pc, #348]	; (8000e38 <config_gpio_interrupt+0x548>)
 8000cdc:	4b56      	ldr	r3, [pc, #344]	; (8000e38 <config_gpio_interrupt+0x548>)
 8000cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce0:	f043 0310 	orr.w	r3, r3, #16
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30

		switch(pinNumber)
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	2b0f      	cmp	r3, #15
 8000cea:	d86b      	bhi.n	8000dc4 <config_gpio_interrupt+0x4d4>
 8000cec:	a201      	add	r2, pc, #4	; (adr r2, 8000cf4 <config_gpio_interrupt+0x404>)
 8000cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cf2:	bf00      	nop
 8000cf4:	08000d35 	.word	0x08000d35
 8000cf8:	08000d3d 	.word	0x08000d3d
 8000cfc:	08000d45 	.word	0x08000d45
 8000d00:	08000d4f 	.word	0x08000d4f
 8000d04:	08000d59 	.word	0x08000d59
 8000d08:	08000d61 	.word	0x08000d61
 8000d0c:	08000d69 	.word	0x08000d69
 8000d10:	08000d73 	.word	0x08000d73
 8000d14:	08000d7d 	.word	0x08000d7d
 8000d18:	08000d85 	.word	0x08000d85
 8000d1c:	08000d8d 	.word	0x08000d8d
 8000d20:	08000d97 	.word	0x08000d97
 8000d24:	08000da1 	.word	0x08000da1
 8000d28:	08000da9 	.word	0x08000da9
 8000d2c:	08000db1 	.word	0x08000db1
 8000d30:	08000dbb 	.word	0x08000dbb
		{
			case 0:
				SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PE;
 8000d34:	4b3e      	ldr	r3, [pc, #248]	; (8000e30 <config_gpio_interrupt+0x540>)
 8000d36:	2204      	movs	r2, #4
 8000d38:	609a      	str	r2, [r3, #8]
				break;
 8000d3a:	e043      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 1:
				SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI1_PE;
 8000d3c:	4b3c      	ldr	r3, [pc, #240]	; (8000e30 <config_gpio_interrupt+0x540>)
 8000d3e:	2240      	movs	r2, #64	; 0x40
 8000d40:	609a      	str	r2, [r3, #8]
				break;
 8000d42:	e03f      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 2:
				SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI2_PE;
 8000d44:	4b3a      	ldr	r3, [pc, #232]	; (8000e30 <config_gpio_interrupt+0x540>)
 8000d46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d4a:	609a      	str	r2, [r3, #8]
				break;
 8000d4c:	e03a      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 3:
				SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI3_PE;
 8000d4e:	4b38      	ldr	r3, [pc, #224]	; (8000e30 <config_gpio_interrupt+0x540>)
 8000d50:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d54:	609a      	str	r2, [r3, #8]
				break;
 8000d56:	e035      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 4:
				SYSCFG->EXTICR[1] = SYSCFG_EXTICR1_EXTI0_PE;
 8000d58:	4b35      	ldr	r3, [pc, #212]	; (8000e30 <config_gpio_interrupt+0x540>)
 8000d5a:	2204      	movs	r2, #4
 8000d5c:	60da      	str	r2, [r3, #12]
				break;
 8000d5e:	e031      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 5:
				SYSCFG->EXTICR[1] = SYSCFG_EXTICR1_EXTI1_PE;
 8000d60:	4b33      	ldr	r3, [pc, #204]	; (8000e30 <config_gpio_interrupt+0x540>)
 8000d62:	2240      	movs	r2, #64	; 0x40
 8000d64:	60da      	str	r2, [r3, #12]
				break;
 8000d66:	e02d      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 6:
				SYSCFG->EXTICR[1] = SYSCFG_EXTICR1_EXTI2_PE;
 8000d68:	4b31      	ldr	r3, [pc, #196]	; (8000e30 <config_gpio_interrupt+0x540>)
 8000d6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d6e:	60da      	str	r2, [r3, #12]
				break;
 8000d70:	e028      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 7:
				SYSCFG->EXTICR[1] = SYSCFG_EXTICR1_EXTI3_PE;
 8000d72:	4b2f      	ldr	r3, [pc, #188]	; (8000e30 <config_gpio_interrupt+0x540>)
 8000d74:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d78:	60da      	str	r2, [r3, #12]
				break;
 8000d7a:	e023      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 8:
				SYSCFG->EXTICR[2] = SYSCFG_EXTICR1_EXTI0_PE;
 8000d7c:	4b2c      	ldr	r3, [pc, #176]	; (8000e30 <config_gpio_interrupt+0x540>)
 8000d7e:	2204      	movs	r2, #4
 8000d80:	611a      	str	r2, [r3, #16]
				break;
 8000d82:	e01f      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 9:
				SYSCFG->EXTICR[2] = SYSCFG_EXTICR1_EXTI1_PE;
 8000d84:	4b2a      	ldr	r3, [pc, #168]	; (8000e30 <config_gpio_interrupt+0x540>)
 8000d86:	2240      	movs	r2, #64	; 0x40
 8000d88:	611a      	str	r2, [r3, #16]
				break;
 8000d8a:	e01b      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 10:
				SYSCFG->EXTICR[2] = SYSCFG_EXTICR1_EXTI2_PE;
 8000d8c:	4b28      	ldr	r3, [pc, #160]	; (8000e30 <config_gpio_interrupt+0x540>)
 8000d8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d92:	611a      	str	r2, [r3, #16]
				break;
 8000d94:	e016      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 11:
				SYSCFG->EXTICR[2] = SYSCFG_EXTICR1_EXTI3_PE;
 8000d96:	4b26      	ldr	r3, [pc, #152]	; (8000e30 <config_gpio_interrupt+0x540>)
 8000d98:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d9c:	611a      	str	r2, [r3, #16]
				break;
 8000d9e:	e011      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 12:
				SYSCFG->EXTICR[3] = SYSCFG_EXTICR1_EXTI0_PE;
 8000da0:	4b23      	ldr	r3, [pc, #140]	; (8000e30 <config_gpio_interrupt+0x540>)
 8000da2:	2204      	movs	r2, #4
 8000da4:	615a      	str	r2, [r3, #20]
				break;
 8000da6:	e00d      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 13:
				SYSCFG->EXTICR[3] = SYSCFG_EXTICR1_EXTI1_PE;
 8000da8:	4b21      	ldr	r3, [pc, #132]	; (8000e30 <config_gpio_interrupt+0x540>)
 8000daa:	2240      	movs	r2, #64	; 0x40
 8000dac:	615a      	str	r2, [r3, #20]
				break;
 8000dae:	e009      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 14:
				SYSCFG->EXTICR[3] = SYSCFG_EXTICR1_EXTI2_PE;
 8000db0:	4b1f      	ldr	r3, [pc, #124]	; (8000e30 <config_gpio_interrupt+0x540>)
 8000db2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000db6:	615a      	str	r2, [r3, #20]
				break;
 8000db8:	e004      	b.n	8000dc4 <config_gpio_interrupt+0x4d4>
			case 15:
				SYSCFG->EXTICR[3] = SYSCFG_EXTICR1_EXTI3_PE;
 8000dba:	4b1d      	ldr	r3, [pc, #116]	; (8000e30 <config_gpio_interrupt+0x540>)
 8000dbc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dc0:	615a      	str	r2, [r3, #20]
				break;
 8000dc2:	bf00      	nop
		}
	}

	if(edge == RISING_EDGE)
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d109      	bne.n	8000dde <config_gpio_interrupt+0x4ee>
	{
		SETBIT(EXTI->RTSR,pinNumber);
 8000dca:	491d      	ldr	r1, [pc, #116]	; (8000e40 <config_gpio_interrupt+0x550>)
 8000dcc:	4b1c      	ldr	r3, [pc, #112]	; (8000e40 <config_gpio_interrupt+0x550>)
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	68ba      	ldr	r2, [r7, #8]
 8000dd4:	fa00 f202 	lsl.w	r2, r0, r2
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	608b      	str	r3, [r1, #8]
	else if(edge == RISING_FALLING_EDGE)
	{
		SETBIT(EXTI->RTSR,pinNumber);
		SETBIT(EXTI->FTSR,pinNumber);
	}
}
 8000ddc:	e021      	b.n	8000e22 <config_gpio_interrupt+0x532>
	else if(edge == FALLING_EDGE)
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d109      	bne.n	8000df8 <config_gpio_interrupt+0x508>
		SETBIT(EXTI->FTSR,pinNumber);
 8000de4:	4916      	ldr	r1, [pc, #88]	; (8000e40 <config_gpio_interrupt+0x550>)
 8000de6:	4b16      	ldr	r3, [pc, #88]	; (8000e40 <config_gpio_interrupt+0x550>)
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	2001      	movs	r0, #1
 8000dec:	68ba      	ldr	r2, [r7, #8]
 8000dee:	fa00 f202 	lsl.w	r2, r0, r2
 8000df2:	4313      	orrs	r3, r2
 8000df4:	60cb      	str	r3, [r1, #12]
}
 8000df6:	e014      	b.n	8000e22 <config_gpio_interrupt+0x532>
	else if(edge == RISING_FALLING_EDGE)
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d111      	bne.n	8000e22 <config_gpio_interrupt+0x532>
		SETBIT(EXTI->RTSR,pinNumber);
 8000dfe:	4910      	ldr	r1, [pc, #64]	; (8000e40 <config_gpio_interrupt+0x550>)
 8000e00:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <config_gpio_interrupt+0x550>)
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	2001      	movs	r0, #1
 8000e06:	68ba      	ldr	r2, [r7, #8]
 8000e08:	fa00 f202 	lsl.w	r2, r0, r2
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	608b      	str	r3, [r1, #8]
		SETBIT(EXTI->FTSR,pinNumber);
 8000e10:	490b      	ldr	r1, [pc, #44]	; (8000e40 <config_gpio_interrupt+0x550>)
 8000e12:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <config_gpio_interrupt+0x550>)
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	2001      	movs	r0, #1
 8000e18:	68ba      	ldr	r2, [r7, #8]
 8000e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	60cb      	str	r3, [r1, #12]
}
 8000e22:	bf00      	nop
 8000e24:	3714      	adds	r7, #20
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	40013800 	.word	0x40013800
 8000e34:	40020c00 	.word	0x40020c00
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	40013c00 	.word	0x40013c00

08000e44 <enable_gpio_interrupt>:



void enable_gpio_interrupt(uint32_t pinNumber, IRQn_Type irq_number, uint8_t priority)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	70fb      	strb	r3, [r7, #3]
 8000e50:	4613      	mov	r3, r2
 8000e52:	70bb      	strb	r3, [r7, #2]
	// set interrupt priority
	NVIC_SetPriority(irq_number,priority);
 8000e54:	78ba      	ldrb	r2, [r7, #2]
 8000e56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e5a:	4611      	mov	r1, r2
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff fb35 	bl	80004cc <NVIC_SetPriority>
	// enable interrupt in EXTI
	SETBIT(EXTI->IMR,pinNumber);
 8000e62:	4909      	ldr	r1, [pc, #36]	; (8000e88 <enable_gpio_interrupt+0x44>)
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <enable_gpio_interrupt+0x44>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2001      	movs	r0, #1
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	fa00 f202 	lsl.w	r2, r0, r2
 8000e70:	4313      	orrs	r3, r2
 8000e72:	600b      	str	r3, [r1, #0]
	// enable interrupt in NVIC
	NVIC_EnableIRQ(irq_number);
 8000e74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff fb0d 	bl	8000498 <NVIC_EnableIRQ>
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40013c00 	.word	0x40013c00

08000e8c <clear_interrupt>:



void clear_interrupt(uint32_t pinNumber)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
	// write 1 to clear bit
	SETBIT(EXTI->PR,pinNumber);
 8000e94:	4907      	ldr	r1, [pc, #28]	; (8000eb4 <clear_interrupt+0x28>)
 8000e96:	4b07      	ldr	r3, [pc, #28]	; (8000eb4 <clear_interrupt+0x28>)
 8000e98:	695b      	ldr	r3, [r3, #20]
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	614b      	str	r3, [r1, #20]
}
 8000ea6:	bf00      	nop
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	40013c00 	.word	0x40013c00

08000eb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000eb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ef0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ebc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ebe:	e003      	b.n	8000ec8 <LoopCopyDataInit>

08000ec0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ec2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ec4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ec6:	3104      	adds	r1, #4

08000ec8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ec8:	480b      	ldr	r0, [pc, #44]	; (8000ef8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000eca:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ecc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ece:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ed0:	d3f6      	bcc.n	8000ec0 <CopyDataInit>
  ldr  r2, =_sbss
 8000ed2:	4a0b      	ldr	r2, [pc, #44]	; (8000f00 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ed4:	e002      	b.n	8000edc <LoopFillZerobss>

08000ed6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ed6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ed8:	f842 3b04 	str.w	r3, [r2], #4

08000edc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000edc:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ede:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ee0:	d3f9      	bcc.n	8000ed6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ee2:	f000 f859 	bl	8000f98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ee6:	f000 f985 	bl	80011f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eea:	f7ff f9cb 	bl	8000284 <main>
  bx  lr    
 8000eee:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ef0:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000ef4:	0800125c 	.word	0x0800125c
  ldr  r0, =_sdata
 8000ef8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000efc:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8000f00:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8000f04:	20000034 	.word	0x20000034

08000f08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f08:	e7fe      	b.n	8000f08 <ADC_IRQHandler>

08000f0a <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <HardFault_Handler+0x4>

08000f1e <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000f22:	e7fe      	b.n	8000f22 <MemManage_Handler+0x4>

08000f24 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <BusFault_Handler+0x4>

08000f2a <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000f2e:	e7fe      	b.n	8000f2e <UsageFault_Handler+0x4>

08000f30 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0
}
 8000f42:	bf00      	nop
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <SysTick_Handler>:
  * @param  None
  * @retval None
  */

void SysTick_Handler(void)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	af00      	add	r7, sp, #0
	SysTick_IncrementTicks_cb();
 8000f5e:	f7ff fa61 	bl	8000424 <SysTick_IncrementTicks_cb>
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <EXTI2_IRQHandler>:
  * @brief  This function handles EXTI2 Handler.
  * @param  None
  * @retval None
  */
void EXTI2_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	gpio_write(PORTA,6,1);
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	2106      	movs	r1, #6
 8000f70:	4802      	ldr	r0, [pc, #8]	; (8000f7c <EXTI2_IRQHandler+0x14>)
 8000f72:	f7ff fc25 	bl	80007c0 <gpio_write>
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40020000 	.word	0x40020000

08000f80 <EXTI3_IRQHandler>:
  * @brief  This function handles EXTI3 Handler.
  * @param  None
  * @retval None
  */
void EXTI3_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	gpio_write(PORTA,6,0);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2106      	movs	r1, #6
 8000f88:	4802      	ldr	r0, [pc, #8]	; (8000f94 <EXTI3_IRQHandler+0x14>)
 8000f8a:	f7ff fc19 	bl	80007c0 <gpio_write>
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40020000 	.word	0x40020000

08000f98 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f9c:	4a16      	ldr	r2, [pc, #88]	; (8000ff8 <SystemInit+0x60>)
 8000f9e:	4b16      	ldr	r3, [pc, #88]	; (8000ff8 <SystemInit+0x60>)
 8000fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000fac:	4a13      	ldr	r2, [pc, #76]	; (8000ffc <SystemInit+0x64>)
 8000fae:	4b13      	ldr	r3, [pc, #76]	; (8000ffc <SystemInit+0x64>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f043 0301 	orr.w	r3, r3, #1
 8000fb6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000fb8:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <SystemInit+0x64>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000fbe:	4a0f      	ldr	r2, [pc, #60]	; (8000ffc <SystemInit+0x64>)
 8000fc0:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <SystemInit+0x64>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000fc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fcc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000fce:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <SystemInit+0x64>)
 8000fd0:	4a0b      	ldr	r2, [pc, #44]	; (8001000 <SystemInit+0x68>)
 8000fd2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000fd4:	4a09      	ldr	r2, [pc, #36]	; (8000ffc <SystemInit+0x64>)
 8000fd6:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <SystemInit+0x64>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fde:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <SystemInit+0x64>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000fe6:	f000 f889 	bl	80010fc <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fea:	4b03      	ldr	r3, [pc, #12]	; (8000ff8 <SystemInit+0x60>)
 8000fec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ff0:	609a      	str	r2, [r3, #8]
#endif
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	e000ed00 	.word	0xe000ed00
 8000ffc:	40023800 	.word	0x40023800
 8001000:	24003010 	.word	0x24003010

08001004 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001004:	b480      	push	{r7}
 8001006:	b087      	sub	sp, #28
 8001008:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
 8001012:	2302      	movs	r3, #2
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	2300      	movs	r3, #0
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	2302      	movs	r3, #2
 800101c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800101e:	4b32      	ldr	r3, [pc, #200]	; (80010e8 <SystemCoreClockUpdate+0xe4>)
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	f003 030c 	and.w	r3, r3, #12
 8001026:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	2b04      	cmp	r3, #4
 800102c:	d007      	beq.n	800103e <SystemCoreClockUpdate+0x3a>
 800102e:	2b08      	cmp	r3, #8
 8001030:	d009      	beq.n	8001046 <SystemCoreClockUpdate+0x42>
 8001032:	2b00      	cmp	r3, #0
 8001034:	d13d      	bne.n	80010b2 <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001036:	4b2d      	ldr	r3, [pc, #180]	; (80010ec <SystemCoreClockUpdate+0xe8>)
 8001038:	4a2d      	ldr	r2, [pc, #180]	; (80010f0 <SystemCoreClockUpdate+0xec>)
 800103a:	601a      	str	r2, [r3, #0]
      break;
 800103c:	e03d      	b.n	80010ba <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800103e:	4b2b      	ldr	r3, [pc, #172]	; (80010ec <SystemCoreClockUpdate+0xe8>)
 8001040:	4a2c      	ldr	r2, [pc, #176]	; (80010f4 <SystemCoreClockUpdate+0xf0>)
 8001042:	601a      	str	r2, [r3, #0]
      break;
 8001044:	e039      	b.n	80010ba <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001046:	4b28      	ldr	r3, [pc, #160]	; (80010e8 <SystemCoreClockUpdate+0xe4>)
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	0d9b      	lsrs	r3, r3, #22
 800104c:	f003 0301 	and.w	r3, r3, #1
 8001050:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001052:	4b25      	ldr	r3, [pc, #148]	; (80010e8 <SystemCoreClockUpdate+0xe4>)
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800105a:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d00c      	beq.n	800107c <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001062:	4a24      	ldr	r2, [pc, #144]	; (80010f4 <SystemCoreClockUpdate+0xf0>)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	fbb2 f3f3 	udiv	r3, r2, r3
 800106a:	4a1f      	ldr	r2, [pc, #124]	; (80010e8 <SystemCoreClockUpdate+0xe4>)
 800106c:	6852      	ldr	r2, [r2, #4]
 800106e:	0992      	lsrs	r2, r2, #6
 8001070:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001074:	fb02 f303 	mul.w	r3, r2, r3
 8001078:	617b      	str	r3, [r7, #20]
 800107a:	e00b      	b.n	8001094 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800107c:	4a1c      	ldr	r2, [pc, #112]	; (80010f0 <SystemCoreClockUpdate+0xec>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	fbb2 f3f3 	udiv	r3, r2, r3
 8001084:	4a18      	ldr	r2, [pc, #96]	; (80010e8 <SystemCoreClockUpdate+0xe4>)
 8001086:	6852      	ldr	r2, [r2, #4]
 8001088:	0992      	lsrs	r2, r2, #6
 800108a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800108e:	fb02 f303 	mul.w	r3, r2, r3
 8001092:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001094:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <SystemCoreClockUpdate+0xe4>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	0c1b      	lsrs	r3, r3, #16
 800109a:	f003 0303 	and.w	r3, r3, #3
 800109e:	3301      	adds	r3, #1
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80010a4:	697a      	ldr	r2, [r7, #20]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ac:	4a0f      	ldr	r2, [pc, #60]	; (80010ec <SystemCoreClockUpdate+0xe8>)
 80010ae:	6013      	str	r3, [r2, #0]
      break;
 80010b0:	e003      	b.n	80010ba <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 80010b2:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <SystemCoreClockUpdate+0xe8>)
 80010b4:	4a0e      	ldr	r2, [pc, #56]	; (80010f0 <SystemCoreClockUpdate+0xec>)
 80010b6:	601a      	str	r2, [r3, #0]
      break;
 80010b8:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <SystemCoreClockUpdate+0xe4>)
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	091b      	lsrs	r3, r3, #4
 80010c0:	f003 030f 	and.w	r3, r3, #15
 80010c4:	4a0c      	ldr	r2, [pc, #48]	; (80010f8 <SystemCoreClockUpdate+0xf4>)
 80010c6:	5cd3      	ldrb	r3, [r2, r3]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80010cc:	4b07      	ldr	r3, [pc, #28]	; (80010ec <SystemCoreClockUpdate+0xe8>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	fa22 f303 	lsr.w	r3, r2, r3
 80010d6:	4a05      	ldr	r2, [pc, #20]	; (80010ec <SystemCoreClockUpdate+0xe8>)
 80010d8:	6013      	str	r3, [r2, #0]
}
 80010da:	bf00      	nop
 80010dc:	371c      	adds	r7, #28
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	40023800 	.word	0x40023800
 80010ec:	20000000 	.word	0x20000000
 80010f0:	00f42400 	.word	0x00f42400
 80010f4:	017d7840 	.word	0x017d7840
 80010f8:	20000004 	.word	0x20000004

080010fc <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	607b      	str	r3, [r7, #4]
 8001106:	2300      	movs	r3, #0
 8001108:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800110a:	4a36      	ldr	r2, [pc, #216]	; (80011e4 <SetSysClock+0xe8>)
 800110c:	4b35      	ldr	r3, [pc, #212]	; (80011e4 <SetSysClock+0xe8>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001114:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001116:	4b33      	ldr	r3, [pc, #204]	; (80011e4 <SetSysClock+0xe8>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3301      	adds	r3, #1
 8001124:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d103      	bne.n	8001134 <SetSysClock+0x38>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001132:	d1f0      	bne.n	8001116 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001134:	4b2b      	ldr	r3, [pc, #172]	; (80011e4 <SetSysClock+0xe8>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d002      	beq.n	8001146 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001140:	2301      	movs	r3, #1
 8001142:	603b      	str	r3, [r7, #0]
 8001144:	e001      	b.n	800114a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001146:	2300      	movs	r3, #0
 8001148:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d142      	bne.n	80011d6 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001150:	4a24      	ldr	r2, [pc, #144]	; (80011e4 <SetSysClock+0xe8>)
 8001152:	4b24      	ldr	r3, [pc, #144]	; (80011e4 <SetSysClock+0xe8>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800115a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800115c:	4a22      	ldr	r2, [pc, #136]	; (80011e8 <SetSysClock+0xec>)
 800115e:	4b22      	ldr	r3, [pc, #136]	; (80011e8 <SetSysClock+0xec>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001166:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001168:	4a1e      	ldr	r2, [pc, #120]	; (80011e4 <SetSysClock+0xe8>)
 800116a:	4b1e      	ldr	r3, [pc, #120]	; (80011e4 <SetSysClock+0xe8>)
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001170:	4a1c      	ldr	r2, [pc, #112]	; (80011e4 <SetSysClock+0xe8>)
 8001172:	4b1c      	ldr	r3, [pc, #112]	; (80011e4 <SetSysClock+0xe8>)
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800117a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800117c:	4a19      	ldr	r2, [pc, #100]	; (80011e4 <SetSysClock+0xe8>)
 800117e:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <SetSysClock+0xe8>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001186:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001188:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <SetSysClock+0xe8>)
 800118a:	4a18      	ldr	r2, [pc, #96]	; (80011ec <SetSysClock+0xf0>)
 800118c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800118e:	4a15      	ldr	r2, [pc, #84]	; (80011e4 <SetSysClock+0xe8>)
 8001190:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <SetSysClock+0xe8>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001198:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800119a:	bf00      	nop
 800119c:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <SetSysClock+0xe8>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d0f9      	beq.n	800119c <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80011a8:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <SetSysClock+0xf4>)
 80011aa:	f240 7205 	movw	r2, #1797	; 0x705
 80011ae:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80011b0:	4a0c      	ldr	r2, [pc, #48]	; (80011e4 <SetSysClock+0xe8>)
 80011b2:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <SetSysClock+0xe8>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f023 0303 	bic.w	r3, r3, #3
 80011ba:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80011bc:	4a09      	ldr	r2, [pc, #36]	; (80011e4 <SetSysClock+0xe8>)
 80011be:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <SetSysClock+0xe8>)
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	f043 0302 	orr.w	r3, r3, #2
 80011c6:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80011c8:	bf00      	nop
 80011ca:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <SetSysClock+0xe8>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f003 030c 	and.w	r3, r3, #12
 80011d2:	2b08      	cmp	r3, #8
 80011d4:	d1f9      	bne.n	80011ca <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40007000 	.word	0x40007000
 80011ec:	07405419 	.word	0x07405419
 80011f0:	40023c00 	.word	0x40023c00

080011f4 <__libc_init_array>:
 80011f4:	b570      	push	{r4, r5, r6, lr}
 80011f6:	4e0d      	ldr	r6, [pc, #52]	; (800122c <__libc_init_array+0x38>)
 80011f8:	4c0d      	ldr	r4, [pc, #52]	; (8001230 <__libc_init_array+0x3c>)
 80011fa:	1ba4      	subs	r4, r4, r6
 80011fc:	10a4      	asrs	r4, r4, #2
 80011fe:	2500      	movs	r5, #0
 8001200:	42a5      	cmp	r5, r4
 8001202:	d109      	bne.n	8001218 <__libc_init_array+0x24>
 8001204:	4e0b      	ldr	r6, [pc, #44]	; (8001234 <__libc_init_array+0x40>)
 8001206:	4c0c      	ldr	r4, [pc, #48]	; (8001238 <__libc_init_array+0x44>)
 8001208:	f000 f818 	bl	800123c <_init>
 800120c:	1ba4      	subs	r4, r4, r6
 800120e:	10a4      	asrs	r4, r4, #2
 8001210:	2500      	movs	r5, #0
 8001212:	42a5      	cmp	r5, r4
 8001214:	d105      	bne.n	8001222 <__libc_init_array+0x2e>
 8001216:	bd70      	pop	{r4, r5, r6, pc}
 8001218:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800121c:	4798      	blx	r3
 800121e:	3501      	adds	r5, #1
 8001220:	e7ee      	b.n	8001200 <__libc_init_array+0xc>
 8001222:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001226:	4798      	blx	r3
 8001228:	3501      	adds	r5, #1
 800122a:	e7f2      	b.n	8001212 <__libc_init_array+0x1e>
 800122c:	08001254 	.word	0x08001254
 8001230:	08001254 	.word	0x08001254
 8001234:	08001254 	.word	0x08001254
 8001238:	08001258 	.word	0x08001258

0800123c <_init>:
 800123c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800123e:	bf00      	nop
 8001240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001242:	bc08      	pop	{r3}
 8001244:	469e      	mov	lr, r3
 8001246:	4770      	bx	lr

08001248 <_fini>:
 8001248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800124a:	bf00      	nop
 800124c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800124e:	bc08      	pop	{r3}
 8001250:	469e      	mov	lr, r3
 8001252:	4770      	bx	lr
