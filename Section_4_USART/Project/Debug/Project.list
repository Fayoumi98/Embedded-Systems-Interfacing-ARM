
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cd0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000e58  08000e58  00010e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000e80  08000e80  00010e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000e84  08000e84  00010e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  08000e88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
  7 .bss          00000088  20000014  20000014  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2000009c  2000009c  00020014  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   00002638  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000936  00000000  00000000  0002267c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000208  00000000  00000000  00022fb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001a0  00000000  00000000  000231c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00000ef1  00000000  00000000  00023360  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00000d24  00000000  00000000  00024251  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00024f75  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000638  00000000  00000000  00024ff4  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0002562c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000e40 	.word	0x08000e40

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08000e40 	.word	0x08000e40

080001c8 <main>:


#define BUFFER_SIZE 100

int main(void)
{
 80001c8:	b5b0      	push	{r4, r5, r7, lr}
 80001ca:	b0a0      	sub	sp, #128	; 0x80
 80001cc:	af00      	add	r7, sp, #0
	uint8_t data[] = "This is a USART1 Driver";
 80001ce:	4b16      	ldr	r3, [pc, #88]	; (8000228 <main+0x60>)
 80001d0:	f107 0468 	add.w	r4, r7, #104	; 0x68
 80001d4:	461d      	mov	r5, r3
 80001d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001da:	e895 0003 	ldmia.w	r5, {r0, r1}
 80001de:	e884 0003 	stmia.w	r4, {r0, r1}
	uint8_t received_data[BUFFER_SIZE];

	SysTick_Init();
 80001e2:	f000 f881 	bl	80002e8 <SysTick_Init>

	USART1_GPIO_Enable();
 80001e6:	f000 fa95 	bl	8000714 <USART1_GPIO_Enable>

	USART1_Init();
 80001ea:	f000 fafd 	bl	80007e8 <USART1_Init>

	USART1_Enable();
 80001ee:	f000 fb41 	bl	8000874 <USART1_Enable>

	USART1_WriteString(data);
 80001f2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80001f6:	4618      	mov	r0, r3
 80001f8:	f000 fb88 	bl	800090c <USART1_WriteString>
	USART1_WriteString("\r\n");
 80001fc:	480b      	ldr	r0, [pc, #44]	; (800022c <main+0x64>)
 80001fe:	f000 fb85 	bl	800090c <USART1_WriteString>

	while (1)
	{
		if (USART1_ReceiveString(received_data, BUFFER_SIZE))
 8000202:	1d3b      	adds	r3, r7, #4
 8000204:	2164      	movs	r1, #100	; 0x64
 8000206:	4618      	mov	r0, r3
 8000208:	f000 fb94 	bl	8000934 <USART1_ReceiveString>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d0f7      	beq.n	8000202 <main+0x3a>
		{
			// Do something with the received string
			// For example, echo it back
			USART1_WriteString("Received: ");
 8000212:	4807      	ldr	r0, [pc, #28]	; (8000230 <main+0x68>)
 8000214:	f000 fb7a 	bl	800090c <USART1_WriteString>
			USART1_WriteString(received_data);
 8000218:	1d3b      	adds	r3, r7, #4
 800021a:	4618      	mov	r0, r3
 800021c:	f000 fb76 	bl	800090c <USART1_WriteString>
			USART1_WriteString("\r\n");
 8000220:	4802      	ldr	r0, [pc, #8]	; (800022c <main+0x64>)
 8000222:	f000 fb73 	bl	800090c <USART1_WriteString>
		if (USART1_ReceiveString(received_data, BUFFER_SIZE))
 8000226:	e7ec      	b.n	8000202 <main+0x3a>
 8000228:	08000e68 	.word	0x08000e68
 800022c:	08000e58 	.word	0x08000e58
 8000230:	08000e5c 	.word	0x08000e5c

08000234 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000234:	b480      	push	{r7}
 8000236:	b083      	sub	sp, #12
 8000238:	af00      	add	r7, sp, #0
 800023a:	4603      	mov	r3, r0
 800023c:	6039      	str	r1, [r7, #0]
 800023e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000244:	2b00      	cmp	r3, #0
 8000246:	da0b      	bge.n	8000260 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000248:	490d      	ldr	r1, [pc, #52]	; (8000280 <NVIC_SetPriority+0x4c>)
 800024a:	79fb      	ldrb	r3, [r7, #7]
 800024c:	f003 030f 	and.w	r3, r3, #15
 8000250:	3b04      	subs	r3, #4
 8000252:	683a      	ldr	r2, [r7, #0]
 8000254:	b2d2      	uxtb	r2, r2
 8000256:	0112      	lsls	r2, r2, #4
 8000258:	b2d2      	uxtb	r2, r2
 800025a:	440b      	add	r3, r1
 800025c:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 800025e:	e009      	b.n	8000274 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000260:	4908      	ldr	r1, [pc, #32]	; (8000284 <NVIC_SetPriority+0x50>)
 8000262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000266:	683a      	ldr	r2, [r7, #0]
 8000268:	b2d2      	uxtb	r2, r2
 800026a:	0112      	lsls	r2, r2, #4
 800026c:	b2d2      	uxtb	r2, r2
 800026e:	440b      	add	r3, r1
 8000270:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000274:	bf00      	nop
 8000276:	370c      	adds	r7, #12
 8000278:	46bd      	mov	sp, r7
 800027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027e:	4770      	bx	lr
 8000280:	e000ed00 	.word	0xe000ed00
 8000284:	e000e100 	.word	0xe000e100

08000288 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000296:	d301      	bcc.n	800029c <SysTick_Config+0x14>
 8000298:	2301      	movs	r3, #1
 800029a:	e011      	b.n	80002c0 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 800029c:	4a0a      	ldr	r2, [pc, #40]	; (80002c8 <SysTick_Config+0x40>)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80002a4:	3b01      	subs	r3, #1
 80002a6:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 80002a8:	210f      	movs	r1, #15
 80002aa:	f04f 30ff 	mov.w	r0, #4294967295
 80002ae:	f7ff ffc1 	bl	8000234 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80002b2:	4b05      	ldr	r3, [pc, #20]	; (80002c8 <SysTick_Config+0x40>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <SysTick_Config+0x40>)
 80002ba:	2207      	movs	r2, #7
 80002bc:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80002be:	2300      	movs	r3, #0
}
 80002c0:	4618      	mov	r0, r3
 80002c2:	3708      	adds	r7, #8
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	e000e010 	.word	0xe000e010

080002cc <SysTick_IncrementTicks_cb>:
* Purpose      : Increment SysTick counter callback
* Parameters   : void
* Return value : void
*****************************************************************************/
void SysTick_IncrementTicks_cb(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
  ++SysTickCounter;
 80002d0:	4b04      	ldr	r3, [pc, #16]	; (80002e4 <SysTick_IncrementTicks_cb+0x18>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	3301      	adds	r3, #1
 80002d6:	4a03      	ldr	r2, [pc, #12]	; (80002e4 <SysTick_IncrementTicks_cb+0x18>)
 80002d8:	6013      	str	r3, [r2, #0]
}
 80002da:	bf00      	nop
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr
 80002e4:	20000030 	.word	0x20000030

080002e8 <SysTick_Init>:
* Purpose      : SysTick initial configuration
* Parameters   : void
* Return value : void
*****************************************************************************/
void SysTick_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
  /* Update clock configuration */
  SystemCoreClockUpdate();
 80002ec:	f000 fc8c 	bl	8000c08 <SystemCoreClockUpdate>

  /* Configure SysTick to generate an interrupt every millisecond */
  SysTick_Config(SystemCoreClock / 1000);
 80002f0:	4b05      	ldr	r3, [pc, #20]	; (8000308 <SysTick_Init+0x20>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a05      	ldr	r2, [pc, #20]	; (800030c <SysTick_Init+0x24>)
 80002f6:	fba2 2303 	umull	r2, r3, r2, r3
 80002fa:	099b      	lsrs	r3, r3, #6
 80002fc:	4618      	mov	r0, r3
 80002fe:	f7ff ffc3 	bl	8000288 <SysTick_Config>
}
 8000302:	bf00      	nop
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	20000000 	.word	0x20000000
 800030c:	10624dd3 	.word	0x10624dd3

08000310 <pin_config>:




void pin_config(GPIO_TypeDef *port,uint32_t pin, uint32_t pinMode, uint32_t pull)
{
 8000310:	b480      	push	{r7}
 8000312:	b085      	sub	sp, #20
 8000314:	af00      	add	r7, sp, #0
 8000316:	60f8      	str	r0, [r7, #12]
 8000318:	60b9      	str	r1, [r7, #8]
 800031a:	607a      	str	r2, [r7, #4]
 800031c:	603b      	str	r3, [r7, #0]
	switch(pinMode)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	2b04      	cmp	r3, #4
 8000322:	f200 80c8 	bhi.w	80004b6 <pin_config+0x1a6>
 8000326:	a201      	add	r2, pc, #4	; (adr r2, 800032c <pin_config+0x1c>)
 8000328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800032c:	08000341 	.word	0x08000341
 8000330:	080003d9 	.word	0x080003d9
 8000334:	0800041b 	.word	0x0800041b
 8000338:	0800045b 	.word	0x0800045b
 800033c:	08000489 	.word	0x08000489
	{
		case INPUT_MODE:
			CLRBIT(port->MODER,(pin*2));
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	68ba      	ldr	r2, [r7, #8]
 8000346:	0052      	lsls	r2, r2, #1
 8000348:	2101      	movs	r1, #1
 800034a:	fa01 f202 	lsl.w	r2, r1, r2
 800034e:	43d2      	mvns	r2, r2
 8000350:	401a      	ands	r2, r3
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	601a      	str	r2, [r3, #0]
			CLRBIT(port->MODER,((pin*2)+1));
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	68ba      	ldr	r2, [r7, #8]
 800035c:	0052      	lsls	r2, r2, #1
 800035e:	3201      	adds	r2, #1
 8000360:	2101      	movs	r1, #1
 8000362:	fa01 f202 	lsl.w	r2, r1, r2
 8000366:	43d2      	mvns	r2, r2
 8000368:	401a      	ands	r2, r3
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	601a      	str	r2, [r3, #0]
			if(pull == PULL_UP)
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	2b01      	cmp	r3, #1
 8000372:	d116      	bne.n	80003a2 <pin_config+0x92>
			{
				SETBIT(port->PUPDR,(pin*2));
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	68db      	ldr	r3, [r3, #12]
 8000378:	68ba      	ldr	r2, [r7, #8]
 800037a:	0052      	lsls	r2, r2, #1
 800037c:	2101      	movs	r1, #1
 800037e:	fa01 f202 	lsl.w	r2, r1, r2
 8000382:	431a      	orrs	r2, r3
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	60da      	str	r2, [r3, #12]
				CLRBIT(port->PUPDR,((pin*2)+1));
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	68db      	ldr	r3, [r3, #12]
 800038c:	68ba      	ldr	r2, [r7, #8]
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	3201      	adds	r2, #1
 8000392:	2101      	movs	r1, #1
 8000394:	fa01 f202 	lsl.w	r2, r1, r2
 8000398:	43d2      	mvns	r2, r2
 800039a:	401a      	ands	r2, r3
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	60da      	str	r2, [r3, #12]
			else if(pull == PULL_DOWN)
			{
				CLRBIT(port->PUPDR,(pin*2));
				SETBIT(port->PUPDR,((pin*2)+1));
			}
			break;
 80003a0:	e088      	b.n	80004b4 <pin_config+0x1a4>
			else if(pull == PULL_DOWN)
 80003a2:	683b      	ldr	r3, [r7, #0]
 80003a4:	2b02      	cmp	r3, #2
 80003a6:	f040 8085 	bne.w	80004b4 <pin_config+0x1a4>
				CLRBIT(port->PUPDR,(pin*2));
 80003aa:	68fb      	ldr	r3, [r7, #12]
 80003ac:	68db      	ldr	r3, [r3, #12]
 80003ae:	68ba      	ldr	r2, [r7, #8]
 80003b0:	0052      	lsls	r2, r2, #1
 80003b2:	2101      	movs	r1, #1
 80003b4:	fa01 f202 	lsl.w	r2, r1, r2
 80003b8:	43d2      	mvns	r2, r2
 80003ba:	401a      	ands	r2, r3
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	60da      	str	r2, [r3, #12]
				SETBIT(port->PUPDR,((pin*2)+1));
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	68db      	ldr	r3, [r3, #12]
 80003c4:	68ba      	ldr	r2, [r7, #8]
 80003c6:	0052      	lsls	r2, r2, #1
 80003c8:	3201      	adds	r2, #1
 80003ca:	2101      	movs	r1, #1
 80003cc:	fa01 f202 	lsl.w	r2, r1, r2
 80003d0:	431a      	orrs	r2, r3
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	60da      	str	r2, [r3, #12]
			break;
 80003d6:	e06d      	b.n	80004b4 <pin_config+0x1a4>
		case OUTPUT_PUSH_PULL:
			SETBIT(port->MODER,(pin*2));
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	68ba      	ldr	r2, [r7, #8]
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	2101      	movs	r1, #1
 80003e2:	fa01 f202 	lsl.w	r2, r1, r2
 80003e6:	431a      	orrs	r2, r3
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	601a      	str	r2, [r3, #0]
			CLRBIT(port->MODER,((pin*2)+1));
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	68ba      	ldr	r2, [r7, #8]
 80003f2:	0052      	lsls	r2, r2, #1
 80003f4:	3201      	adds	r2, #1
 80003f6:	2101      	movs	r1, #1
 80003f8:	fa01 f202 	lsl.w	r2, r1, r2
 80003fc:	43d2      	mvns	r2, r2
 80003fe:	401a      	ands	r2, r3
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	601a      	str	r2, [r3, #0]
			CLRBIT(port->OTYPER,pin);
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	685b      	ldr	r3, [r3, #4]
 8000408:	2101      	movs	r1, #1
 800040a:	68ba      	ldr	r2, [r7, #8]
 800040c:	fa01 f202 	lsl.w	r2, r1, r2
 8000410:	43d2      	mvns	r2, r2
 8000412:	401a      	ands	r2, r3
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	605a      	str	r2, [r3, #4]
			break;
 8000418:	e04d      	b.n	80004b6 <pin_config+0x1a6>
		case OUTPUT_OPEN_DRAIN:
			SETBIT(port->MODER,(pin*2));
 800041a:	68fb      	ldr	r3, [r7, #12]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	68ba      	ldr	r2, [r7, #8]
 8000420:	0052      	lsls	r2, r2, #1
 8000422:	2101      	movs	r1, #1
 8000424:	fa01 f202 	lsl.w	r2, r1, r2
 8000428:	431a      	orrs	r2, r3
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	601a      	str	r2, [r3, #0]
			CLRBIT(port->MODER,((pin*2)+1));
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	68ba      	ldr	r2, [r7, #8]
 8000434:	0052      	lsls	r2, r2, #1
 8000436:	3201      	adds	r2, #1
 8000438:	2101      	movs	r1, #1
 800043a:	fa01 f202 	lsl.w	r2, r1, r2
 800043e:	43d2      	mvns	r2, r2
 8000440:	401a      	ands	r2, r3
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	601a      	str	r2, [r3, #0]
			SETBIT(port->OTYPER,pin);
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	685b      	ldr	r3, [r3, #4]
 800044a:	2101      	movs	r1, #1
 800044c:	68ba      	ldr	r2, [r7, #8]
 800044e:	fa01 f202 	lsl.w	r2, r1, r2
 8000452:	431a      	orrs	r2, r3
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	605a      	str	r2, [r3, #4]
			break;
 8000458:	e02d      	b.n	80004b6 <pin_config+0x1a6>
		case ALT_FUNC_MODE:
			CLRBIT(port->MODER,(pin*2));
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	68ba      	ldr	r2, [r7, #8]
 8000460:	0052      	lsls	r2, r2, #1
 8000462:	2101      	movs	r1, #1
 8000464:	fa01 f202 	lsl.w	r2, r1, r2
 8000468:	43d2      	mvns	r2, r2
 800046a:	401a      	ands	r2, r3
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	601a      	str	r2, [r3, #0]
			SETBIT(port->MODER,((pin*2)+1));
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	68ba      	ldr	r2, [r7, #8]
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	3201      	adds	r2, #1
 800047a:	2101      	movs	r1, #1
 800047c:	fa01 f202 	lsl.w	r2, r1, r2
 8000480:	431a      	orrs	r2, r3
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	601a      	str	r2, [r3, #0]
			break;
 8000486:	e016      	b.n	80004b6 <pin_config+0x1a6>
		case ANALOG_MODE:
			SETBIT(port->MODER,(pin*2));
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	68ba      	ldr	r2, [r7, #8]
 800048e:	0052      	lsls	r2, r2, #1
 8000490:	2101      	movs	r1, #1
 8000492:	fa01 f202 	lsl.w	r2, r1, r2
 8000496:	431a      	orrs	r2, r3
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	601a      	str	r2, [r3, #0]
			SETBIT(port->MODER,((pin*2)+1));
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	68ba      	ldr	r2, [r7, #8]
 80004a2:	0052      	lsls	r2, r2, #1
 80004a4:	3201      	adds	r2, #1
 80004a6:	2101      	movs	r1, #1
 80004a8:	fa01 f202 	lsl.w	r2, r1, r2
 80004ac:	431a      	orrs	r2, r3
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	601a      	str	r2, [r3, #0]
			break;
 80004b2:	e000      	b.n	80004b6 <pin_config+0x1a6>
			break;
 80004b4:	bf00      	nop
	}
}
 80004b6:	bf00      	nop
 80004b8:	3714      	adds	r7, #20
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <pin_speed_config>:




void pin_speed_config(GPIO_TypeDef *port,uint32_t pin, uint32_t speed)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b085      	sub	sp, #20
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	60f8      	str	r0, [r7, #12]
 80004cc:	60b9      	str	r1, [r7, #8]
 80004ce:	607a      	str	r2, [r7, #4]
	switch(speed)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	2b03      	cmp	r3, #3
 80004d4:	d866      	bhi.n	80005a4 <pin_speed_config+0xe0>
 80004d6:	a201      	add	r2, pc, #4	; (adr r2, 80004dc <pin_speed_config+0x18>)
 80004d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004dc:	080004ed 	.word	0x080004ed
 80004e0:	0800051d 	.word	0x0800051d
 80004e4:	0800054b 	.word	0x0800054b
 80004e8:	08000579 	.word	0x08000579
	{
		case LOW_SPEED:
			CLRBIT(port->OSPEEDR,(pin*2));
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	689b      	ldr	r3, [r3, #8]
 80004f0:	68ba      	ldr	r2, [r7, #8]
 80004f2:	0052      	lsls	r2, r2, #1
 80004f4:	2101      	movs	r1, #1
 80004f6:	fa01 f202 	lsl.w	r2, r1, r2
 80004fa:	43d2      	mvns	r2, r2
 80004fc:	401a      	ands	r2, r3
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	609a      	str	r2, [r3, #8]
			CLRBIT(port->OSPEEDR,((pin*2)+1));
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	689b      	ldr	r3, [r3, #8]
 8000506:	68ba      	ldr	r2, [r7, #8]
 8000508:	0052      	lsls	r2, r2, #1
 800050a:	3201      	adds	r2, #1
 800050c:	2101      	movs	r1, #1
 800050e:	fa01 f202 	lsl.w	r2, r1, r2
 8000512:	43d2      	mvns	r2, r2
 8000514:	401a      	ands	r2, r3
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	609a      	str	r2, [r3, #8]
			break;
 800051a:	e043      	b.n	80005a4 <pin_speed_config+0xe0>
		case MEDIUM_SPEED:
			CLRBIT(port->OSPEEDR,(pin*2));
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	689b      	ldr	r3, [r3, #8]
 8000520:	68ba      	ldr	r2, [r7, #8]
 8000522:	0052      	lsls	r2, r2, #1
 8000524:	2101      	movs	r1, #1
 8000526:	fa01 f202 	lsl.w	r2, r1, r2
 800052a:	43d2      	mvns	r2, r2
 800052c:	401a      	ands	r2, r3
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	609a      	str	r2, [r3, #8]
			SETBIT(port->OSPEEDR,((pin*2)+1));
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	689b      	ldr	r3, [r3, #8]
 8000536:	68ba      	ldr	r2, [r7, #8]
 8000538:	0052      	lsls	r2, r2, #1
 800053a:	3201      	adds	r2, #1
 800053c:	2101      	movs	r1, #1
 800053e:	fa01 f202 	lsl.w	r2, r1, r2
 8000542:	431a      	orrs	r2, r3
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	609a      	str	r2, [r3, #8]
			break;
 8000548:	e02c      	b.n	80005a4 <pin_speed_config+0xe0>
		case HIGH_SPEED:
			SETBIT(port->OSPEEDR,(pin*2));
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	689b      	ldr	r3, [r3, #8]
 800054e:	68ba      	ldr	r2, [r7, #8]
 8000550:	0052      	lsls	r2, r2, #1
 8000552:	2101      	movs	r1, #1
 8000554:	fa01 f202 	lsl.w	r2, r1, r2
 8000558:	431a      	orrs	r2, r3
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	609a      	str	r2, [r3, #8]
			CLRBIT(port->OSPEEDR,((pin*2)+1));
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	689b      	ldr	r3, [r3, #8]
 8000562:	68ba      	ldr	r2, [r7, #8]
 8000564:	0052      	lsls	r2, r2, #1
 8000566:	3201      	adds	r2, #1
 8000568:	2101      	movs	r1, #1
 800056a:	fa01 f202 	lsl.w	r2, r1, r2
 800056e:	43d2      	mvns	r2, r2
 8000570:	401a      	ands	r2, r3
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	609a      	str	r2, [r3, #8]
			break;
 8000576:	e015      	b.n	80005a4 <pin_speed_config+0xe0>
		case VERY_HIGH_SPEED:
			SETBIT(port->OSPEEDR,(pin*2));
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	689b      	ldr	r3, [r3, #8]
 800057c:	68ba      	ldr	r2, [r7, #8]
 800057e:	0052      	lsls	r2, r2, #1
 8000580:	2101      	movs	r1, #1
 8000582:	fa01 f202 	lsl.w	r2, r1, r2
 8000586:	431a      	orrs	r2, r3
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	609a      	str	r2, [r3, #8]
			SETBIT(port->OSPEEDR,((pin*2)+1));
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	68ba      	ldr	r2, [r7, #8]
 8000592:	0052      	lsls	r2, r2, #1
 8000594:	3201      	adds	r2, #1
 8000596:	2101      	movs	r1, #1
 8000598:	fa01 f202 	lsl.w	r2, r1, r2
 800059c:	431a      	orrs	r2, r3
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	609a      	str	r2, [r3, #8]
			break;
 80005a2:	bf00      	nop
	}
}
 80005a4:	bf00      	nop
 80005a6:	3714      	adds	r7, #20
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr

080005b0 <gpio_write>:



void gpio_write(GPIO_TypeDef *port, uint32_t pin, uint8_t state)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	4613      	mov	r3, r2
 80005bc:	71fb      	strb	r3, [r7, #7]
	if(state == 1)
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d10e      	bne.n	80005e2 <gpio_write+0x32>
	{
		SETBIT(port->BSRRL,pin);
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	8b1b      	ldrh	r3, [r3, #24]
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	b21a      	sxth	r2, r3
 80005cc:	2101      	movs	r1, #1
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	fa01 f303 	lsl.w	r3, r1, r3
 80005d4:	b21b      	sxth	r3, r3
 80005d6:	4313      	orrs	r3, r2
 80005d8:	b21b      	sxth	r3, r3
 80005da:	b29a      	uxth	r2, r3
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	831a      	strh	r2, [r3, #24]
	else if(state == 0)
	{
		CLRBIT(port->BSRRL,pin);
		SETBIT(port->BSRRH,pin);
	}
}
 80005e0:	e020      	b.n	8000624 <gpio_write+0x74>
	else if(state == 0)
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d11d      	bne.n	8000624 <gpio_write+0x74>
		CLRBIT(port->BSRRL,pin);
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	8b1b      	ldrh	r3, [r3, #24]
 80005ec:	b29b      	uxth	r3, r3
 80005ee:	b21a      	sxth	r2, r3
 80005f0:	2101      	movs	r1, #1
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	fa01 f303 	lsl.w	r3, r1, r3
 80005f8:	b21b      	sxth	r3, r3
 80005fa:	43db      	mvns	r3, r3
 80005fc:	b21b      	sxth	r3, r3
 80005fe:	4013      	ands	r3, r2
 8000600:	b21b      	sxth	r3, r3
 8000602:	b29a      	uxth	r2, r3
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	831a      	strh	r2, [r3, #24]
		SETBIT(port->BSRRH,pin);
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	8b5b      	ldrh	r3, [r3, #26]
 800060c:	b29b      	uxth	r3, r3
 800060e:	b21a      	sxth	r2, r3
 8000610:	2101      	movs	r1, #1
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	fa01 f303 	lsl.w	r3, r1, r3
 8000618:	b21b      	sxth	r3, r3
 800061a:	4313      	orrs	r3, r2
 800061c:	b21b      	sxth	r3, r3
 800061e:	b29a      	uxth	r2, r3
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	835a      	strh	r2, [r3, #26]
}
 8000624:	bf00      	nop
 8000626:	3714      	adds	r7, #20
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr

08000630 <gpio_init>:
	SysTick_Delay(100);
}


void gpio_init(GPIO_TYPE gpio)
{
 8000630:	b084      	sub	sp, #16
 8000632:	b580      	push	{r7, lr}
 8000634:	af00      	add	r7, sp, #0
 8000636:	f107 0e08 	add.w	lr, r7, #8
 800063a:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
	if(gpio.port == PORTA)
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	4a21      	ldr	r2, [pc, #132]	; (80006c8 <gpio_init+0x98>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d105      	bne.n	8000652 <gpio_init+0x22>
	{
		PORTA_CLOCK_EN;
 8000646:	4a21      	ldr	r2, [pc, #132]	; (80006cc <gpio_init+0x9c>)
 8000648:	4b20      	ldr	r3, [pc, #128]	; (80006cc <gpio_init+0x9c>)
 800064a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
	}
	if(gpio.port == PORTB)
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	4a1e      	ldr	r2, [pc, #120]	; (80006d0 <gpio_init+0xa0>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d105      	bne.n	8000666 <gpio_init+0x36>
	{
		PORTB_CLOCK_EN;
 800065a:	4a1c      	ldr	r2, [pc, #112]	; (80006cc <gpio_init+0x9c>)
 800065c:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <gpio_init+0x9c>)
 800065e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000660:	f043 0302 	orr.w	r3, r3, #2
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
	}
	if(gpio.port == PORTC)
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	4a1a      	ldr	r2, [pc, #104]	; (80006d4 <gpio_init+0xa4>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d105      	bne.n	800067a <gpio_init+0x4a>
	{
		PORTC_CLOCK_EN;
 800066e:	4a17      	ldr	r2, [pc, #92]	; (80006cc <gpio_init+0x9c>)
 8000670:	4b16      	ldr	r3, [pc, #88]	; (80006cc <gpio_init+0x9c>)
 8000672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000674:	f043 0304 	orr.w	r3, r3, #4
 8000678:	6313      	str	r3, [r2, #48]	; 0x30
	}
	if(gpio.port == PORTD)
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	4a16      	ldr	r2, [pc, #88]	; (80006d8 <gpio_init+0xa8>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d105      	bne.n	800068e <gpio_init+0x5e>
	{
		PORTD_CLOCK_EN;
 8000682:	4a12      	ldr	r2, [pc, #72]	; (80006cc <gpio_init+0x9c>)
 8000684:	4b11      	ldr	r3, [pc, #68]	; (80006cc <gpio_init+0x9c>)
 8000686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000688:	f043 0308 	orr.w	r3, r3, #8
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
	}
	if(gpio.port == PORTE)
 800068e:	68bb      	ldr	r3, [r7, #8]
 8000690:	4a12      	ldr	r2, [pc, #72]	; (80006dc <gpio_init+0xac>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d105      	bne.n	80006a2 <gpio_init+0x72>
	{
		PORTE_CLOCK_EN;
 8000696:	4a0d      	ldr	r2, [pc, #52]	; (80006cc <gpio_init+0x9c>)
 8000698:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <gpio_init+0x9c>)
 800069a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069c:	f043 0310 	orr.w	r3, r3, #16
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
	}

	pin_config(gpio.port,gpio.pin,gpio.mode,gpio.pull);
 80006a2:	68b8      	ldr	r0, [r7, #8]
 80006a4:	68f9      	ldr	r1, [r7, #12]
 80006a6:	693a      	ldr	r2, [r7, #16]
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	f7ff fe31 	bl	8000310 <pin_config>
	pin_speed_config(gpio.port,gpio.pin,gpio.speed);
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	68f9      	ldr	r1, [r7, #12]
 80006b2:	69ba      	ldr	r2, [r7, #24]
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff ff05 	bl	80004c4 <pin_speed_config>
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006c2:	b004      	add	sp, #16
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	40020000 	.word	0x40020000
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40020400 	.word	0x40020400
 80006d4:	40020800 	.word	0x40020800
 80006d8:	40020c00 	.word	0x40020c00
 80006dc:	40021000 	.word	0x40021000

080006e0 <NVIC_EnableIRQ>:
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80006ea:	4909      	ldr	r1, [pc, #36]	; (8000710 <NVIC_EnableIRQ+0x30>)
 80006ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f0:	095b      	lsrs	r3, r3, #5
 80006f2:	79fa      	ldrb	r2, [r7, #7]
 80006f4:	f002 021f 	and.w	r2, r2, #31
 80006f8:	2001      	movs	r0, #1
 80006fa:	fa00 f202 	lsl.w	r2, r0, r2
 80006fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000702:	bf00      	nop
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	e000e100 	.word	0xe000e100

08000714 <USART1_GPIO_Enable>:
volatile uint8_t rx_complete = 0;



void USART1_GPIO_Enable(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08e      	sub	sp, #56	; 0x38
 8000718:	af02      	add	r7, sp, #8
	GPIO_TYPE TX;
	TX.port = PORTA;
 800071a:	4b32      	ldr	r3, [pc, #200]	; (80007e4 <USART1_GPIO_Enable+0xd0>)
 800071c:	61bb      	str	r3, [r7, #24]
	TX.pin = 9;
 800071e:	2309      	movs	r3, #9
 8000720:	61fb      	str	r3, [r7, #28]
	TX.mode = ALT_FUNC_MODE;
 8000722:	2303      	movs	r3, #3
 8000724:	623b      	str	r3, [r7, #32]
	TX.speed = MEDIUM_SPEED;
 8000726:	2301      	movs	r3, #1
 8000728:	62bb      	str	r3, [r7, #40]	; 0x28

	GPIO_TYPE RX;
	RX.port = PORTA;
 800072a:	4b2e      	ldr	r3, [pc, #184]	; (80007e4 <USART1_GPIO_Enable+0xd0>)
 800072c:	603b      	str	r3, [r7, #0]
	RX.pin = 10;
 800072e:	230a      	movs	r3, #10
 8000730:	607b      	str	r3, [r7, #4]
	RX.mode = ALT_FUNC_MODE;
 8000732:	2303      	movs	r3, #3
 8000734:	60bb      	str	r3, [r7, #8]


	// initialize clock for port A
	gpio_init(TX);
 8000736:	466a      	mov	r2, sp
 8000738:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800073c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000740:	e882 0003 	stmia.w	r2, {r0, r1}
 8000744:	f107 0318 	add.w	r3, r7, #24
 8000748:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800074a:	f7ff ff71 	bl	8000630 <gpio_init>

	// select alternate function mode
	pin_config(TX.port , TX.pin , TX.mode , 99);
 800074e:	69b8      	ldr	r0, [r7, #24]
 8000750:	69f9      	ldr	r1, [r7, #28]
 8000752:	6a3a      	ldr	r2, [r7, #32]
 8000754:	2363      	movs	r3, #99	; 0x63
 8000756:	f7ff fddb 	bl	8000310 <pin_config>
	pin_config(RX.port , RX.pin , RX.mode , 99);
 800075a:	6838      	ldr	r0, [r7, #0]
 800075c:	6879      	ldr	r1, [r7, #4]
 800075e:	68ba      	ldr	r2, [r7, #8]
 8000760:	2363      	movs	r3, #99	; 0x63
 8000762:	f7ff fdd5 	bl	8000310 <pin_config>

	// set PA9 push-pull
	TX.port->OTYPER &= ~(GPIO_OTYPER_OT_9);
 8000766:	69bb      	ldr	r3, [r7, #24]
 8000768:	69ba      	ldr	r2, [r7, #24]
 800076a:	6852      	ldr	r2, [r2, #4]
 800076c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000770:	605a      	str	r2, [r3, #4]

	// Set output speed of PA9 to medium
	pin_speed_config(PORTA,9,MEDIUM_SPEED);
 8000772:	2201      	movs	r2, #1
 8000774:	2109      	movs	r1, #9
 8000776:	481b      	ldr	r0, [pc, #108]	; (80007e4 <USART1_GPIO_Enable+0xd0>)
 8000778:	f7ff fea4 	bl	80004c4 <pin_speed_config>

	// Select pull up
	TX.port->PUPDR &= ~GPIO_PUPDR_PUPDR9;
 800077c:	69bb      	ldr	r3, [r7, #24]
 800077e:	69ba      	ldr	r2, [r7, #24]
 8000780:	68d2      	ldr	r2, [r2, #12]
 8000782:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8000786:	60da      	str	r2, [r3, #12]
	RX.port->PUPDR &= ~GPIO_PUPDR_PUPDR10;
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	683a      	ldr	r2, [r7, #0]
 800078c:	68d2      	ldr	r2, [r2, #12]
 800078e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8000792:	60da      	str	r2, [r3, #12]
	TX.port->PUPDR |= ~GPIO_PUPDR_PUPDR9_0;
 8000794:	69bb      	ldr	r3, [r7, #24]
 8000796:	69ba      	ldr	r2, [r7, #24]
 8000798:	68d2      	ldr	r2, [r2, #12]
 800079a:	f462 2280 	orn	r2, r2, #262144	; 0x40000
 800079e:	60da      	str	r2, [r3, #12]
	RX.port->PUPDR |= ~GPIO_PUPDR_PUPDR10_0;
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	683a      	ldr	r2, [r7, #0]
 80007a4:	68d2      	ldr	r2, [r2, #12]
 80007a6:	f462 1280 	orn	r2, r2, #1048576	; 0x100000
 80007aa:	60da      	str	r2, [r3, #12]


	// Select Alternate function 7
	TX.port->AFR[1] &= ~(0xF0);
 80007ac:	69bb      	ldr	r3, [r7, #24]
 80007ae:	69ba      	ldr	r2, [r7, #24]
 80007b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80007b2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80007b6:	625a      	str	r2, [r3, #36]	; 0x24
	RX.port->AFR[1] &= ~(0xF00);
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	683a      	ldr	r2, [r7, #0]
 80007bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80007be:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80007c2:	625a      	str	r2, [r3, #36]	; 0x24
	TX.port->AFR[1] |= 0x70;
 80007c4:	69bb      	ldr	r3, [r7, #24]
 80007c6:	69ba      	ldr	r2, [r7, #24]
 80007c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80007ca:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 80007ce:	625a      	str	r2, [r3, #36]	; 0x24
	RX.port->AFR[1] |= 0x700;
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	683a      	ldr	r2, [r7, #0]
 80007d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80007d6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80007da:	625a      	str	r2, [r3, #36]	; 0x24

}
 80007dc:	bf00      	nop
 80007de:	3730      	adds	r7, #48	; 0x30
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40020000 	.word	0x40020000

080007e8 <USART1_Init>:




void USART1_Init(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
	// Enable clock for USART1
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80007ec:	4a1f      	ldr	r2, [pc, #124]	; (800086c <USART1_Init+0x84>)
 80007ee:	4b1f      	ldr	r3, [pc, #124]	; (800086c <USART1_Init+0x84>)
 80007f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f2:	f043 0310 	orr.w	r3, r3, #16
 80007f6:	6453      	str	r3, [r2, #68]	; 0x44

	// Select over-sampling by 16 mode
	USART1->CR1 &= ~(USART_CR1_OVER8);
 80007f8:	4a1d      	ldr	r2, [pc, #116]	; (8000870 <USART1_Init+0x88>)
 80007fa:	4b1d      	ldr	r3, [pc, #116]	; (8000870 <USART1_Init+0x88>)
 80007fc:	899b      	ldrh	r3, [r3, #12]
 80007fe:	b29b      	uxth	r3, r3
 8000800:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000804:	b29b      	uxth	r3, r3
 8000806:	8193      	strh	r3, [r2, #12]

	// Select one sample bit method
	USART1->CR3 |= USART_CR3_ONEBIT;
 8000808:	4a19      	ldr	r2, [pc, #100]	; (8000870 <USART1_Init+0x88>)
 800080a:	4b19      	ldr	r3, [pc, #100]	; (8000870 <USART1_Init+0x88>)
 800080c:	8a9b      	ldrh	r3, [r3, #20]
 800080e:	b29b      	uxth	r3, r3
 8000810:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000814:	b29b      	uxth	r3, r3
 8000816:	8293      	strh	r3, [r2, #20]

	// Select 1 start bit , 9 data bits , n stop bits (8 data + 1 parity)
	USART1->CR1 |= USART_CR1_M;
 8000818:	4a15      	ldr	r2, [pc, #84]	; (8000870 <USART1_Init+0x88>)
 800081a:	4b15      	ldr	r3, [pc, #84]	; (8000870 <USART1_Init+0x88>)
 800081c:	899b      	ldrh	r3, [r3, #12]
 800081e:	b29b      	uxth	r3, r3
 8000820:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000824:	b29b      	uxth	r3, r3
 8000826:	8193      	strh	r3, [r2, #12]

	// Select 1 stop bit
	USART1->CR2 &= ~USART_CR2_STOP;
 8000828:	4a11      	ldr	r2, [pc, #68]	; (8000870 <USART1_Init+0x88>)
 800082a:	4b11      	ldr	r3, [pc, #68]	; (8000870 <USART1_Init+0x88>)
 800082c:	8a1b      	ldrh	r3, [r3, #16]
 800082e:	b29b      	uxth	r3, r3
 8000830:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000834:	b29b      	uxth	r3, r3
 8000836:	8213      	strh	r3, [r2, #16]

	// Enable Parity control
	USART1->CR1 |= USART_CR1_PCE;
 8000838:	4a0d      	ldr	r2, [pc, #52]	; (8000870 <USART1_Init+0x88>)
 800083a:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <USART1_Init+0x88>)
 800083c:	899b      	ldrh	r3, [r3, #12]
 800083e:	b29b      	uxth	r3, r3
 8000840:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000844:	b29b      	uxth	r3, r3
 8000846:	8193      	strh	r3, [r2, #12]

	// Select Odd Parity
	USART1->CR1 |= USART_CR1_PS;
 8000848:	4a09      	ldr	r2, [pc, #36]	; (8000870 <USART1_Init+0x88>)
 800084a:	4b09      	ldr	r3, [pc, #36]	; (8000870 <USART1_Init+0x88>)
 800084c:	899b      	ldrh	r3, [r3, #12]
 800084e:	b29b      	uxth	r3, r3
 8000850:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000854:	b29b      	uxth	r3, r3
 8000856:	8193      	strh	r3, [r2, #12]
	 *
	 * DIV_Fraction = 16 * 0.82 = 13.12 = 13 = 0xD
	 * DIV_Mantissa = 48 = 0x30
	 * */
	// baud-rate 9600
	USART1->BRR = 0x0683;
 8000858:	4b05      	ldr	r3, [pc, #20]	; (8000870 <USART1_Init+0x88>)
 800085a:	f240 6283 	movw	r2, #1667	; 0x683
 800085e:	811a      	strh	r2, [r3, #8]

}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	40023800 	.word	0x40023800
 8000870:	40011000 	.word	0x40011000

08000874 <USART1_Enable>:




void USART1_Enable(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
	// Enable USART1
	USART1->CR1 |= USART_CR1_UE;
 8000878:	4a16      	ldr	r2, [pc, #88]	; (80008d4 <USART1_Enable+0x60>)
 800087a:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <USART1_Enable+0x60>)
 800087c:	899b      	ldrh	r3, [r3, #12]
 800087e:	b29b      	uxth	r3, r3
 8000880:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000884:	b29b      	uxth	r3, r3
 8000886:	8193      	strh	r3, [r2, #12]

	// Enable Transmitter
	USART1->CR1 |= USART_CR1_TE;
 8000888:	4a12      	ldr	r2, [pc, #72]	; (80008d4 <USART1_Enable+0x60>)
 800088a:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <USART1_Enable+0x60>)
 800088c:	899b      	ldrh	r3, [r3, #12]
 800088e:	b29b      	uxth	r3, r3
 8000890:	f043 0308 	orr.w	r3, r3, #8
 8000894:	b29b      	uxth	r3, r3
 8000896:	8193      	strh	r3, [r2, #12]

	// Enable Receiver
	USART1->CR1 |= USART_CR1_RE;
 8000898:	4a0e      	ldr	r2, [pc, #56]	; (80008d4 <USART1_Enable+0x60>)
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <USART1_Enable+0x60>)
 800089c:	899b      	ldrh	r3, [r3, #12]
 800089e:	b29b      	uxth	r3, r3
 80008a0:	f043 0304 	orr.w	r3, r3, #4
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	8193      	strh	r3, [r2, #12]

	// Enable parity error interrupt
	USART1->CR1 |= USART_CR1_PEIE;
 80008a8:	4a0a      	ldr	r2, [pc, #40]	; (80008d4 <USART1_Enable+0x60>)
 80008aa:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <USART1_Enable+0x60>)
 80008ac:	899b      	ldrh	r3, [r3, #12]
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	8193      	strh	r3, [r2, #12]

    // Enable the USART1 interrupt in the NVIC
    NVIC_EnableIRQ(USART1_IRQn);
 80008b8:	2025      	movs	r0, #37	; 0x25
 80008ba:	f7ff ff11 	bl	80006e0 <NVIC_EnableIRQ>

 	// Enable reception buffer not empty flag interrupt
    USART1->CR1 |= USART_CR1_RXNEIE;
 80008be:	4a05      	ldr	r2, [pc, #20]	; (80008d4 <USART1_Enable+0x60>)
 80008c0:	4b04      	ldr	r3, [pc, #16]	; (80008d4 <USART1_Enable+0x60>)
 80008c2:	899b      	ldrh	r3, [r3, #12]
 80008c4:	b29b      	uxth	r3, r3
 80008c6:	f043 0320 	orr.w	r3, r3, #32
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	8193      	strh	r3, [r2, #12]
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40011000 	.word	0x40011000

080008d8 <USART1_SendData>:




void USART1_SendData(uint8_t data)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	71fb      	strb	r3, [r7, #7]
	// Wait until TXE (Transmit Data Register Empty) is set
    while (!(USART1->SR & USART_SR_TXE));
 80008e2:	bf00      	nop
 80008e4:	4b08      	ldr	r3, [pc, #32]	; (8000908 <USART1_SendData+0x30>)
 80008e6:	881b      	ldrh	r3, [r3, #0]
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d0f8      	beq.n	80008e4 <USART1_SendData+0xc>

    // Transmit data
    USART1->DR = (uint32_t) data;
 80008f2:	4b05      	ldr	r3, [pc, #20]	; (8000908 <USART1_SendData+0x30>)
 80008f4:	79fa      	ldrb	r2, [r7, #7]
 80008f6:	b292      	uxth	r2, r2
 80008f8:	809a      	strh	r2, [r3, #4]
}
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	40011000 	.word	0x40011000

0800090c <USART1_WriteString>:


void USART1_WriteString(uint8_t *str)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
    while (*str)
 8000914:	e006      	b.n	8000924 <USART1_WriteString+0x18>
    {
    	USART1_SendData(*str++);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	1c5a      	adds	r2, r3, #1
 800091a:	607a      	str	r2, [r7, #4]
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff ffda 	bl	80008d8 <USART1_SendData>
    while (*str)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d1f4      	bne.n	8000916 <USART1_WriteString+0xa>
    }
}
 800092c:	bf00      	nop
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <USART1_ReceiveString>:
	return (uint8_t)(USART1->DR);
}


uint8_t USART1_ReceiveString(uint8_t *buffer, uint8_t buffer_size)
{
 8000934:	b480      	push	{r7}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	460b      	mov	r3, r1
 800093e:	70fb      	strb	r3, [r7, #3]
    if (rx_complete)
 8000940:	4b1c      	ldr	r3, [pc, #112]	; (80009b4 <USART1_ReceiveString+0x80>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	b2db      	uxtb	r3, r3
 8000946:	2b00      	cmp	r3, #0
 8000948:	d02c      	beq.n	80009a4 <USART1_ReceiveString+0x70>
    {
        uint8_t length = rx_index < buffer_size ? rx_index : buffer_size - 1;
 800094a:	4b1b      	ldr	r3, [pc, #108]	; (80009b8 <USART1_ReceiveString+0x84>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	b2db      	uxtb	r3, r3
 8000950:	78fa      	ldrb	r2, [r7, #3]
 8000952:	429a      	cmp	r2, r3
 8000954:	d803      	bhi.n	800095e <USART1_ReceiveString+0x2a>
 8000956:	78fb      	ldrb	r3, [r7, #3]
 8000958:	3b01      	subs	r3, #1
 800095a:	b2db      	uxtb	r3, r3
 800095c:	e002      	b.n	8000964 <USART1_ReceiveString+0x30>
 800095e:	4b16      	ldr	r3, [pc, #88]	; (80009b8 <USART1_ReceiveString+0x84>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	b2db      	uxtb	r3, r3
 8000964:	73bb      	strb	r3, [r7, #14]
        for (uint8_t i = 0; i < length; i++)
 8000966:	2300      	movs	r3, #0
 8000968:	73fb      	strb	r3, [r7, #15]
 800096a:	e00a      	b.n	8000982 <USART1_ReceiveString+0x4e>
        {
            buffer[i] = rx_buffer[i];
 800096c:	7bfb      	ldrb	r3, [r7, #15]
 800096e:	687a      	ldr	r2, [r7, #4]
 8000970:	4413      	add	r3, r2
 8000972:	7bfa      	ldrb	r2, [r7, #15]
 8000974:	4911      	ldr	r1, [pc, #68]	; (80009bc <USART1_ReceiveString+0x88>)
 8000976:	5c8a      	ldrb	r2, [r1, r2]
 8000978:	b2d2      	uxtb	r2, r2
 800097a:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 0; i < length; i++)
 800097c:	7bfb      	ldrb	r3, [r7, #15]
 800097e:	3301      	adds	r3, #1
 8000980:	73fb      	strb	r3, [r7, #15]
 8000982:	7bfa      	ldrb	r2, [r7, #15]
 8000984:	7bbb      	ldrb	r3, [r7, #14]
 8000986:	429a      	cmp	r2, r3
 8000988:	d3f0      	bcc.n	800096c <USART1_ReceiveString+0x38>
        }
        buffer[length] = '\0';
 800098a:	7bbb      	ldrb	r3, [r7, #14]
 800098c:	687a      	ldr	r2, [r7, #4]
 800098e:	4413      	add	r3, r2
 8000990:	2200      	movs	r2, #0
 8000992:	701a      	strb	r2, [r3, #0]
        rx_index = 0;
 8000994:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <USART1_ReceiveString+0x84>)
 8000996:	2200      	movs	r2, #0
 8000998:	701a      	strb	r2, [r3, #0]
        rx_complete = 0;
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <USART1_ReceiveString+0x80>)
 800099c:	2200      	movs	r2, #0
 800099e:	701a      	strb	r2, [r3, #0]
        return 1;
 80009a0:	2301      	movs	r3, #1
 80009a2:	e000      	b.n	80009a6 <USART1_ReceiveString+0x72>
    }
    return 0;
 80009a4:	2300      	movs	r3, #0
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3714      	adds	r7, #20
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	20000035 	.word	0x20000035
 80009b8:	20000034 	.word	0x20000034
 80009bc:	20000038 	.word	0x20000038

080009c0 <USART1_IRQHandler>:



void USART1_IRQHandler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0

	if (USART1->SR & USART_SR_RXNE)
 80009c6:	4b33      	ldr	r3, [pc, #204]	; (8000a94 <USART1_IRQHandler+0xd4>)
 80009c8:	881b      	ldrh	r3, [r3, #0]
 80009ca:	b29b      	uxth	r3, r3
 80009cc:	f003 0320 	and.w	r3, r3, #32
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d01d      	beq.n	8000a10 <USART1_IRQHandler+0x50>
	{
		char data = (char)(USART1->DR);
 80009d4:	4b2f      	ldr	r3, [pc, #188]	; (8000a94 <USART1_IRQHandler+0xd4>)
 80009d6:	889b      	ldrh	r3, [r3, #4]
 80009d8:	b29b      	uxth	r3, r3
 80009da:	71fb      	strb	r3, [r7, #7]
		if (data == '\r' || data == '\n')
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	2b0d      	cmp	r3, #13
 80009e0:	d002      	beq.n	80009e8 <USART1_IRQHandler+0x28>
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	2b0a      	cmp	r3, #10
 80009e6:	d103      	bne.n	80009f0 <USART1_IRQHandler+0x30>
		{
			rx_complete = 1;
 80009e8:	4b2b      	ldr	r3, [pc, #172]	; (8000a98 <USART1_IRQHandler+0xd8>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	701a      	strb	r2, [r3, #0]
 80009ee:	e00f      	b.n	8000a10 <USART1_IRQHandler+0x50>
		}
		else
		{
			if (rx_index < BUFFER_SIZE - 1)
 80009f0:	4b2a      	ldr	r3, [pc, #168]	; (8000a9c <USART1_IRQHandler+0xdc>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	2b62      	cmp	r3, #98	; 0x62
 80009f8:	d80a      	bhi.n	8000a10 <USART1_IRQHandler+0x50>
			{
				rx_buffer[rx_index++] = data;
 80009fa:	4b28      	ldr	r3, [pc, #160]	; (8000a9c <USART1_IRQHandler+0xdc>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	1c5a      	adds	r2, r3, #1
 8000a02:	b2d1      	uxtb	r1, r2
 8000a04:	4a25      	ldr	r2, [pc, #148]	; (8000a9c <USART1_IRQHandler+0xdc>)
 8000a06:	7011      	strb	r1, [r2, #0]
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4a25      	ldr	r2, [pc, #148]	; (8000aa0 <USART1_IRQHandler+0xe0>)
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	5453      	strb	r3, [r2, r1]
			}
		}
	}

    if (USART1->SR & USART_SR_PE)
 8000a10:	4b20      	ldr	r3, [pc, #128]	; (8000a94 <USART1_IRQHandler+0xd4>)
 8000a12:	881b      	ldrh	r3, [r3, #0]
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d007      	beq.n	8000a2e <USART1_IRQHandler+0x6e>
    {
        // Handle parity error
        USART1->SR &= ~USART_SR_PE; // Clear parity error flag
 8000a1e:	4a1d      	ldr	r2, [pc, #116]	; (8000a94 <USART1_IRQHandler+0xd4>)
 8000a20:	4b1c      	ldr	r3, [pc, #112]	; (8000a94 <USART1_IRQHandler+0xd4>)
 8000a22:	881b      	ldrh	r3, [r3, #0]
 8000a24:	b29b      	uxth	r3, r3
 8000a26:	f023 0301 	bic.w	r3, r3, #1
 8000a2a:	b29b      	uxth	r3, r3
 8000a2c:	8013      	strh	r3, [r2, #0]
    }

    if (USART1->SR & USART_SR_FE)
 8000a2e:	4b19      	ldr	r3, [pc, #100]	; (8000a94 <USART1_IRQHandler+0xd4>)
 8000a30:	881b      	ldrh	r3, [r3, #0]
 8000a32:	b29b      	uxth	r3, r3
 8000a34:	f003 0302 	and.w	r3, r3, #2
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d007      	beq.n	8000a4c <USART1_IRQHandler+0x8c>
    {
        // Handle framing error
        USART1->SR &= ~USART_SR_FE; // Clear framing error flag
 8000a3c:	4a15      	ldr	r2, [pc, #84]	; (8000a94 <USART1_IRQHandler+0xd4>)
 8000a3e:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <USART1_IRQHandler+0xd4>)
 8000a40:	881b      	ldrh	r3, [r3, #0]
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	f023 0302 	bic.w	r3, r3, #2
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	8013      	strh	r3, [r2, #0]
    }

    if (USART1->SR & USART_SR_NE)
 8000a4c:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <USART1_IRQHandler+0xd4>)
 8000a4e:	881b      	ldrh	r3, [r3, #0]
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	f003 0304 	and.w	r3, r3, #4
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d007      	beq.n	8000a6a <USART1_IRQHandler+0xaa>
    {
        // Handle noise error
        USART1->SR &= ~USART_SR_NE; // Clear noise error flag
 8000a5a:	4a0e      	ldr	r2, [pc, #56]	; (8000a94 <USART1_IRQHandler+0xd4>)
 8000a5c:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <USART1_IRQHandler+0xd4>)
 8000a5e:	881b      	ldrh	r3, [r3, #0]
 8000a60:	b29b      	uxth	r3, r3
 8000a62:	f023 0304 	bic.w	r3, r3, #4
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	8013      	strh	r3, [r2, #0]
    }

    if (USART1->SR & USART_SR_ORE)
 8000a6a:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <USART1_IRQHandler+0xd4>)
 8000a6c:	881b      	ldrh	r3, [r3, #0]
 8000a6e:	b29b      	uxth	r3, r3
 8000a70:	f003 0308 	and.w	r3, r3, #8
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d007      	beq.n	8000a88 <USART1_IRQHandler+0xc8>
    {
        // Handle overrun error
        USART1->SR &= ~USART_SR_ORE; // Clear overrun error flag
 8000a78:	4a06      	ldr	r2, [pc, #24]	; (8000a94 <USART1_IRQHandler+0xd4>)
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <USART1_IRQHandler+0xd4>)
 8000a7c:	881b      	ldrh	r3, [r3, #0]
 8000a7e:	b29b      	uxth	r3, r3
 8000a80:	f023 0308 	bic.w	r3, r3, #8
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	8013      	strh	r3, [r2, #0]
    }
}
 8000a88:	bf00      	nop
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	40011000 	.word	0x40011000
 8000a98:	20000035 	.word	0x20000035
 8000a9c:	20000034 	.word	0x20000034
 8000aa0:	20000038 	.word	0x20000038

08000aa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000aa4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000adc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000aa8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000aaa:	e003      	b.n	8000ab4 <LoopCopyDataInit>

08000aac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000aae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ab0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ab2:	3104      	adds	r1, #4

08000ab4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ab4:	480b      	ldr	r0, [pc, #44]	; (8000ae4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ab8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000aba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000abc:	d3f6      	bcc.n	8000aac <CopyDataInit>
  ldr  r2, =_sbss
 8000abe:	4a0b      	ldr	r2, [pc, #44]	; (8000aec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ac0:	e002      	b.n	8000ac8 <LoopFillZerobss>

08000ac2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ac2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ac4:	f842 3b04 	str.w	r3, [r2], #4

08000ac8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ac8:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000aca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000acc:	d3f9      	bcc.n	8000ac2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ace:	f000 f865 	bl	8000b9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ad2:	f000 f991 	bl	8000df8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ad6:	f7ff fb77 	bl	80001c8 <main>
  bx  lr    
 8000ada:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000adc:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000ae0:	08000e88 	.word	0x08000e88
  ldr  r0, =_sdata
 8000ae4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ae8:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8000aec:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8000af0:	2000009c 	.word	0x2000009c

08000af4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000af4:	e7fe      	b.n	8000af4 <ADC_IRQHandler>

08000af6 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0
}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <HardFault_Handler+0x4>

08000b0a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000b0e:	e7fe      	b.n	8000b0e <MemManage_Handler+0x4>

08000b10 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <BusFault_Handler+0x4>

08000b16 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <UsageFault_Handler+0x4>

08000b1c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr

08000b2a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0
}
 8000b2e:	bf00      	nop
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <SysTick_Handler>:
  * @param  None
  * @retval None
  */

void SysTick_Handler(void)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	af00      	add	r7, sp, #0
	SysTick_IncrementTicks_cb();
 8000b4a:	f7ff fbbf 	bl	80002cc <SysTick_IncrementTicks_cb>
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
	...

08000b54 <EXTI2_IRQHandler>:
  * @brief  This function handles EXTI2 Handler.
  * @param  None
  * @retval None
  */
void EXTI2_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0

	gpio_write(PORTA,6,1);
 8000b58:	2201      	movs	r2, #1
 8000b5a:	2106      	movs	r1, #6
 8000b5c:	4802      	ldr	r0, [pc, #8]	; (8000b68 <EXTI2_IRQHandler+0x14>)
 8000b5e:	f7ff fd27 	bl	80005b0 <gpio_write>
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40020000 	.word	0x40020000

08000b6c <EXTI3_IRQHandler>:
  * @brief  This function handles EXTI3 Handler.
  * @param  None
  * @retval None
  */
void EXTI3_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
	gpio_write(PORTA,6,0);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2106      	movs	r1, #6
 8000b74:	4802      	ldr	r0, [pc, #8]	; (8000b80 <EXTI3_IRQHandler+0x14>)
 8000b76:	f7ff fd1b 	bl	80005b0 <gpio_write>
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40020000 	.word	0x40020000

08000b84 <DMA2_Stream0_IRQHandler>:
  * @brief  This function handles DMA2 Handler.
  * @param  None
  * @retval None
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
	gpio_write(PORTA,6,1);
 8000b88:	2201      	movs	r2, #1
 8000b8a:	2106      	movs	r1, #6
 8000b8c:	4802      	ldr	r0, [pc, #8]	; (8000b98 <DMA2_Stream0_IRQHandler+0x14>)
 8000b8e:	f7ff fd0f 	bl	80005b0 <gpio_write>
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40020000 	.word	0x40020000

08000b9c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ba0:	4a16      	ldr	r2, [pc, #88]	; (8000bfc <SystemInit+0x60>)
 8000ba2:	4b16      	ldr	r3, [pc, #88]	; (8000bfc <SystemInit+0x60>)
 8000ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000bb0:	4a13      	ldr	r2, [pc, #76]	; (8000c00 <SystemInit+0x64>)
 8000bb2:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <SystemInit+0x64>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f043 0301 	orr.w	r3, r3, #1
 8000bba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000bbc:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <SystemInit+0x64>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000bc2:	4a0f      	ldr	r2, [pc, #60]	; (8000c00 <SystemInit+0x64>)
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <SystemInit+0x64>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000bcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bd0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000bd2:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <SystemInit+0x64>)
 8000bd4:	4a0b      	ldr	r2, [pc, #44]	; (8000c04 <SystemInit+0x68>)
 8000bd6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000bd8:	4a09      	ldr	r2, [pc, #36]	; (8000c00 <SystemInit+0x64>)
 8000bda:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <SystemInit+0x64>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000be2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <SystemInit+0x64>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000bea:	f000 f889 	bl	8000d00 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bee:	4b03      	ldr	r3, [pc, #12]	; (8000bfc <SystemInit+0x60>)
 8000bf0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bf4:	609a      	str	r2, [r3, #8]
#endif
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	e000ed00 	.word	0xe000ed00
 8000c00:	40023800 	.word	0x40023800
 8000c04:	24003010 	.word	0x24003010

08000c08 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b087      	sub	sp, #28
 8000c0c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	613b      	str	r3, [r7, #16]
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
 8000c16:	2302      	movs	r3, #2
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	2302      	movs	r3, #2
 8000c20:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000c22:	4b32      	ldr	r3, [pc, #200]	; (8000cec <SystemCoreClockUpdate+0xe4>)
 8000c24:	689b      	ldr	r3, [r3, #8]
 8000c26:	f003 030c 	and.w	r3, r3, #12
 8000c2a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000c2c:	693b      	ldr	r3, [r7, #16]
 8000c2e:	2b04      	cmp	r3, #4
 8000c30:	d007      	beq.n	8000c42 <SystemCoreClockUpdate+0x3a>
 8000c32:	2b08      	cmp	r3, #8
 8000c34:	d009      	beq.n	8000c4a <SystemCoreClockUpdate+0x42>
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d13d      	bne.n	8000cb6 <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000c3a:	4b2d      	ldr	r3, [pc, #180]	; (8000cf0 <SystemCoreClockUpdate+0xe8>)
 8000c3c:	4a2d      	ldr	r2, [pc, #180]	; (8000cf4 <SystemCoreClockUpdate+0xec>)
 8000c3e:	601a      	str	r2, [r3, #0]
      break;
 8000c40:	e03d      	b.n	8000cbe <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000c42:	4b2b      	ldr	r3, [pc, #172]	; (8000cf0 <SystemCoreClockUpdate+0xe8>)
 8000c44:	4a2c      	ldr	r2, [pc, #176]	; (8000cf8 <SystemCoreClockUpdate+0xf0>)
 8000c46:	601a      	str	r2, [r3, #0]
      break;
 8000c48:	e039      	b.n	8000cbe <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000c4a:	4b28      	ldr	r3, [pc, #160]	; (8000cec <SystemCoreClockUpdate+0xe4>)
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	0d9b      	lsrs	r3, r3, #22
 8000c50:	f003 0301 	and.w	r3, r3, #1
 8000c54:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c56:	4b25      	ldr	r3, [pc, #148]	; (8000cec <SystemCoreClockUpdate+0xe4>)
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000c5e:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d00c      	beq.n	8000c80 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000c66:	4a24      	ldr	r2, [pc, #144]	; (8000cf8 <SystemCoreClockUpdate+0xf0>)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6e:	4a1f      	ldr	r2, [pc, #124]	; (8000cec <SystemCoreClockUpdate+0xe4>)
 8000c70:	6852      	ldr	r2, [r2, #4]
 8000c72:	0992      	lsrs	r2, r2, #6
 8000c74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000c78:	fb02 f303 	mul.w	r3, r2, r3
 8000c7c:	617b      	str	r3, [r7, #20]
 8000c7e:	e00b      	b.n	8000c98 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000c80:	4a1c      	ldr	r2, [pc, #112]	; (8000cf4 <SystemCoreClockUpdate+0xec>)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c88:	4a18      	ldr	r2, [pc, #96]	; (8000cec <SystemCoreClockUpdate+0xe4>)
 8000c8a:	6852      	ldr	r2, [r2, #4]
 8000c8c:	0992      	lsrs	r2, r2, #6
 8000c8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000c92:	fb02 f303 	mul.w	r3, r2, r3
 8000c96:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000c98:	4b14      	ldr	r3, [pc, #80]	; (8000cec <SystemCoreClockUpdate+0xe4>)
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	0c1b      	lsrs	r3, r3, #16
 8000c9e:	f003 0303 	and.w	r3, r3, #3
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000ca8:	697a      	ldr	r2, [r7, #20]
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb0:	4a0f      	ldr	r2, [pc, #60]	; (8000cf0 <SystemCoreClockUpdate+0xe8>)
 8000cb2:	6013      	str	r3, [r2, #0]
      break;
 8000cb4:	e003      	b.n	8000cbe <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <SystemCoreClockUpdate+0xe8>)
 8000cb8:	4a0e      	ldr	r2, [pc, #56]	; (8000cf4 <SystemCoreClockUpdate+0xec>)
 8000cba:	601a      	str	r2, [r3, #0]
      break;
 8000cbc:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <SystemCoreClockUpdate+0xe4>)
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	091b      	lsrs	r3, r3, #4
 8000cc4:	f003 030f 	and.w	r3, r3, #15
 8000cc8:	4a0c      	ldr	r2, [pc, #48]	; (8000cfc <SystemCoreClockUpdate+0xf4>)
 8000cca:	5cd3      	ldrb	r3, [r2, r3]
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <SystemCoreClockUpdate+0xe8>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8000cda:	4a05      	ldr	r2, [pc, #20]	; (8000cf0 <SystemCoreClockUpdate+0xe8>)
 8000cdc:	6013      	str	r3, [r2, #0]
}
 8000cde:	bf00      	nop
 8000ce0:	371c      	adds	r7, #28
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	20000000 	.word	0x20000000
 8000cf4:	00f42400 	.word	0x00f42400
 8000cf8:	017d7840 	.word	0x017d7840
 8000cfc:	20000004 	.word	0x20000004

08000d00 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000d0e:	4a36      	ldr	r2, [pc, #216]	; (8000de8 <SetSysClock+0xe8>)
 8000d10:	4b35      	ldr	r3, [pc, #212]	; (8000de8 <SetSysClock+0xe8>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d18:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000d1a:	4b33      	ldr	r3, [pc, #204]	; (8000de8 <SetSysClock+0xe8>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d22:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3301      	adds	r3, #1
 8000d28:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d103      	bne.n	8000d38 <SetSysClock+0x38>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000d36:	d1f0      	bne.n	8000d1a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000d38:	4b2b      	ldr	r3, [pc, #172]	; (8000de8 <SetSysClock+0xe8>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d002      	beq.n	8000d4a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000d44:	2301      	movs	r3, #1
 8000d46:	603b      	str	r3, [r7, #0]
 8000d48:	e001      	b.n	8000d4e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d142      	bne.n	8000dda <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000d54:	4a24      	ldr	r2, [pc, #144]	; (8000de8 <SetSysClock+0xe8>)
 8000d56:	4b24      	ldr	r3, [pc, #144]	; (8000de8 <SetSysClock+0xe8>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d5e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000d60:	4a22      	ldr	r2, [pc, #136]	; (8000dec <SetSysClock+0xec>)
 8000d62:	4b22      	ldr	r3, [pc, #136]	; (8000dec <SetSysClock+0xec>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d6a:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000d6c:	4a1e      	ldr	r2, [pc, #120]	; (8000de8 <SetSysClock+0xe8>)
 8000d6e:	4b1e      	ldr	r3, [pc, #120]	; (8000de8 <SetSysClock+0xe8>)
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000d74:	4a1c      	ldr	r2, [pc, #112]	; (8000de8 <SetSysClock+0xe8>)
 8000d76:	4b1c      	ldr	r3, [pc, #112]	; (8000de8 <SetSysClock+0xe8>)
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d7e:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000d80:	4a19      	ldr	r2, [pc, #100]	; (8000de8 <SetSysClock+0xe8>)
 8000d82:	4b19      	ldr	r3, [pc, #100]	; (8000de8 <SetSysClock+0xe8>)
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000d8a:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000d8c:	4b16      	ldr	r3, [pc, #88]	; (8000de8 <SetSysClock+0xe8>)
 8000d8e:	4a18      	ldr	r2, [pc, #96]	; (8000df0 <SetSysClock+0xf0>)
 8000d90:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000d92:	4a15      	ldr	r2, [pc, #84]	; (8000de8 <SetSysClock+0xe8>)
 8000d94:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <SetSysClock+0xe8>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d9c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000d9e:	bf00      	nop
 8000da0:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <SetSysClock+0xe8>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d0f9      	beq.n	8000da0 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000dac:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <SetSysClock+0xf4>)
 8000dae:	f240 7205 	movw	r2, #1797	; 0x705
 8000db2:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000db4:	4a0c      	ldr	r2, [pc, #48]	; (8000de8 <SetSysClock+0xe8>)
 8000db6:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <SetSysClock+0xe8>)
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	f023 0303 	bic.w	r3, r3, #3
 8000dbe:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000dc0:	4a09      	ldr	r2, [pc, #36]	; (8000de8 <SetSysClock+0xe8>)
 8000dc2:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <SetSysClock+0xe8>)
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	f043 0302 	orr.w	r3, r3, #2
 8000dca:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000dcc:	bf00      	nop
 8000dce:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <SetSysClock+0xe8>)
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	f003 030c 	and.w	r3, r3, #12
 8000dd6:	2b08      	cmp	r3, #8
 8000dd8:	d1f9      	bne.n	8000dce <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40007000 	.word	0x40007000
 8000df0:	07405419 	.word	0x07405419
 8000df4:	40023c00 	.word	0x40023c00

08000df8 <__libc_init_array>:
 8000df8:	b570      	push	{r4, r5, r6, lr}
 8000dfa:	4e0d      	ldr	r6, [pc, #52]	; (8000e30 <__libc_init_array+0x38>)
 8000dfc:	4c0d      	ldr	r4, [pc, #52]	; (8000e34 <__libc_init_array+0x3c>)
 8000dfe:	1ba4      	subs	r4, r4, r6
 8000e00:	10a4      	asrs	r4, r4, #2
 8000e02:	2500      	movs	r5, #0
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	d109      	bne.n	8000e1c <__libc_init_array+0x24>
 8000e08:	4e0b      	ldr	r6, [pc, #44]	; (8000e38 <__libc_init_array+0x40>)
 8000e0a:	4c0c      	ldr	r4, [pc, #48]	; (8000e3c <__libc_init_array+0x44>)
 8000e0c:	f000 f818 	bl	8000e40 <_init>
 8000e10:	1ba4      	subs	r4, r4, r6
 8000e12:	10a4      	asrs	r4, r4, #2
 8000e14:	2500      	movs	r5, #0
 8000e16:	42a5      	cmp	r5, r4
 8000e18:	d105      	bne.n	8000e26 <__libc_init_array+0x2e>
 8000e1a:	bd70      	pop	{r4, r5, r6, pc}
 8000e1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e20:	4798      	blx	r3
 8000e22:	3501      	adds	r5, #1
 8000e24:	e7ee      	b.n	8000e04 <__libc_init_array+0xc>
 8000e26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e2a:	4798      	blx	r3
 8000e2c:	3501      	adds	r5, #1
 8000e2e:	e7f2      	b.n	8000e16 <__libc_init_array+0x1e>
 8000e30:	08000e80 	.word	0x08000e80
 8000e34:	08000e80 	.word	0x08000e80
 8000e38:	08000e80 	.word	0x08000e80
 8000e3c:	08000e84 	.word	0x08000e84

08000e40 <_init>:
 8000e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e42:	bf00      	nop
 8000e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e46:	bc08      	pop	{r3}
 8000e48:	469e      	mov	lr, r3
 8000e4a:	4770      	bx	lr

08000e4c <_fini>:
 8000e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e4e:	bf00      	nop
 8000e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e52:	bc08      	pop	{r3}
 8000e54:	469e      	mov	lr, r3
 8000e56:	4770      	bx	lr
